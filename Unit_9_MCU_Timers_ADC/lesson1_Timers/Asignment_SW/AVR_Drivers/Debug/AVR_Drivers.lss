
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800068  00800068  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ece  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b6  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bd  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fc  00000000  00000000  000030c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000039c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_10>
  2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_13>
  38:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWM0_ISR_OVF_CallBack>:
	_delay_ms(1000);
	Watchdog_Kick();
	PORTA = 1 << 4;
	_delay_ms(1200);	//if time_delay is bigger than 1 second the MCU is reseted and port A will continuously change its value from 1 to 1<<4 each 1 second
						//if time_delay is smaller than 1 second PortA will equal to 1 for 1 second then will equal (1 << 4) as long as the MCU is powered on
	Watchdog_Disable();
  92:	81 11       	cpse	r24, r1
  94:	02 c0       	rjmp	.+4      	; 0x9a <PWM0_ISR_OVF_CallBack+0x8>
  96:	0e 94 b8 00 	call	0x170	; 0x170 <PWM0_Reset>
  9a:	08 95       	ret

0000009c <PWM0_Test>:
	WDTCR |= (1 <<  WDE) ;		//Watchdog enable
}

void PWM0_Test()
{
	PWM0_Init(&PWM0_CFG);
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 61 00 	call	0xc2	; 0xc2 <PWM0_Init>
	PWM0_Start(N_Pulses_Undefined, PWM0_T_High_1ms);	//for N_Pulses_Undefined PWM is continuously generated 
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	cb 01       	movw	r24, r22
  ac:	0e 94 7d 00 	call	0xfa	; 0xfa <PWM0_Start>
  b0:	08 95       	ret

000000b2 <main>:

PWM0_Configurations_t	PWM0_CFG = {PWM0_Clear_OC, PWM0_Fast_Mode, PWM0_Interrupt_Overflow, PWM0_ISR_OVF_CallBack, NULL};

int main()
{
	DDRA = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	Global_ISR_Enable();
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8f bf       	out	0x3f, r24	; 63
	//Watchdog_Test();
	//Timer0_Test();
	PWM0_Test();
  bc:	0e 94 4e 00 	call	0x9c	; 0x9c <PWM0_Test>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0xe>

000000c2 <PWM0_Init>:
//----------------------------------------------------------------------
//APIs implementation
//----------------------------------------------------------------------

void PWM0_Init(PWM0_Configurations_t* PWM_CFG)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	G_PWM0_Config = *PWM_CFG;
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	fe 01       	movw	r30, r28
  cc:	a4 e7       	ldi	r26, 0x74	; 116
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <PWM0_Init+0xe>
	
	TCCR0 = 0; //stop timer and reset all configurations
  d8:	13 be       	out	0x33, r1	; 51
	TCCR0 = (PWM_CFG->Compare_Output_Mode) | (PWM_CFG->Operation_Mode);		//all configurations are set for TCCR0 except the Timer clock is set in API :PWM0_Start
  da:	98 81       	ld	r25, Y
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	83 bf       	out	0x33, r24	; 51
																			//PWM0 is not working yet
	if (PWM_CFG->Compare_Output_Mode != PWM0_Disconnect_OC)
  e2:	88 81       	ld	r24, Y
  e4:	88 23       	and	r24, r24
  e6:	19 f0       	breq	.+6      	; 0xee <PWM0_Init+0x2c>
	{
		DDRB |= 1<<3;
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	87 bb       	out	0x17, r24	; 23
	}
	
	TIMSK = 0;
  ee:	19 be       	out	0x39, r1	; 57
	TIMSK = PWM_CFG->Select_Interrupt;
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	89 bf       	out	0x39, r24	; 57
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <PWM0_Start>:



void PWM0_Start(uint32_t N_Pulses, uint8_t T_High)
{
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	6b 01       	movw	r12, r22
 104:	7c 01       	movw	r14, r24
	if (G_PWM0_Config.Operation_Mode == PWM0_Fast_Mode)
 106:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <G_PWM0_Config+0x1>
 10a:	88 34       	cpi	r24, 0x48	; 72
 10c:	81 f4       	brne	.+32     	; 0x12e <PWM0_Start+0x34>
	{
		OCR0 = (uint8_t)( (T_High * F_CPU / 1000) / 64);					//OCR = (T_High * F_CPU)/Prescaler
 10e:	a4 2f       	mov	r26, r20
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	32 e1       	ldi	r19, 0x12	; 18
 116:	4a e7       	ldi	r20, 0x7A	; 122
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__muluhisi3>
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	3a ef       	ldi	r19, 0xFA	; 250
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodsi4>
 12a:	2c bf       	out	0x3c, r18	; 60
 12c:	11 c0       	rjmp	.+34     	; 0x150 <PWM0_Start+0x56>
	}else if (G_PWM0_Config.Operation_Mode == PWM0_Phase_Correct_Mode)
 12e:	80 34       	cpi	r24, 0x40	; 64
 130:	79 f4       	brne	.+30     	; 0x150 <PWM0_Start+0x56>
	{
		OCR0 = (uint8_t)( (T_High * F_CPU / 1000 ) / (2*64));				//OCR = (T_High * F_CPU)/(2*Prescaler)
 132:	a4 2f       	mov	r26, r20
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	32 e1       	ldi	r19, 0x12	; 18
 13a:	4a e7       	ldi	r20, 0x7A	; 122
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__muluhisi3>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	34 ef       	ldi	r19, 0xF4	; 244
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodsi4>
 14e:	2c bf       	out	0x3c, r18	; 60
	}

	G_N_Pulses = N_Pulses;
 150:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <G_N_Pulses>
 154:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <G_N_Pulses+0x1>
 158:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <G_N_Pulses+0x2>
 15c:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <G_N_Pulses+0x3>
	TCCR0 |= PWM0_Sytem_CLK_divided_by_64;
 160:	83 b7       	in	r24, 0x33	; 51
 162:	83 60       	ori	r24, 0x03	; 3
 164:	83 bf       	out	0x33, r24	; 51
}
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	08 95       	ret

00000170 <PWM0_Reset>:

void PWM0_Reset(void)
{
	TCCR0 = TCNT0 = TIMSK = 0;
 170:	19 be       	out	0x39, r1	; 57
 172:	12 be       	out	0x32, r1	; 50
 174:	13 be       	out	0x33, r1	; 51
 176:	08 95       	ret

00000178 <__vector_11>:
//----------------------------------------------------------------------
//ISR
//----------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	static uint32_t Cnt_OVF = 0;
	uint8_t Pulses_Cnt_Status = Cnt_Status_Working;
	if(G_N_Pulses != N_Pulses_Undefined)
 19e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <G_N_Pulses>
 1a2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <G_N_Pulses+0x1>
 1a6:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <G_N_Pulses+0x2>
 1aa:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <G_N_Pulses+0x3>
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	a1 05       	cpc	r26, r1
 1b2:	b1 05       	cpc	r27, r1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_11+0x40>
 1b6:	43 c0       	rjmp	.+134    	; 0x23e <__vector_11+0xc6>
	{
		Cnt_OVF++;
 1b8:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <__data_end>
 1bc:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <__data_end+0x1>
 1c0:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end+0x2>
 1c4:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <__data_end+0x3>
 1c8:	4f 5f       	subi	r20, 0xFF	; 255
 1ca:	5f 4f       	sbci	r21, 0xFF	; 255
 1cc:	6f 4f       	sbci	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
 1d4:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
 1d8:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <__data_end+0x2>
 1dc:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <__data_end+0x3>
		if (Cnt_OVF == (G_N_Pulses+1) && G_PWM0_Config.Operation_Mode == PWM0_Fast_Mode)
 1e0:	8c 01       	movw	r16, r24
 1e2:	9d 01       	movw	r18, r26
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	2f 4f       	sbci	r18, 0xFF	; 255
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	40 17       	cp	r20, r16
 1ee:	51 07       	cpc	r21, r17
 1f0:	62 07       	cpc	r22, r18
 1f2:	73 07       	cpc	r23, r19
 1f4:	71 f4       	brne	.+28     	; 0x212 <__vector_11+0x9a>
 1f6:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <G_PWM0_Config+0x1>
 1fa:	28 34       	cpi	r18, 0x48	; 72
 1fc:	51 f4       	brne	.+20     	; 0x212 <__vector_11+0x9a>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
 1fe:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 202:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 206:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 20a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
	if(G_N_Pulses != N_Pulses_Undefined)
	{
		Cnt_OVF++;
		if (Cnt_OVF == (G_N_Pulses+1) && G_PWM0_Config.Operation_Mode == PWM0_Fast_Mode)
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
 20e:	80 e0       	ldi	r24, 0x00	; 0
			Cnt_OVF =0;
 210:	1b c0       	rjmp	.+54     	; 0x248 <__vector_11+0xd0>
		}else if (Cnt_OVF == (G_N_Pulses+2) && G_PWM0_Config.Operation_Mode == PWM0_Phase_Correct_Mode)
 212:	02 96       	adiw	r24, 0x02	; 2
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	48 17       	cp	r20, r24
 21a:	59 07       	cpc	r21, r25
 21c:	6a 07       	cpc	r22, r26
 21e:	7b 07       	cpc	r23, r27
 220:	81 f4       	brne	.+32     	; 0x242 <__vector_11+0xca>
 222:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <G_PWM0_Config+0x1>
 226:	80 34       	cpi	r24, 0x40	; 64
 228:	71 f4       	brne	.+28     	; 0x246 <__vector_11+0xce>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
 22a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 22e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 232:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 236:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
		}else if (Cnt_OVF == (G_N_Pulses+2) && G_PWM0_Config.Operation_Mode == PWM0_Phase_Correct_Mode)
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	05 c0       	rjmp	.+10     	; 0x248 <__vector_11+0xd0>
//----------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
	static uint32_t Cnt_OVF = 0;
	uint8_t Pulses_Cnt_Status = Cnt_Status_Working;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	03 c0       	rjmp	.+6      	; 0x248 <__vector_11+0xd0>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	01 c0       	rjmp	.+2      	; 0x248 <__vector_11+0xd0>
 246:	81 e0       	ldi	r24, 0x01	; 1
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
		}
	}
	
	if(G_PWM0_Config.PTR_ISR_OVF_CallBack != NULL)
 248:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <G_PWM0_Config+0x3>
 24c:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <G_PWM0_Config+0x4>
 250:	30 97       	sbiw	r30, 0x00	; 0
 252:	09 f0       	breq	.+2      	; 0x256 <__vector_11+0xde>
		G_PWM0_Config.PTR_ISR_OVF_CallBack(Pulses_Cnt_Status);
 254:	09 95       	icall
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	if(G_PWM0_Config.PTR_ISR_COMP_CallBack != NULL)
 29e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <G_PWM0_Config+0x5>
 2a2:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <G_PWM0_Config+0x6>
 2a6:	30 97       	sbiw	r30, 0x00	; 0
 2a8:	09 f0       	breq	.+2      	; 0x2ac <__vector_10+0x30>
		G_PWM0_Config.PTR_ISR_COMP_CallBack();
 2aa:	09 95       	icall
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	7f 91       	pop	r23
 2ba:	6f 91       	pop	r22
 2bc:	5f 91       	pop	r21
 2be:	4f 91       	pop	r20
 2c0:	3f 91       	pop	r19
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_14>:
	return Data_Received;
}


ISR(USART_UDRE_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	P_UART_UDRE_ISR_CallBack();
 2f0:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <P_UART_UDRE_ISR_CallBack>
 2f4:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <P_UART_UDRE_ISR_CallBack+0x1>
 2f8:	09 95       	icall
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_13>:


ISR(USART_RXC_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	P_UART_RX_ISR_CallBack();
 33e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P_UART_RX_ISR_CallBack>
 342:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P_UART_RX_ISR_CallBack+0x1>
 346:	09 95       	icall
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__udivmodsi4>:
 36a:	a1 e2       	ldi	r26, 0x21	; 33
 36c:	1a 2e       	mov	r1, r26
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	fd 01       	movw	r30, r26
 374:	0d c0       	rjmp	.+26     	; 0x390 <__udivmodsi4_ep>

00000376 <__udivmodsi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	ee 1f       	adc	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	a2 17       	cp	r26, r18
 380:	b3 07       	cpc	r27, r19
 382:	e4 07       	cpc	r30, r20
 384:	f5 07       	cpc	r31, r21
 386:	20 f0       	brcs	.+8      	; 0x390 <__udivmodsi4_ep>
 388:	a2 1b       	sub	r26, r18
 38a:	b3 0b       	sbc	r27, r19
 38c:	e4 0b       	sbc	r30, r20
 38e:	f5 0b       	sbc	r31, r21

00000390 <__udivmodsi4_ep>:
 390:	66 1f       	adc	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	1a 94       	dec	r1
 39a:	69 f7       	brne	.-38     	; 0x376 <__udivmodsi4_loop>
 39c:	60 95       	com	r22
 39e:	70 95       	com	r23
 3a0:	80 95       	com	r24
 3a2:	90 95       	com	r25
 3a4:	9b 01       	movw	r18, r22
 3a6:	ac 01       	movw	r20, r24
 3a8:	bd 01       	movw	r22, r26
 3aa:	cf 01       	movw	r24, r30
 3ac:	08 95       	ret

000003ae <__muluhisi3>:
 3ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__umulhisi3>
 3b2:	a5 9f       	mul	r26, r21
 3b4:	90 0d       	add	r25, r0
 3b6:	b4 9f       	mul	r27, r20
 3b8:	90 0d       	add	r25, r0
 3ba:	a4 9f       	mul	r26, r20
 3bc:	80 0d       	add	r24, r0
 3be:	91 1d       	adc	r25, r1
 3c0:	11 24       	eor	r1, r1
 3c2:	08 95       	ret

000003c4 <__umulhisi3>:
 3c4:	a2 9f       	mul	r26, r18
 3c6:	b0 01       	movw	r22, r0
 3c8:	b3 9f       	mul	r27, r19
 3ca:	c0 01       	movw	r24, r0
 3cc:	a3 9f       	mul	r26, r19
 3ce:	70 0d       	add	r23, r0
 3d0:	81 1d       	adc	r24, r1
 3d2:	11 24       	eor	r1, r1
 3d4:	91 1d       	adc	r25, r1
 3d6:	b2 9f       	mul	r27, r18
 3d8:	70 0d       	add	r23, r0
 3da:	81 1d       	adc	r24, r1
 3dc:	11 24       	eor	r1, r1
 3de:	91 1d       	adc	r25, r1
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
