
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007e  0080007e  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012da  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b06  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c30  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e89  00000000  00000000  00003ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_10>
  2c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_13>
  38:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  8a:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_kick>:
// static functions implementation
//--------------------------------------------------------

static void LCD_kick(void) //done
{
	LCD_CTRL |= (1 << LCD_EN);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	84 60       	ori	r24, 0x04	; 4
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_kick+0x10>
  a2:	00 00       	nop
	_delay_ms(1); // enable pulse duration
	LCD_CTRL &= ~(1 << LCD_EN);	
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	83 ef       	ldi	r24, 0xF3	; 243
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_kick+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LCD_kick+0x22>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_DISP_ON);
	
}

void LCD_WRITE_COMMAND(unsigned char command) //done
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	//LCD_Check_Is_Busy();
	
	//RS >>> command register: 0
	//RW >>> write: 0 (set already)
	LCD_CTRL &= ~((1 << LCD_RS) | (1 << LCD_RW));
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = command;
	LCD_kick();
	#endif
	
	#ifdef LCD_FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | ((command & 0xF0)); //send the Higher nibble of the command
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	9c 2f       	mov	r25, r28
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
	LCD_kick();		
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << LCD_DATA_shift); //send the lower nibble of the command
  d2:	2b b3       	in	r18, 0x1b	; 27
  d4:	30 e1       	ldi	r19, 0x10	; 16
  d6:	c3 9f       	mul	r28, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	92 2f       	mov	r25, r18
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	89 2b       	or	r24, r25
  e2:	8b bb       	out	0x1b, r24	; 27
	LCD_kick();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>

	#endif
}
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <LCD_WRITE_CHAR>:


void LCD_WRITE_CHAR(unsigned char character) //DONE
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	//LCD_Check_Is_Busy();
	//RS >>> Data register: 1
	//RW >>> write: 0 (set already)
	LCD_CTRL |= (1 << LCD_RS);
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << LCD_RW);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = character;
	LCD_kick();
	#endif
	
	#ifdef LCD_FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | ((character & 0xF0)); //send the Higher nibble
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	9c 2f       	mov	r25, r28
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	89 2b       	or	r24, r25
 106:	8b bb       	out	0x1b, r24	; 27
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_WRITE_CHAR+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_WRITE_CHAR+0x26>
 112:	00 00       	nop
	_delay_ms(1);
	LCD_kick();
 114:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << LCD_DATA_shift); //send the lower nibble
 118:	2b b3       	in	r18, 0x1b	; 27
 11a:	30 e1       	ldi	r19, 0x10	; 16
 11c:	c3 9f       	mul	r28, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	8b bb       	out	0x1b, r24	; 27
	LCD_kick();
 12a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_kick>
	#endif
	//_delay_ms(40); //to make writing slow
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Write_Number>:
	}
}


void LCD_Write_Number(uint32_t Num)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	2c 97       	sbiw	r28, 0x0c	; 12
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	uint8_t Str_Num[12]={0}, i = 11;
 14a:	fe 01       	movw	r30, r28
 14c:	31 96       	adiw	r30, 0x01	; 1
 14e:	2c e0       	ldi	r18, 0x0C	; 12
 150:	df 01       	movw	r26, r30
 152:	1d 92       	st	X+, r1
 154:	2a 95       	dec	r18
 156:	e9 f7       	brne	.-6      	; 0x152 <LCD_Write_Number+0x20>
	if (Num != 0)
 158:	61 15       	cp	r22, r1
 15a:	71 05       	cpc	r23, r1
 15c:	81 05       	cpc	r24, r1
 15e:	91 05       	cpc	r25, r1
 160:	a9 f4       	brne	.+42     	; 0x18c <LCD_Write_Number+0x5a>
 162:	2a c0       	rjmp	.+84     	; 0x1b8 <LCD_Write_Number+0x86>
	{
		while(Num)
		{
			i--;
 164:	11 50       	subi	r17, 0x01	; 1
			Str_Num[i]= (Num % 10)+'0';
 166:	2a e0       	ldi	r18, 0x0A	; 10
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__udivmodsi4>
 172:	e1 e0       	ldi	r30, 0x01	; 1
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ec 0f       	add	r30, r28
 178:	fd 1f       	adc	r31, r29
 17a:	e1 0f       	add	r30, r17
 17c:	f1 1d       	adc	r31, r1
 17e:	60 5d       	subi	r22, 0xD0	; 208
 180:	60 83       	st	Z, r22
			Num /= 10;
 182:	62 2f       	mov	r22, r18
 184:	73 2f       	mov	r23, r19
 186:	84 2f       	mov	r24, r20
 188:	95 2f       	mov	r25, r21
 18a:	01 c0       	rjmp	.+2      	; 0x18e <LCD_Write_Number+0x5c>
 18c:	1b e0       	ldi	r17, 0x0B	; 11
void LCD_Write_Number(uint32_t Num)
{
	uint8_t Str_Num[12]={0}, i = 11;
	if (Num != 0)
	{
		while(Num)
 18e:	61 15       	cp	r22, r1
 190:	71 05       	cpc	r23, r1
 192:	81 05       	cpc	r24, r1
 194:	91 05       	cpc	r25, r1
 196:	31 f7       	brne	.-52     	; 0x164 <LCD_Write_Number+0x32>
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <LCD_Write_Number+0x80>
			Str_Num[i]= (Num % 10)+'0';
			Num /= 10;
		}
		while(i < 11)
		{
			LCD_WRITE_CHAR(Str_Num[i++]);
 19a:	01 e0       	ldi	r16, 0x01	; 1
 19c:	01 0f       	add	r16, r17
 19e:	e1 e0       	ldi	r30, 0x01	; 1
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	e1 0f       	add	r30, r17
 1a8:	f1 1d       	adc	r31, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	0e 94 76 00 	call	0xec	; 0xec <LCD_WRITE_CHAR>
 1b0:	10 2f       	mov	r17, r16
		{
			i--;
			Str_Num[i]= (Num % 10)+'0';
			Num /= 10;
		}
		while(i < 11)
 1b2:	1b 30       	cpi	r17, 0x0B	; 11
 1b4:	90 f3       	brcs	.-28     	; 0x19a <LCD_Write_Number+0x68>
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCD_Write_Number+0x8c>
		{
			LCD_WRITE_CHAR(Str_Num[i++]);
		}
	}else
	{
		LCD_WRITE_CHAR('0');
 1b8:	80 e3       	ldi	r24, 0x30	; 48
 1ba:	0e 94 76 00 	call	0xec	; 0xec <LCD_WRITE_CHAR>
	}	
}
 1be:	2c 96       	adiw	r28, 0x0c	; 12
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void) //done
{
	LCD_WRITE_COMMAND(0x01);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
 1da:	08 95       	ret

000001dc <LCD_INIT>:
 1dc:	87 e8       	ldi	r24, 0x87	; 135
 1de:	93 e1       	ldi	r25, 0x13	; 19
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_INIT+0x4>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_INIT+0xa>
 1e6:	00 00       	nop

void LCD_INIT() //DONE
{
	_delay_ms(20);
	//set LCD_Port, LCD_CTRL as output
	LCD_DataDir_PORT |= (0xFF << LCD_DATA_shift); 
 1e8:	8a b3       	in	r24, 0x1a	; 26
 1ea:	80 6f       	ori	r24, 0xF0	; 240
 1ec:	8a bb       	out	0x1a, r24	; 26
	LCD_DataDir_CTRL |= (1 << LCD_RS | 1 << LCD_RW | 1 << LCD_EN);
 1ee:	87 b3       	in	r24, 0x17	; 23
 1f0:	87 60       	ori	r24, 0x07	; 7
 1f2:	87 bb       	out	0x17, r24	; 23
	
	//RS >>> command register : 0
	//RW >>> Write : 0
	//EN >>> disabled : 0
	LCD_CTRL &= ~(1 << LCD_RS | 1 << LCD_RW | 1 << LCD_EN);
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	88 7f       	andi	r24, 0xF8	; 248
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	85 ea       	ldi	r24, 0xA5	; 165
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_INIT+0x22>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_INIT+0x28>
 204:	00 00       	nop
	
	//time delay to wait the LCD after power on 
	_delay_ms(15);
	
	// clear the screen
	LCD_Clear_Screen();
 206:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_Clear_Screen>
	Sets DDRAM address 0 in
	address counter. Also
	returns display from being
	shifted to original position.
	DDRAM contents remain unchanged*/
	LCD_WRITE_COMMAND(0x02);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
 228:	08 95       	ret

0000022a <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if(position >= 0)
	{
		switch(line)
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	19 f0       	breq	.+6      	; 0x234 <LCD_GOTO_XY+0xa>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	31 f0       	breq	.+12     	; 0x23e <LCD_GOTO_XY+0x14>
 232:	08 95       	ret
		{
			case 1:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	86 0f       	add	r24, r22
 238:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
			break;
 23c:	08 95       	ret
			case 2:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 23e:	80 ec       	ldi	r24, 0xC0	; 192
 240:	86 0f       	add	r24, r22
 242:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_WRITE_COMMAND>
 246:	08 95       	ret

00000248 <LCD_WRITE_STRING>:
	#endif
	//_delay_ms(40); //to make writing slow
}

void LCD_WRITE_STRING(uint8_t* string)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	8c 01       	movw	r16, r24
	uint8_t i, cnt;
	for(i=cnt=0; string[i] > 0; ++i )
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	15 c0       	rjmp	.+42     	; 0x282 <LCD_WRITE_STRING+0x3a>
	{
		LCD_WRITE_CHAR(string[i]);
 258:	0e 94 76 00 	call	0xec	; 0xec <LCD_WRITE_CHAR>
		cnt++;
 25c:	cf 5f       	subi	r28, 0xFF	; 255
		switch(cnt)
 25e:	c0 31       	cpi	r28, 0x10	; 16
 260:	19 f0       	breq	.+6      	; 0x268 <LCD_WRITE_STRING+0x20>
 262:	c0 32       	cpi	r28, 0x20	; 32
 264:	31 f0       	breq	.+12     	; 0x272 <LCD_WRITE_STRING+0x2a>
 266:	0c c0       	rjmp	.+24     	; 0x280 <LCD_WRITE_STRING+0x38>
		{
			
		case 16:	
			LCD_GOTO_XY(2,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_GOTO_XY>
			break;
 270:	07 c0       	rjmp	.+14     	; 0x280 <LCD_WRITE_STRING+0x38>
		case 32:
			LCD_Clear_Screen();
 272:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_GOTO_XY>
			cnt = 0;
 27e:	c0 e0       	ldi	r28, 0x00	; 0
}

void LCD_WRITE_STRING(uint8_t* string)
{
	uint8_t i, cnt;
	for(i=cnt=0; string[i] > 0; ++i )
 280:	df 5f       	subi	r29, 0xFF	; 255
 282:	f8 01       	movw	r30, r16
 284:	ed 0f       	add	r30, r29
 286:	f1 1d       	adc	r31, r1
 288:	80 81       	ld	r24, Z
 28a:	81 11       	cpse	r24, r1
 28c:	e5 cf       	rjmp	.-54     	; 0x258 <LCD_WRITE_STRING+0x10>
			LCD_Clear_Screen();
			LCD_GOTO_XY(1,0);
			cnt = 0;
		}
	}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <ADC_Test>:
	return 0;
}
	

void ADC_Test(enum Value_to_show Test_value)
{
 298:	cf 92       	push	r12
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	cf 93       	push	r28
 2a2:	c8 2f       	mov	r28, r24
	uint32_t ADC_Data_Reg = 0, value = 0;
	ADC_Data_Reg = ADC_Read_Single_Conversion(ADC0);
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <ADC_Read_Single_Conversion>
 2aa:	6c 01       	movw	r12, r24
 2ac:	e1 2c       	mov	r14, r1
 2ae:	f1 2c       	mov	r15, r1
	LCD_Clear_Screen();
 2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCD_Clear_Screen>
	LCD_GOTO_XY(1,0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 15 01 	call	0x22a	; 0x22a <LCD_GOTO_XY>
	switch(Test_value)
 2bc:	c1 30       	cpi	r28, 0x01	; 1
 2be:	49 f0       	breq	.+18     	; 0x2d2 <ADC_Test+0x3a>
 2c0:	18 f0       	brcs	.+6      	; 0x2c8 <ADC_Test+0x30>
 2c2:	c2 30       	cpi	r28, 0x02	; 2
 2c4:	e1 f0       	breq	.+56     	; 0x2fe <ADC_Test+0x66>
 2c6:	31 c0       	rjmp	.+98     	; 0x32a <ADC_Test+0x92>
	{
		case ADC_Reg:
			value = ADC_Data_Reg;
			LCD_WRITE_STRING((uint8_t*)"ADC_Reg: ");
 2c8:	85 e6       	ldi	r24, 0x65	; 101
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 24 01 	call	0x248	; 0x248 <LCD_WRITE_STRING>
			break;
 2d0:	2f c0       	rjmp	.+94     	; 0x330 <ADC_Test+0x98>
			
		case Voltage_Value:
			value = ADC_Data_Reg*ADC_AVCC/(1 << ADC_Resoultion);	//voltage in mv
 2d2:	a8 e8       	ldi	r26, 0x88	; 136
 2d4:	b3 e1       	ldi	r27, 0x13	; 19
 2d6:	a7 01       	movw	r20, r14
 2d8:	96 01       	movw	r18, r12
 2da:	0e 94 0a 03 	call	0x614	; 0x614 <__muluhisi3>
 2de:	6b 01       	movw	r12, r22
 2e0:	7c 01       	movw	r14, r24
 2e2:	0b 2e       	mov	r0, r27
 2e4:	ba e0       	ldi	r27, 0x0A	; 10
 2e6:	f6 94       	lsr	r15
 2e8:	e7 94       	ror	r14
 2ea:	d7 94       	ror	r13
 2ec:	c7 94       	ror	r12
 2ee:	ba 95       	dec	r27
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <ADC_Test+0x4e>
 2f2:	b0 2d       	mov	r27, r0
			LCD_WRITE_STRING((uint8_t*)"V(mv): ");
 2f4:	8f e6       	ldi	r24, 0x6F	; 111
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 24 01 	call	0x248	; 0x248 <LCD_WRITE_STRING>
			break;
 2fc:	19 c0       	rjmp	.+50     	; 0x330 <ADC_Test+0x98>
			
		case Voltage_Percenteage:
			value = (ADC_Data_Reg*100)/(1 << ADC_Resoultion);
 2fe:	a4 e6       	ldi	r26, 0x64	; 100
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	a7 01       	movw	r20, r14
 304:	96 01       	movw	r18, r12
 306:	0e 94 0a 03 	call	0x614	; 0x614 <__muluhisi3>
 30a:	6b 01       	movw	r12, r22
 30c:	7c 01       	movw	r14, r24
 30e:	0b 2e       	mov	r0, r27
 310:	ba e0       	ldi	r27, 0x0A	; 10
 312:	f6 94       	lsr	r15
 314:	e7 94       	ror	r14
 316:	d7 94       	ror	r13
 318:	c7 94       	ror	r12
 31a:	ba 95       	dec	r27
 31c:	d1 f7       	brne	.-12     	; 0x312 <ADC_Test+0x7a>
 31e:	b0 2d       	mov	r27, r0
			LCD_WRITE_STRING((uint8_t*)"V(%): ");
 320:	87 e7       	ldi	r24, 0x77	; 119
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 24 01 	call	0x248	; 0x248 <LCD_WRITE_STRING>
			break;
 328:	03 c0       	rjmp	.+6      	; 0x330 <ADC_Test+0x98>
}
	

void ADC_Test(enum Value_to_show Test_value)
{
	uint32_t ADC_Data_Reg = 0, value = 0;
 32a:	c1 2c       	mov	r12, r1
 32c:	d1 2c       	mov	r13, r1
 32e:	76 01       	movw	r14, r12
		case Voltage_Percenteage:
			value = (ADC_Data_Reg*100)/(1 << ADC_Resoultion);
			LCD_WRITE_STRING((uint8_t*)"V(%): ");
			break;
	}
	LCD_Write_Number(value);
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Write_Number>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	84 e3       	ldi	r24, 0x34	; 52
 33c:	9c e0       	ldi	r25, 0x0C	; 12
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <ADC_Test+0xa6>
 346:	00 c0       	rjmp	.+0      	; 0x348 <ADC_Test+0xb0>
 348:	00 00       	nop
	_delay_ms(500);
}
 34a:	cf 91       	pop	r28
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	08 95       	ret

00000356 <main>:
void ADC_Test(enum Value_to_show);


int main()
{
	LCD_INIT();
 356:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_INIT>
	ADC_Init(&ADC_CFG);
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 b5 01 	call	0x36a	; 0x36a <ADC_Init>
	while(1)
	{
		//ADC_Test(ADC_Reg);
 		ADC_Test(Voltage_Value);
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 4c 01 	call	0x298	; 0x298 <ADC_Test>
 368:	fc cf       	rjmp	.-8      	; 0x362 <main+0xc>

0000036a <ADC_Init>:

//----------------------------------------------------------------------
//APIs implementation
//----------------------------------------------------------------------
void ADC_Init(ADC_Configurations_t* ADC_CFG)
{
 36a:	fc 01       	movw	r30, r24
	ADMUX = 0;
 36c:	17 b8       	out	0x07, r1	; 7
	ADMUX = ADC_CFG->Left_Adjust_Result | ADC_CFG->Voltage_Reference_SRC;
 36e:	90 81       	ld	r25, Z
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	89 2b       	or	r24, r25
 374:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0;
 376:	16 b8       	out	0x06, r1	; 6
	ADCSRA = ADC_CFG->Interrupt_Status | ADC_CFG->Prescaler;
 378:	93 81       	ldd	r25, Z+3	; 0x03
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	89 2b       	or	r24, r25
 37e:	86 b9       	out	0x06, r24	; 6
	
	if (ADC_CFG->Auto_Trigger_Source != ADC_Auto_Trigger_None)
 380:	84 81       	ldd	r24, Z+4	; 0x04
 382:	8f 3f       	cpi	r24, 0xFF	; 255
 384:	49 f0       	breq	.+18     	; 0x398 <ADC_Init+0x2e>
	{
		ADCSRA = (1 << ADATE);
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	86 b9       	out	0x06, r24	; 6
		SFIOR &= ~(0b111 << ADTSn);
 38a:	80 b7       	in	r24, 0x30	; 48
 38c:	8f 71       	andi	r24, 0x1F	; 31
 38e:	80 bf       	out	0x30, r24	; 48
		SFIOR |= ADC_CFG->Auto_Trigger_Source;
 390:	90 b7       	in	r25, 0x30	; 48
 392:	84 81       	ldd	r24, Z+4	; 0x04
 394:	89 2b       	or	r24, r25
 396:	80 bf       	out	0x30, r24	; 48
	}
	ADCSRA |= 1 << ADEN;
 398:	86 b1       	in	r24, 0x06	; 6
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	86 b9       	out	0x06, r24	; 6
 39e:	08 95       	ret

000003a0 <ADC_Read_Single_Conversion>:


uint16_t ADC_Read_Single_Conversion(uint8_t ADC_Channel)
{
	uint16_t ADC_value=0;
	ADMUX  |= ADC_Channel;
 3a0:	97 b1       	in	r25, 0x07	; 7
 3a2:	89 2b       	or	r24, r25
 3a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1 << ADSC; 
 3a6:	86 b1       	in	r24, 0x06	; 6
 3a8:	80 64       	ori	r24, 0x40	; 64
 3aa:	86 b9       	out	0x06, r24	; 6
	
	while (Read_Bit(ADCSRA,ADSC));
 3ac:	36 99       	sbic	0x06, 6	; 6
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <ADC_Read_Single_Conversion+0xc>
	
	if(!Read_Bit(ADMUX, ADLAR))
 3b0:	3d 99       	sbic	0x07, 5	; 7
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <ADC_Read_Single_Conversion+0x24>
	{
		ADC_value = ADCL | ((uint16_t)( 0x03 & ADCH) << 8);
 3b4:	24 b1       	in	r18, 0x04	; 4
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	83 70       	andi	r24, 0x03	; 3
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	98 2f       	mov	r25, r24
 3be:	88 27       	eor	r24, r24
 3c0:	82 2b       	or	r24, r18
 3c2:	08 95       	ret
	}else
	{
		ADC_value = (( 0xC0 & ADCL) >> 6) | ((uint16_t)ADCH << 2);
 3c4:	24 b1       	in	r18, 0x04	; 4
 3c6:	22 95       	swap	r18
 3c8:	26 95       	lsr	r18
 3ca:	26 95       	lsr	r18
 3cc:	23 70       	andi	r18, 0x03	; 3
 3ce:	85 b1       	in	r24, 0x05	; 5
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	82 2b       	or	r24, r18
	}
	return ADC_value;
 3dc:	08 95       	ret

000003de <__vector_11>:
//----------------------------------------------------------------------
//ISR
//----------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	static uint32_t Cnt_OVF = 0;
	uint8_t Pulses_Cnt_Status = Cnt_Status_Working;
	if(G_N_Pulses != N_Pulses_Undefined)
 404:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <G_N_Pulses>
 408:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <G_N_Pulses+0x1>
 40c:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <G_N_Pulses+0x2>
 410:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <G_N_Pulses+0x3>
 414:	00 97       	sbiw	r24, 0x00	; 0
 416:	a1 05       	cpc	r26, r1
 418:	b1 05       	cpc	r27, r1
 41a:	09 f4       	brne	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	43 c0       	rjmp	.+134    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
	{
		Cnt_OVF++;
 41e:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <__data_end>
 422:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <__data_end+0x1>
 426:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__data_end+0x2>
 42a:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <__data_end+0x3>
 42e:	4f 5f       	subi	r20, 0xFF	; 255
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	6f 4f       	sbci	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <__data_end>
 43a:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <__data_end+0x1>
 43e:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <__data_end+0x2>
 442:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <__data_end+0x3>
		if (Cnt_OVF == (G_N_Pulses+1) && G_PWM0_Config.Operation_Mode == PWM0_Fast_Mode)
 446:	8c 01       	movw	r16, r24
 448:	9d 01       	movw	r18, r26
 44a:	0f 5f       	subi	r16, 0xFF	; 255
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
 44e:	2f 4f       	sbci	r18, 0xFF	; 255
 450:	3f 4f       	sbci	r19, 0xFF	; 255
 452:	40 17       	cp	r20, r16
 454:	51 07       	cpc	r21, r17
 456:	62 07       	cpc	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	71 f4       	brne	.+28     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45c:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <G_PWM0_Config+0x1>
 460:	28 34       	cpi	r18, 0x48	; 72
 462:	51 f4       	brne	.+20     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
 464:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 468:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__data_end+0x1>
 46c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end+0x2>
 470:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_end+0x3>
	if(G_N_Pulses != N_Pulses_Undefined)
	{
		Cnt_OVF++;
		if (Cnt_OVF == (G_N_Pulses+1) && G_PWM0_Config.Operation_Mode == PWM0_Fast_Mode)
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
 474:	80 e0       	ldi	r24, 0x00	; 0
			Cnt_OVF =0;
 476:	1b c0       	rjmp	.+54     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		}else if (Cnt_OVF == (G_N_Pulses+2) && G_PWM0_Config.Operation_Mode == PWM0_Phase_Correct_Mode)
 478:	02 96       	adiw	r24, 0x02	; 2
 47a:	a1 1d       	adc	r26, r1
 47c:	b1 1d       	adc	r27, r1
 47e:	48 17       	cp	r20, r24
 480:	59 07       	cpc	r21, r25
 482:	6a 07       	cpc	r22, r26
 484:	7b 07       	cpc	r23, r27
 486:	81 f4       	brne	.+32     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 488:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <G_PWM0_Config+0x1>
 48c:	80 34       	cpi	r24, 0x40	; 64
 48e:	71 f4       	brne	.+28     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
 490:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 494:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__data_end+0x1>
 498:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end+0x2>
 49c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_end+0x3>
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
		}else if (Cnt_OVF == (G_N_Pulses+2) && G_PWM0_Config.Operation_Mode == PWM0_Phase_Correct_Mode)
		{
			Pulses_Cnt_Status = Cnt_Status_Finished;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
//----------------------------------------------------------------------

ISR(TIMER0_OVF_vect)
{
	static uint32_t Cnt_OVF = 0;
	uint8_t Pulses_Cnt_Status = Cnt_Status_Working;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
			Pulses_Cnt_Status = Cnt_Status_Finished;
			Cnt_OVF =0;
		}
	}
	
	if(G_PWM0_Config.PTR_ISR_OVF_CallBack != NULL)
 4ae:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <G_PWM0_Config+0x3>
 4b2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <G_PWM0_Config+0x4>
 4b6:	30 97       	sbiw	r30, 0x00	; 0
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		G_PWM0_Config.PTR_ISR_OVF_CallBack(Pulses_Cnt_Status);
 4ba:	09 95       	icall
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	if(G_PWM0_Config.PTR_ISR_COMP_CallBack != NULL)
 504:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <G_PWM0_Config+0x5>
 508:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <G_PWM0_Config+0x6>
 50c:	30 97       	sbiw	r30, 0x00	; 0
 50e:	09 f0       	breq	.+2      	; 0x512 <__vector_10+0x30>
		G_PWM0_Config.PTR_ISR_COMP_CallBack();
 510:	09 95       	icall
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_14>:
	return Data_Received;
}


ISR(USART_UDRE_vect)
{
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	P_UART_UDRE_ISR_CallBack();
 556:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <P_UART_UDRE_ISR_CallBack>
 55a:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <P_UART_UDRE_ISR_CallBack+0x1>
 55e:	09 95       	icall
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_13>:


ISR(USART_RXC_vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
	P_UART_RX_ISR_CallBack();
 5a4:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <P_UART_RX_ISR_CallBack>
 5a8:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <P_UART_RX_ISR_CallBack+0x1>
 5ac:	09 95       	icall
 5ae:	ff 91       	pop	r31
 5b0:	ef 91       	pop	r30
 5b2:	bf 91       	pop	r27
 5b4:	af 91       	pop	r26
 5b6:	9f 91       	pop	r25
 5b8:	8f 91       	pop	r24
 5ba:	7f 91       	pop	r23
 5bc:	6f 91       	pop	r22
 5be:	5f 91       	pop	r21
 5c0:	4f 91       	pop	r20
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__udivmodsi4>:
 5d0:	a1 e2       	ldi	r26, 0x21	; 33
 5d2:	1a 2e       	mov	r1, r26
 5d4:	aa 1b       	sub	r26, r26
 5d6:	bb 1b       	sub	r27, r27
 5d8:	fd 01       	movw	r30, r26
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <__udivmodsi4_ep>

000005dc <__udivmodsi4_loop>:
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	ee 1f       	adc	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	a2 17       	cp	r26, r18
 5e6:	b3 07       	cpc	r27, r19
 5e8:	e4 07       	cpc	r30, r20
 5ea:	f5 07       	cpc	r31, r21
 5ec:	20 f0       	brcs	.+8      	; 0x5f6 <__udivmodsi4_ep>
 5ee:	a2 1b       	sub	r26, r18
 5f0:	b3 0b       	sbc	r27, r19
 5f2:	e4 0b       	sbc	r30, r20
 5f4:	f5 0b       	sbc	r31, r21

000005f6 <__udivmodsi4_ep>:
 5f6:	66 1f       	adc	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	1a 94       	dec	r1
 600:	69 f7       	brne	.-38     	; 0x5dc <__udivmodsi4_loop>
 602:	60 95       	com	r22
 604:	70 95       	com	r23
 606:	80 95       	com	r24
 608:	90 95       	com	r25
 60a:	9b 01       	movw	r18, r22
 60c:	ac 01       	movw	r20, r24
 60e:	bd 01       	movw	r22, r26
 610:	cf 01       	movw	r24, r30
 612:	08 95       	ret

00000614 <__muluhisi3>:
 614:	0e 94 15 03 	call	0x62a	; 0x62a <__umulhisi3>
 618:	a5 9f       	mul	r26, r21
 61a:	90 0d       	add	r25, r0
 61c:	b4 9f       	mul	r27, r20
 61e:	90 0d       	add	r25, r0
 620:	a4 9f       	mul	r26, r20
 622:	80 0d       	add	r24, r0
 624:	91 1d       	adc	r25, r1
 626:	11 24       	eor	r1, r1
 628:	08 95       	ret

0000062a <__umulhisi3>:
 62a:	a2 9f       	mul	r26, r18
 62c:	b0 01       	movw	r22, r0
 62e:	b3 9f       	mul	r27, r19
 630:	c0 01       	movw	r24, r0
 632:	a3 9f       	mul	r26, r19
 634:	70 0d       	add	r23, r0
 636:	81 1d       	adc	r24, r1
 638:	11 24       	eor	r1, r1
 63a:	91 1d       	adc	r25, r1
 63c:	b2 9f       	mul	r27, r18
 63e:	70 0d       	add	r23, r0
 640:	81 1d       	adc	r24, r1
 642:	11 24       	eor	r1, r1
 644:	91 1d       	adc	r25, r1
 646:	08 95       	ret

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
