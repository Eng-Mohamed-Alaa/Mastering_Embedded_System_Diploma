
Software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007eb  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fd  00000000  00000000  00000fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cf  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  7a:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_init>:
void task3(void)
{
	if(Read_Bit(PIND,0))
		Set_Bit(PORTD,4);
	while(Read_Bit(PIND,0));
	Reset_Bit(PORTD,4);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	8c 6f       	ori	r24, 0xFC	; 252
  92:	84 bb       	out	0x14, r24	; 20
  94:	08 95       	ret

00000096 <task4>:
}

void task4(void)
{
	while(!Read_Bit(PIND,0));
  96:	80 9b       	sbis	0x10, 0	; 16
  98:	fe cf       	rjmp	.-4      	; 0x96 <task4>
	uint8_t i;
	Set_Bit(PORTC,3);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	85 bb       	out	0x15, r24	; 21
	for(i=0; i < 10; ++i)
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	14 c0       	rjmp	.+40     	; 0xcc <task4+0x36>
	{
		PORTC &= ~(0xf<<4);
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	9f 70       	andi	r25, 0x0F	; 15
  a8:	95 bb       	out	0x15, r25	; 21
		PORTC |= i<<4;
  aa:	95 b3       	in	r25, 0x15	; 21
  ac:	40 e1       	ldi	r20, 0x10	; 16
  ae:	84 9f       	mul	r24, r20
  b0:	90 01       	movw	r18, r0
  b2:	11 24       	eor	r1, r1
  b4:	29 2b       	or	r18, r25
  b6:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	29 e6       	ldi	r18, 0x69	; 105
  bc:	38 e1       	ldi	r19, 0x18	; 24
  be:	91 50       	subi	r25, 0x01	; 1
  c0:	20 40       	sbci	r18, 0x00	; 0
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <task4+0x28>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <task4+0x32>
  c8:	00 00       	nop
void task4(void)
{
	while(!Read_Bit(PIND,0));
	uint8_t i;
	Set_Bit(PORTC,3);
	for(i=0; i < 10; ++i)
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	50 f3       	brcs	.-44     	; 0xa4 <task4+0xe>
	{
		PORTC &= ~(0xf<<4);
		PORTC |= i<<4;
		_delay_ms(1000);
	}
	Reset_Bit(PORTC,3);
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	08 95       	ret

000000d8 <main>:
	DDRC |= 0b11111100;
}

int main(void)
{
	GPIO_init();
  d8:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_init>
	{
		
		//task1();
		//task2();
		//task3();
		task4();
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <task4>
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
