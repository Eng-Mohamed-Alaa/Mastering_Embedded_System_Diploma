
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000abc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000bec  08000bec  00010bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c14  08000c14  00010c1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c14  08000c14  00010c1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c14  08000c1c  00010c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c14  08000c14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000c1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000c1c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032ab  00000000  00000000  00010c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000784  00000000  00000000  00013ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000093c  00000000  00000000  00014674  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000190  00000000  00000000  00014fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  00015140  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000011e2  00000000  00000000  00015288  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00000b17  00000000  00000000  0001646a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016f81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e0  00000000  00000000  00016ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bd4 	.word	0x08000bd4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bd4 	.word	0x08000bd4

08000170 <LCD_INIT>:
//--------------------------------------------------------
//LCD APIs implementation
//--------------------------------------------------------

void LCD_INIT()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	GPIO_Pin_Configuration_t LCD_Pin_Config;

	//set LCD_Port as output, Pin: [7:0]
	LCD_Pin_Config.GPIO_Pin_Number = LCD_D0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	LCD_Pin_Config.GPIO_Pin_Mode = GPIO_Mode_Output_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	LCD_Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	4839      	ldr	r0, [pc, #228]	; (800026c <LCD_INIT+0xfc>)
 8000188:	f000 fbd4 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4835      	ldr	r0, [pc, #212]	; (800026c <LCD_INIT+0xfc>)
 8000196:	f000 fbcd 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D2;
 800019a:	2304      	movs	r3, #4
 800019c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	4619      	mov	r1, r3
 80001a2:	4832      	ldr	r0, [pc, #200]	; (800026c <LCD_INIT+0xfc>)
 80001a4:	f000 fbc6 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D3;
 80001a8:	2308      	movs	r3, #8
 80001aa:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	482e      	ldr	r0, [pc, #184]	; (800026c <LCD_INIT+0xfc>)
 80001b2:	f000 fbbf 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D4;
 80001b6:	2310      	movs	r3, #16
 80001b8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	482b      	ldr	r0, [pc, #172]	; (800026c <LCD_INIT+0xfc>)
 80001c0:	f000 fbb8 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D5;
 80001c4:	2320      	movs	r3, #32
 80001c6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4827      	ldr	r0, [pc, #156]	; (800026c <LCD_INIT+0xfc>)
 80001ce:	f000 fbb1 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D6;
 80001d2:	2340      	movs	r3, #64	; 0x40
 80001d4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4619      	mov	r1, r3
 80001da:	4824      	ldr	r0, [pc, #144]	; (800026c <LCD_INIT+0xfc>)
 80001dc:	f000 fbaa 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_D7;
 80001e0:	2380      	movs	r3, #128	; 0x80
 80001e2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_PORT, &LCD_Pin_Config);
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	4619      	mov	r1, r3
 80001e8:	4820      	ldr	r0, [pc, #128]	; (800026c <LCD_INIT+0xfc>)
 80001ea:	f000 fba3 	bl	8000934 <MCAL_GPIO_Init>

	//set LCD_CTRL as output, Pin:[10:8]
	LCD_Pin_Config.GPIO_Pin_Number = LCD_RS;
 80001ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001f2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CTRL, &LCD_Pin_Config);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	481c      	ldr	r0, [pc, #112]	; (800026c <LCD_INIT+0xfc>)
 80001fa:	f000 fb9b 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_RW;
 80001fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000202:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CTRL, &LCD_Pin_Config);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	4619      	mov	r1, r3
 8000208:	4818      	ldr	r0, [pc, #96]	; (800026c <LCD_INIT+0xfc>)
 800020a:	f000 fb93 	bl	8000934 <MCAL_GPIO_Init>

	LCD_Pin_Config.GPIO_Pin_Number = LCD_EN;
 800020e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000212:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CTRL, &LCD_Pin_Config);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4619      	mov	r1, r3
 8000218:	4814      	ldr	r0, [pc, #80]	; (800026c <LCD_INIT+0xfc>)
 800021a:	f000 fb8b 	bl	8000934 <MCAL_GPIO_Init>

	//RS=0 >>> command register
	//RW=0 >>> Write
	//EN=0 >>> disabled
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RS, LCD_Pin_Reset);
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <LCD_INIT+0xfc>)
 8000226:	f000 fbf5 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RW, LCD_Pin_Reset);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000230:	480e      	ldr	r0, [pc, #56]	; (800026c <LCD_INIT+0xfc>)
 8000232:	f000 fbef 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_EN, LCD_Pin_Reset);
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <LCD_INIT+0xfc>)
 800023e:	f000 fbe9 	bl	8000a14 <MCAL_GPIO_Write_Pin>

	//time delay to wait the LCD after power on
	my_wait(2);
 8000242:	2002      	movs	r0, #2
 8000244:	f000 fc16 	bl	8000a74 <my_wait>
	// clear the screen
	LCD_Clear_Screen();
 8000248:	f000 f887 	bl	800035a <LCD_Clear_Screen>

	//choose the mode
#ifdef LCD_EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800024c:	2038      	movs	r0, #56	; 0x38
 800024e:	f000 f80f 	bl	8000270 <LCD_WRITE_COMMAND>
#ifdef LCD_FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000252:	2006      	movs	r0, #6
 8000254:	f000 f80c 	bl	8000270 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000258:	2080      	movs	r0, #128	; 0x80
 800025a:	f000 f809 	bl	8000270 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800025e:	200f      	movs	r0, #15
 8000260:	f000 f806 	bl	8000270 <LCD_WRITE_COMMAND>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010800 	.word	0x40010800

08000270 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
//LCD_Check_Is_Busy();

#ifdef LCD_EIGHT_BIT_MODE
	MCAL_GPIO_Write_Port(LCD_PORT, command);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	b29b      	uxth	r3, r3
 800027e:	4619      	mov	r1, r3
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <LCD_WRITE_COMMAND+0x3c>)
 8000282:	f000 fbe9 	bl	8000a58 <MCAL_GPIO_Write_Port>
	//LCD_Port is the same port of LCD_CTRL so we need to set the LCD_CTRL values after writing over the port
	//RS = 0 >>> command register
	//RW = 0 >>> write
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RS, LCD_Pin_Reset);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <LCD_WRITE_COMMAND+0x3c>)
 800028e:	f000 fbc1 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RW, LCD_Pin_Reset);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <LCD_WRITE_COMMAND+0x3c>)
 800029a:	f000 fbbb 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	LCD_kick();
 800029e:	f000 f883 	bl	80003a8 <LCD_kick>
	MCAL_GPIO_Write_Port(LCD_PORT, nibble << LCD_DATA_shift);
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RS, LCD_Pin_Reset);
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RW, LCD_Pin_Reset);
	LCD_kick();
#endif
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40010800 	.word	0x40010800

080002b0 <LCD_WRITE_CHAR>:


void LCD_WRITE_CHAR(unsigned char character)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	{
	//LCD_Check_Is_Busy();

	#ifdef LCD_EIGHT_BIT_MODE
		MCAL_GPIO_Write_Port(LCD_PORT, character);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	4619      	mov	r1, r3
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LCD_WRITE_CHAR+0x40>)
 80002c2:	f000 fbc9 	bl	8000a58 <MCAL_GPIO_Write_Port>
		//LCD_Port is the same port of LCD_CTRL so we need to set the LCD_CTRL values after writing over the port
		//RS = 1 >>> Data register
		//RW = 0 >>> write
		MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RS, LCD_Pin_Set);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <LCD_WRITE_CHAR+0x40>)
 80002ce:	f000 fba1 	bl	8000a14 <MCAL_GPIO_Write_Pin>
		MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RW, LCD_Pin_Reset);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <LCD_WRITE_CHAR+0x40>)
 80002da:	f000 fb9b 	bl	8000a14 <MCAL_GPIO_Write_Pin>
		LCD_kick();
 80002de:	f000 f863 	bl	80003a8 <LCD_kick>
		MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RS, LCD_Pin_Set);
		MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_RW, LCD_Pin_Reset);
		LCD_kick();
	#endif
	}
	my_wait(1); //to write slowly
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fbc6 	bl	8000a74 <my_wait>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010800 	.word	0x40010800

080002f4 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	uint8_t i, cnt;
	for(i=cnt=0; string[i] > 0; ++i )
 80002fc:	2300      	movs	r3, #0
 80002fe:	73bb      	strb	r3, [r7, #14]
 8000300:	7bbb      	ldrb	r3, [r7, #14]
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e01f      	b.n	8000346 <LCD_WRITE_STRING+0x52>
	{
		LCD_WRITE_CHAR(string[i]);
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	4413      	add	r3, r2
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffce 	bl	80002b0 <LCD_WRITE_CHAR>
		cnt++;
 8000314:	7bbb      	ldrb	r3, [r7, #14]
 8000316:	3301      	adds	r3, #1
 8000318:	73bb      	strb	r3, [r7, #14]
		switch(cnt)
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	2b10      	cmp	r3, #16
 800031e:	d002      	beq.n	8000326 <LCD_WRITE_STRING+0x32>
 8000320:	2b20      	cmp	r3, #32
 8000322:	d005      	beq.n	8000330 <LCD_WRITE_STRING+0x3c>
 8000324:	e00c      	b.n	8000340 <LCD_WRITE_STRING+0x4c>
		{

		case 16:
			LCD_GOTO_XY(2,0);
 8000326:	2100      	movs	r1, #0
 8000328:	2002      	movs	r0, #2
 800032a:	f000 f81d 	bl	8000368 <LCD_GOTO_XY>
			break;
 800032e:	e007      	b.n	8000340 <LCD_WRITE_STRING+0x4c>
		case 32:
			LCD_Clear_Screen();
 8000330:	f000 f813 	bl	800035a <LCD_Clear_Screen>
			LCD_GOTO_XY(1,0);
 8000334:	2100      	movs	r1, #0
 8000336:	2001      	movs	r0, #1
 8000338:	f000 f816 	bl	8000368 <LCD_GOTO_XY>
			cnt = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	73bb      	strb	r3, [r7, #14]
	for(i=cnt=0; string[i] > 0; ++i )
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	3301      	adds	r3, #1
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1d9      	bne.n	8000306 <LCD_WRITE_STRING+0x12>
		}
	}
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(0x01);
 800035e:	2001      	movs	r0, #1
 8000360:	f7ff ff86 	bl	8000270 <LCD_WRITE_COMMAND>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}

08000368 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	460a      	mov	r2, r1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
	if(position >= 0)
	{
		switch(line)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d002      	beq.n	8000384 <LCD_GOTO_XY+0x1c>
 800037e:	2b02      	cmp	r3, #2
 8000380:	d008      	beq.n	8000394 <LCD_GOTO_XY+0x2c>
			break;
		case 2:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 8000382:	e00d      	b.n	80003a0 <LCD_GOTO_XY+0x38>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	3b80      	subs	r3, #128	; 0x80
 8000388:	b2db      	uxtb	r3, r3
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff70 	bl	8000270 <LCD_WRITE_COMMAND>
			break;
 8000390:	bf00      	nop
}
 8000392:	e005      	b.n	80003a0 <LCD_GOTO_XY+0x38>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	3b40      	subs	r3, #64	; 0x40
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff68 	bl	8000270 <LCD_WRITE_COMMAND>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <LCD_kick>:
//--------------------------------------------------------
// static functions implementation
//--------------------------------------------------------

static void LCD_kick(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_EN, LCD_Pin_Set);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b2:	4808      	ldr	r0, [pc, #32]	; (80003d4 <LCD_kick+0x2c>)
 80003b4:	f000 fb2e 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	my_wait(100); // enable pulse duration
 80003b8:	2064      	movs	r0, #100	; 0x64
 80003ba:	f000 fb5b 	bl	8000a74 <my_wait>
	MCAL_GPIO_Write_Pin(LCD_CTRL, LCD_EN, LCD_Pin_Reset);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <LCD_kick+0x2c>)
 80003c6:	f000 fb25 	bl	8000a14 <MCAL_GPIO_Write_Pin>
	my_wait(100); //wait for the LCD execution time
 80003ca:	2064      	movs	r0, #100	; 0x64
 80003cc:	f000 fb52 	bl	8000a74 <my_wait>
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40010800 	.word	0x40010800

080003d8 <NVIC_IRQ_Enable>:
//----------------------------------------------------------------
//EXTI driver static functions
//----------------------------------------------------------------

static void NVIC_IRQ_Enable(uint8_t NVIC_IRQ_Number)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	if(NVIC_IRQ_Number < 31)
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b1e      	cmp	r3, #30
 80003e6:	d80a      	bhi.n	80003fe <NVIC_IRQ_Enable+0x26>
	{ NVIC_ISER0 |= 1<<NVIC_IRQ_Number; }
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <NVIC_IRQ_Enable+0x54>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	79fa      	ldrb	r2, [r7, #7]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	4611      	mov	r1, r2
 80003f6:	4a0d      	ldr	r2, [pc, #52]	; (800042c <NVIC_IRQ_Enable+0x54>)
 80003f8:	430b      	orrs	r3, r1
 80003fa:	6013      	str	r3, [r2, #0]

	else if(NVIC_IRQ_Number > 31 && NVIC_IRQ_Number <64)
	{ NVIC_ISER1 |= 1 << (NVIC_IRQ_Number-32); }
}
 80003fc:	e010      	b.n	8000420 <NVIC_IRQ_Enable+0x48>
	else if(NVIC_IRQ_Number > 31 && NVIC_IRQ_Number <64)
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b1f      	cmp	r3, #31
 8000402:	d90d      	bls.n	8000420 <NVIC_IRQ_Enable+0x48>
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	2b3f      	cmp	r3, #63	; 0x3f
 8000408:	d80a      	bhi.n	8000420 <NVIC_IRQ_Enable+0x48>
	{ NVIC_ISER1 |= 1 << (NVIC_IRQ_Number-32); }
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <NVIC_IRQ_Enable+0x58>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	79fa      	ldrb	r2, [r7, #7]
 8000410:	3a20      	subs	r2, #32
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	4611      	mov	r1, r2
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <NVIC_IRQ_Enable+0x58>)
 800041c:	430b      	orrs	r3, r1
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000e100 	.word	0xe000e100
 8000430:	e000e104 	.word	0xe000e104

08000434 <NVIC_IRQ_Disable>:
static void NVIC_IRQ_Disable(uint8_t NVIC_IRQ_Number)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
	if(NVIC_IRQ_Number < 31)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b1e      	cmp	r3, #30
 8000442:	d80a      	bhi.n	800045a <NVIC_IRQ_Disable+0x26>
	{ NVIC_ICER0 |= 1<<NVIC_IRQ_Number; }
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <NVIC_IRQ_Disable+0x54>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	4611      	mov	r1, r2
 8000452:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <NVIC_IRQ_Disable+0x54>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6013      	str	r3, [r2, #0]

	else if(NVIC_IRQ_Number > 31 && NVIC_IRQ_Number <64)
	{ NVIC_ICER1 |= 1 << (NVIC_IRQ_Number-32); }
}
 8000458:	e010      	b.n	800047c <NVIC_IRQ_Disable+0x48>
	else if(NVIC_IRQ_Number > 31 && NVIC_IRQ_Number <64)
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b1f      	cmp	r3, #31
 800045e:	d90d      	bls.n	800047c <NVIC_IRQ_Disable+0x48>
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b3f      	cmp	r3, #63	; 0x3f
 8000464:	d80a      	bhi.n	800047c <NVIC_IRQ_Disable+0x48>
	{ NVIC_ICER1 |= 1 << (NVIC_IRQ_Number-32); }
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <NVIC_IRQ_Disable+0x58>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	79fa      	ldrb	r2, [r7, #7]
 800046c:	3a20      	subs	r2, #32
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a05      	ldr	r2, [pc, #20]	; (800048c <NVIC_IRQ_Disable+0x58>)
 8000478:	430b      	orrs	r3, r1
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000e180 	.word	0xe000e180
 800048c:	e000e184 	.word	0xe000e184

08000490 <Update_EXTI>:

static void Update_EXTI(EXTI_Pin_Configuration_t* EXTI_Config)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	//1-update the GPIO configuration pin as AF input >>> floating input
	GPIO_Pin_Configuration_t Pin_Config;
	Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_Input;
 8000498:	2308      	movs	r3, #8
 800049a:	72bb      	strb	r3, [r7, #10]
	Pin_Config.GPIO_Pin_Number = EXTI_Config->EXTI_Pin.GPIO_Pin;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	891b      	ldrh	r3, [r3, #8]
 80004a0:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIO_Port,&Pin_Config);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	f107 0208 	add.w	r2, r7, #8
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fa41 	bl	8000934 <MCAL_GPIO_Init>

	//2-update the AFIO configuration to select which port(A,B,C,D) is connected to the EXTI line
	uint8_t	AFIO_EXTICR_Index = EXTI_Config->EXTI_Pin.EXTI_line_Number / 4;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	73fb      	strb	r3, [r7, #15]
	uint8_t	AFIO_EXTICR_Config_position = (EXTI_Config->EXTI_Pin.EXTI_line_Number % 4)*4;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	f003 0303 	and.w	r3, r3, #3
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	73bb      	strb	r3, [r7, #14]

	//clear and set the four bits of responsible for mapping the GPIO to the EXTI in
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Config_position);
 80004c8:	4a5c      	ldr	r2, [pc, #368]	; (800063c <Update_EXTI+0x1ac>)
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	3302      	adds	r3, #2
 80004ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	210f      	movs	r1, #15
 80004d6:	fa01 f303 	lsl.w	r3, r1, r3
 80004da:	43db      	mvns	r3, r3
 80004dc:	4618      	mov	r0, r3
 80004de:	4957      	ldr	r1, [pc, #348]	; (800063c <Update_EXTI+0x1ac>)
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	4002      	ands	r2, r0
 80004e4:	3302      	adds	r3, #2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= (AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIO_Port) << AFIO_EXTICR_Config_position);
 80004ea:	4a54      	ldr	r2, [pc, #336]	; (800063c <Update_EXTI+0x1ac>)
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	3302      	adds	r3, #2
 80004f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4951      	ldr	r1, [pc, #324]	; (8000640 <Update_EXTI+0x1b0>)
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d00f      	beq.n	800051e <Update_EXTI+0x8e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	4950      	ldr	r1, [pc, #320]	; (8000644 <Update_EXTI+0x1b4>)
 8000504:	428b      	cmp	r3, r1
 8000506:	d008      	beq.n	800051a <Update_EXTI+0x8a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	494e      	ldr	r1, [pc, #312]	; (8000648 <Update_EXTI+0x1b8>)
 800050e:	428b      	cmp	r3, r1
 8000510:	d101      	bne.n	8000516 <Update_EXTI+0x86>
 8000512:	2302      	movs	r3, #2
 8000514:	e004      	b.n	8000520 <Update_EXTI+0x90>
 8000516:	2303      	movs	r3, #3
 8000518:	e002      	b.n	8000520 <Update_EXTI+0x90>
 800051a:	2301      	movs	r3, #1
 800051c:	e000      	b.n	8000520 <Update_EXTI+0x90>
 800051e:	2300      	movs	r3, #0
 8000520:	7bb9      	ldrb	r1, [r7, #14]
 8000522:	408b      	lsls	r3, r1
 8000524:	4618      	mov	r0, r3
 8000526:	4945      	ldr	r1, [pc, #276]	; (800063c <Update_EXTI+0x1ac>)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	4302      	orrs	r2, r0
 800052c:	3302      	adds	r3, #2
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3-update the EXTI trigger condition
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 8000532:	4b46      	ldr	r3, [pc, #280]	; (800064c <Update_EXTI+0x1bc>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	43d2      	mvns	r2, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a41      	ldr	r2, [pc, #260]	; (800064c <Update_EXTI+0x1bc>)
 8000546:	400b      	ands	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <Update_EXTI+0x1bc>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	43d2      	mvns	r2, r2
 800055a:	4611      	mov	r1, r2
 800055c:	4a3b      	ldr	r2, [pc, #236]	; (800064c <Update_EXTI+0x1bc>)
 800055e:	400b      	ands	r3, r1
 8000560:	6093      	str	r3, [r2, #8]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7b1b      	ldrb	r3, [r3, #12]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10b      	bne.n	8000582 <Update_EXTI+0xf2>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <Update_EXTI+0x1bc>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a34      	ldr	r2, [pc, #208]	; (800064c <Update_EXTI+0x1bc>)
 800057c:	430b      	orrs	r3, r1
 800057e:	60d3      	str	r3, [r2, #12]
 8000580:	e029      	b.n	80005d6 <Update_EXTI+0x146>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7b1b      	ldrb	r3, [r3, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10b      	bne.n	80005a2 <Update_EXTI+0x112>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <Update_EXTI+0x1bc>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7812      	ldrb	r2, [r2, #0]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	4611      	mov	r1, r2
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <Update_EXTI+0x1bc>)
 800059c:	430b      	orrs	r3, r1
 800059e:	6093      	str	r3, [r2, #8]
 80005a0:	e019      	b.n	80005d6 <Update_EXTI+0x146>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising_and_Falling)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7b1b      	ldrb	r3, [r3, #12]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d115      	bne.n	80005d6 <Update_EXTI+0x146>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <Update_EXTI+0x1bc>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <Update_EXTI+0x1bc>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <Update_EXTI+0x1bc>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7812      	ldrb	r2, [r2, #0]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a1e      	ldr	r2, [pc, #120]	; (800064c <Update_EXTI+0x1bc>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6093      	str	r3, [r2, #8]
	}

	//update the IRQ Handling call back function
	GP_IRQ_Callback[EXTI_Config->EXTI_Pin.EXTI_line_Number] = EXTI_Config->P_IRQ_Callback;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <Update_EXTI+0x1c0>)
 80005e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable/Disable the IRQ Mask in the EXTI and NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7b5b      	ldrb	r3, [r3, #13]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d110      	bne.n	8000610 <Update_EXTI+0x180>
	{
		EXTI->IMR |= 1 << EXTI_Config->EXTI_Pin.EXTI_line_Number;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <Update_EXTI+0x1bc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <Update_EXTI+0x1bc>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6013      	str	r3, [r2, #0]
		NVIC_IRQ_Enable(EXTI_Config->EXTI_Pin.IVT_IRQ_Number);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a9b      	ldrb	r3, [r3, #10]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fee5 	bl	80003d8 <NVIC_IRQ_Enable>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
		NVIC_IRQ_Disable(EXTI_Config->EXTI_Pin.IVT_IRQ_Number);
	}

}
 800060e:	e010      	b.n	8000632 <Update_EXTI+0x1a2>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_line_Number);
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <Update_EXTI+0x1bc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <Update_EXTI+0x1bc>)
 8000624:	400b      	ands	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
		NVIC_IRQ_Disable(EXTI_Config->EXTI_Pin.IVT_IRQ_Number);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a9b      	ldrb	r3, [r3, #10]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff01 	bl	8000434 <NVIC_IRQ_Disable>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010000 	.word	0x40010000
 8000640:	40010800 	.word	0x40010800
 8000644:	40010c00 	.word	0x40010c00
 8000648:	40011000 	.word	0x40011000
 800064c:	40010400 	.word	0x40010400
 8000650:	2000001c 	.word	0x2000001c

08000654 <MCAL_EXTI_GPIO_Init>:
 * @Note:		STM32F103c6 has GPIO A,B,C,D,E modules
 * 				but LQFP48 package has A,B and part of C,D as exported pins
 * 				it's mandatory to enable the corresponding GPIO, AFIO clocks
 * */
void MCAL_EXTI_GPIO_Init(EXTI_Pin_Configuration_t* EXTI_Config)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff17 	bl	8000490 <Update_EXTI>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <EXTI0_IRQHandler>:
//----------------------------------------------------------------
//EXTI ISR functions
//----------------------------------------------------------------

void EXTI0_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<0;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI0_IRQHandler+0x1c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI0_IRQHandler+0x1c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[0]();
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <EXTI0_IRQHandler+0x20>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4798      	blx	r3
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	2000001c 	.word	0x2000001c

08000690 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<1;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI1_IRQHandler+0x1c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI1_IRQHandler+0x1c>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[1]();
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <EXTI1_IRQHandler+0x20>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4798      	blx	r3
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010400 	.word	0x40010400
 80006b0:	2000001c 	.word	0x2000001c

080006b4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<2;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <EXTI2_IRQHandler+0x1c>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <EXTI2_IRQHandler+0x1c>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[2]();
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <EXTI2_IRQHandler+0x20>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	4798      	blx	r3
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010400 	.word	0x40010400
 80006d4:	2000001c 	.word	0x2000001c

080006d8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<3;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <EXTI3_IRQHandler+0x1c>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <EXTI3_IRQHandler+0x1c>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[3]();
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <EXTI3_IRQHandler+0x20>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4798      	blx	r3
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010400 	.word	0x40010400
 80006f8:	2000001c 	.word	0x2000001c

080006fc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<4;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <EXTI4_IRQHandler+0x1c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <EXTI4_IRQHandler+0x1c>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[4]();
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <EXTI4_IRQHandler+0x20>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	4798      	blx	r3
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010400 	.word	0x40010400
 800071c:	2000001c 	.word	0x2000001c

08000720 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	//go to the call back function in APP layer
	if(EXTI->PR & (1<<5) ) {	EXTI->PR |= 1<<5 ;GP_IRQ_Callback[5]();		}
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	2b00      	cmp	r3, #0
 800072e:	d008      	beq.n	8000742 <EXTI9_5_IRQHandler+0x22>
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	6153      	str	r3, [r2, #20]
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <EXTI9_5_IRQHandler+0xa4>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	4798      	blx	r3
	if(EXTI->PR & (1<<6) ) {	EXTI->PR |= 1<<6 ;GP_IRQ_Callback[6](); 	}
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <EXTI9_5_IRQHandler+0x40>
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <EXTI9_5_IRQHandler+0xa4>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4798      	blx	r3
	if(EXTI->PR & (1<<7) ) {	EXTI->PR |= 1<<7 ;GP_IRQ_Callback[7](); 	}
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <EXTI9_5_IRQHandler+0x5e>
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000776:	6153      	str	r3, [r2, #20]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <EXTI9_5_IRQHandler+0xa4>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	4798      	blx	r3
	if(EXTI->PR & (1<<8) ) { 	EXTI->PR |= 1<<8 ;GP_IRQ_Callback[8](); 	}
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000786:	2b00      	cmp	r3, #0
 8000788:	d008      	beq.n	800079c <EXTI9_5_IRQHandler+0x7c>
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 8000790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <EXTI9_5_IRQHandler+0xa4>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4798      	blx	r3
	if(EXTI->PR & (1<<9) ) { 	EXTI->PR |= 1<<9 ;GP_IRQ_Callback[9](); 	}
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <EXTI9_5_IRQHandler+0x9a>
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <EXTI9_5_IRQHandler+0xa0>)
 80007ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b2:	6153      	str	r3, [r2, #20]
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <EXTI9_5_IRQHandler+0xa4>)
 80007b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b8:	4798      	blx	r3
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40010400 	.word	0x40010400
 80007c4:	2000001c 	.word	0x2000001c

080007c8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10) )	{ 	EXTI->PR |= 1<<10 ;GP_IRQ_Callback[10]();	}
 80007cc:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <EXTI15_10_IRQHandler+0x22>
 80007d8:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a29      	ldr	r2, [pc, #164]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e2:	6153      	str	r3, [r2, #20]
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	4798      	blx	r3
	if(EXTI->PR & (1<<11) ) { 	EXTI->PR |= 1<<11 ;GP_IRQ_Callback[11]();	}
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <EXTI15_10_IRQHandler+0x40>
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 80007fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	4798      	blx	r3
	if(EXTI->PR & (1<<12) ) {	EXTI->PR |= 1<<12 ;GP_IRQ_Callback[12](); 	}
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <EXTI15_10_IRQHandler+0x5e>
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 800081a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081e:	6153      	str	r3, [r2, #20]
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4798      	blx	r3
	if(EXTI->PR & (1<<13) ) {	EXTI->PR |= 1<<13 ;GP_IRQ_Callback[13](); 	}
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <EXTI15_10_IRQHandler+0x7c>
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	4798      	blx	r3
	if(EXTI->PR & (1<<14) ) { 	EXTI->PR |= 1<<14 ;GP_IRQ_Callback[14](); 	}
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <EXTI15_10_IRQHandler+0x9a>
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6153      	str	r3, [r2, #20]
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 800085e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000860:	4798      	blx	r3
	if(EXTI->PR & (1<<15) ) { 	EXTI->PR |= 1<<15 ;GP_IRQ_Callback[15](); 	}
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d008      	beq.n	8000880 <EXTI15_10_IRQHandler+0xb8>
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <EXTI15_10_IRQHandler+0xbc>)
 8000874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <EXTI15_10_IRQHandler+0xc0>)
 800087c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800087e:	4798      	blx	r3
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40010400 	.word	0x40010400
 8000888:	2000001c 	.word	0x2000001c

0800088c <GPIO_Get_Config_Position>:
//----------------------------------------------------------------

static uint8_t GPIO_Get_Config_Position(uint16_t Pin_Number);

static uint8_t GPIO_Get_Config_Position(uint16_t Pin_Number)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
	switch(Pin_Number)
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	2b80      	cmp	r3, #128	; 0x80
 800089a:	d042      	beq.n	8000922 <GPIO_Get_Config_Position+0x96>
 800089c:	2b80      	cmp	r3, #128	; 0x80
 800089e:	dc11      	bgt.n	80008c4 <GPIO_Get_Config_Position+0x38>
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d036      	beq.n	8000912 <GPIO_Get_Config_Position+0x86>
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	dc06      	bgt.n	80008b6 <GPIO_Get_Config_Position+0x2a>
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d02e      	beq.n	800090a <GPIO_Get_Config_Position+0x7e>
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d02e      	beq.n	800090e <GPIO_Get_Config_Position+0x82>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d028      	beq.n	8000906 <GPIO_Get_Config_Position+0x7a>
 80008b4:	e037      	b.n	8000926 <GPIO_Get_Config_Position+0x9a>
 80008b6:	2b20      	cmp	r3, #32
 80008b8:	d02f      	beq.n	800091a <GPIO_Get_Config_Position+0x8e>
 80008ba:	2b40      	cmp	r3, #64	; 0x40
 80008bc:	d02f      	beq.n	800091e <GPIO_Get_Config_Position+0x92>
 80008be:	2b10      	cmp	r3, #16
 80008c0:	d029      	beq.n	8000916 <GPIO_Get_Config_Position+0x8a>
 80008c2:	e030      	b.n	8000926 <GPIO_Get_Config_Position+0x9a>
 80008c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c8:	d023      	beq.n	8000912 <GPIO_Get_Config_Position+0x86>
 80008ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ce:	dc09      	bgt.n	80008e4 <GPIO_Get_Config_Position+0x58>
 80008d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d4:	d019      	beq.n	800090a <GPIO_Get_Config_Position+0x7e>
 80008d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008da:	d018      	beq.n	800090e <GPIO_Get_Config_Position+0x82>
 80008dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e0:	d011      	beq.n	8000906 <GPIO_Get_Config_Position+0x7a>
 80008e2:	e020      	b.n	8000926 <GPIO_Get_Config_Position+0x9a>
 80008e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e8:	d017      	beq.n	800091a <GPIO_Get_Config_Position+0x8e>
 80008ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ee:	dc03      	bgt.n	80008f8 <GPIO_Get_Config_Position+0x6c>
 80008f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008f4:	d00f      	beq.n	8000916 <GPIO_Get_Config_Position+0x8a>
 80008f6:	e016      	b.n	8000926 <GPIO_Get_Config_Position+0x9a>
 80008f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008fc:	d00f      	beq.n	800091e <GPIO_Get_Config_Position+0x92>
 80008fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000902:	d00e      	beq.n	8000922 <GPIO_Get_Config_Position+0x96>
 8000904:	e00f      	b.n	8000926 <GPIO_Get_Config_Position+0x9a>
	{
	case (GPIO_Pin0):
	case (GPIO_Pin8):
		return 0;
 8000906:	2300      	movs	r3, #0
 8000908:	e00e      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin1):
	case (GPIO_Pin9):
		return 4;
 800090a:	2304      	movs	r3, #4
 800090c:	e00c      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin2):
	case (GPIO_Pin10):
		return 8;
 800090e:	2308      	movs	r3, #8
 8000910:	e00a      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin3):
	case (GPIO_Pin11):
		return 12;
 8000912:	230c      	movs	r3, #12
 8000914:	e008      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin4):
	case (GPIO_Pin12):
		return 16;
 8000916:	2310      	movs	r3, #16
 8000918:	e006      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin5):
	case (GPIO_Pin13):
		return 20;
 800091a:	2314      	movs	r3, #20
 800091c:	e004      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin6):
	case (GPIO_Pin14):
		return 24;
 800091e:	2318      	movs	r3, #24
 8000920:	e002      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin7):
	case (GPIO_Pin15):
		return 28;
 8000922:	231c      	movs	r3, #28
 8000924:	e000      	b.n	8000928 <GPIO_Get_Config_Position+0x9c>
	}
	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
	...

08000934 <MCAL_GPIO_Init>:


//Init/Deinit API

void MCAL_GPIO_Init(volatile GPIO_typedef *GPIOX, GPIO_Pin_Configuration_t *Pin_Configuration)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	uint32_t *Config_Register = NULL;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]

	// specify which register from CRL and CRH is responsible to configure the pin according to pin number
	Config_Register= (Pin_Configuration->GPIO_Pin_Number < GPIO_Pin8) ? (&(GPIOX->CRL)) : (&(GPIOX->CRH)) ;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d801      	bhi.n	800094e <MCAL_GPIO_Init+0x1a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	e001      	b.n	8000952 <MCAL_GPIO_Init+0x1e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3304      	adds	r3, #4
 8000952:	613b      	str	r3, [r7, #16]

	//get the pin configuration position in the Config_Register
	uint8_t Config_Position = GPIO_Get_Config_Position(Pin_Configuration->GPIO_Pin_Number);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff97 	bl	800088c <GPIO_Get_Config_Position>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]

	//clear the pin configuration position in the config_register (Pin is temporary Input Analog)
	*Config_Register &= ~(0xF << Config_Position);
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	7bfa      	ldrb	r2, [r7, #15]
 8000968:	210f      	movs	r1, #15
 800096a:	fa01 f202 	lsl.w	r2, r1, r2
 800096e:	43d2      	mvns	r2, r2
 8000970:	401a      	ands	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

	uint8_t config_value; //value that will be written to the pin configuration position in the config_register


	switch(Pin_Configuration->GPIO_Pin_Mode)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b08      	cmp	r3, #8
 800097c:	d83d      	bhi.n	80009fa <MCAL_GPIO_Init+0xc6>
 800097e:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <MCAL_GPIO_Init+0x50>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	080009a9 	.word	0x080009a9
 8000988:	080009a9 	.word	0x080009a9
 800098c:	080009b3 	.word	0x080009b3
 8000990:	080009c7 	.word	0x080009c7
 8000994:	080009e3 	.word	0x080009e3
 8000998:	080009e3 	.word	0x080009e3
 800099c:	080009e3 	.word	0x080009e3
 80009a0:	080009e3 	.word	0x080009e3
 80009a4:	080009dd 	.word	0x080009dd
	{
	// pin is input floating or Analog or with pull up resistance (same for AF input floating or analog or pull up resistance according to the TRM)
	case (GPIO_Mode_Input_FLO):
	case (GPIO_Mode_Input_Analog):
		config_value = (Pin_Configuration->GPIO_Pin_Mode <<2);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	789b      	ldrb	r3, [r3, #2]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	75fb      	strb	r3, [r7, #23]
		break;
 80009b0:	e023      	b.n	80009fa <MCAL_GPIO_Init+0xc6>

	// pin is input with pull up or pull down resistance (same for AF input with pull up resistance according to the TRM)
	//same config_value of input with pull down resistance the difference is the GPIOX_ODR bit value to choose between pull up/down resistance
	case (GPIO_Mode_Input_PU):
		config_value = (GPIO_Mode_Input_PU <<2);
 80009b2:	2308      	movs	r3, #8
 80009b4:	75fb      	strb	r3, [r7, #23]
		GPIOX->ODR |= (Pin_Configuration->GPIO_Pin_Number); //set PXODR to 1 to activate select pull up resistance
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	8812      	ldrh	r2, [r2, #0]
 80009be:	431a      	orrs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60da      	str	r2, [r3, #12]
		break;
 80009c4:	e019      	b.n	80009fa <MCAL_GPIO_Init+0xc6>

	// pin is input with pull down resistance (same for AF input with pull down resistance according to the TRM)
	//same config_value of input with pull up resistance the difference is the GPIOX_ODR bit value to choose between pull up/down resistance
	case (GPIO_Mode_Input_PD):
		config_value = (GPIO_Mode_Input_PU <<2);
 80009c6:	2308      	movs	r3, #8
 80009c8:	75fb      	strb	r3, [r7, #23]
		GPIOX->ODR &= ~(Pin_Configuration->GPIO_Pin_Number); //set PXODR to 0 to select pull down resistance
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	43d2      	mvns	r2, r2
 80009d4:	401a      	ands	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
		break;
 80009da:	e00e      	b.n	80009fa <MCAL_GPIO_Init+0xc6>

	//pin is Alternative function input this option is considered as input floating in this driver
	case (GPIO_Mode_AF_Input):
		config_value = (GPIO_Mode_Input_FLO <<2);
 80009dc:	2304      	movs	r3, #4
 80009de:	75fb      	strb	r3, [r7, #23]
		break;
 80009e0:	e00b      	b.n	80009fa <MCAL_GPIO_Init+0xc6>
	//pin is (output/Alternative function output) open drain or push pull
	case (GPIO_Mode_Output_OD):
	case (GPIO_Mode_Output_PP):
	case (GPIO_Mode_AF_OD):
	case (GPIO_Mode_AF_PP):
		config_value = ((Pin_Configuration->GPIO_Pin_Output_Speed) | ((Pin_Configuration->GPIO_Pin_Mode-4) <<2));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	78db      	ldrb	r3, [r3, #3]
 80009e6:	b25a      	sxtb	r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	789b      	ldrb	r3, [r3, #2]
 80009ec:	3b04      	subs	r3, #4
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	75fb      	strb	r3, [r7, #23]
		break;
 80009f8:	bf00      	nop
	}

	*Config_Register |= (config_value << Config_Position);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	7df9      	ldrb	r1, [r7, #23]
 8000a00:	7bfa      	ldrb	r2, [r7, #15]
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	431a      	orrs	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MCAL_GPIO_Write_Pin>:
		}
	return pin_status;
}

void MCAL_GPIO_Write_Pin(volatile GPIO_typedef *GPIOX, uint16_t Pin_Number, uint8_t Pin_Value)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
 8000a20:	4613      	mov	r3, r2
 8000a22:	707b      	strb	r3, [r7, #1]
	switch(Pin_Value)
 8000a24:	787b      	ldrb	r3, [r7, #1]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d009      	beq.n	8000a3e <MCAL_GPIO_Write_Pin+0x2a>
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d000      	beq.n	8000a30 <MCAL_GPIO_Write_Pin+0x1c>
		break;
	case (GPIO_Pin_Reset):
		GPIOX->ODR &= ~(Pin_Number);
		break;
	}
}
 8000a2e:	e00e      	b.n	8000a4e <MCAL_GPIO_Write_Pin+0x3a>
		GPIOX->ODR |= Pin_Number;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	60da      	str	r2, [r3, #12]
		break;
 8000a3c:	e007      	b.n	8000a4e <MCAL_GPIO_Write_Pin+0x3a>
		GPIOX->ODR &= ~(Pin_Number);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	887a      	ldrh	r2, [r7, #2]
 8000a44:	43d2      	mvns	r2, r2
 8000a46:	401a      	ands	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	60da      	str	r2, [r3, #12]
		break;
 8000a4c:	bf00      	nop
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <MCAL_GPIO_Write_Port>:
{
	return (uint16_t)GPIOX->IDR;
}

void MCAL_GPIO_Write_Port(volatile GPIO_typedef *GPIOX, uint16_t Value)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = (uint32_t) Value;
 8000a64:	887a      	ldrh	r2, [r7, #2]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60da      	str	r2, [r3, #12]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <my_wait>:
#include "Keypad.h"

uint8_t EXTI9_Flag = 0;

void my_wait(int x)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	for( int i=0; i < x; ++i)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e00b      	b.n	8000a9a <my_wait+0x26>
		for(int j=0; j < 255; ++j);
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	e002      	b.n	8000a8e <my_wait+0x1a>
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2bfe      	cmp	r3, #254	; 0xfe
 8000a92:	ddf9      	ble.n	8000a88 <my_wait+0x14>
	for( int i=0; i < x; ++i)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbef      	blt.n	8000a82 <my_wait+0xe>
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <clock_init>:

void clock_init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	// Bit 2 IOPAEN: I/O port A clock enable
	// 1:I/O port A clock enabled
	RCC_GPIOA_Clock_Enable();
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <clock_init+0x30>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <clock_init+0x30>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]

	// Bit 3 IOPBEN: I/O port B clock enable
	// 1:I/O port B clock enabled
	RCC_GPIOB_Clock_Enable();
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <clock_init+0x30>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <clock_init+0x30>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]

	//AFIO clock enable
	RCC_AFIO_Clock_Enable();
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <clock_init+0x30>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a03      	ldr	r2, [pc, #12]	; (8000adc <clock_init+0x30>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6193      	str	r3, [r2, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000

08000ae0 <EXTI_IRQ_Callback>:


void EXTI_IRQ_Callback (void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	LCD_WRITE_STRING("ITQ EXTI9 is happened _|-");
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <EXTI_IRQ_Callback+0x1c>)
 8000ae6:	f7ff fc05 	bl	80002f4 <LCD_WRITE_STRING>
	my_wait(1000);
 8000aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aee:	f7ff ffc1 	bl	8000a74 <my_wait>
	LCD_Clear_Screen();
 8000af2:	f7ff fc32 	bl	800035a <LCD_Clear_Screen>

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08000bec 	.word	0x08000bec

08000b00 <main>:

int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
	clock_init();
 8000b06:	f7ff ffd1 	bl	8000aac <clock_init>
	LCD_INIT();
 8000b0a:	f7ff fb31 	bl	8000170 <LCD_INIT>
	EXTI_Pin_Configuration_t EXTI_Pin_Config;

	EXTI_Pin_Config.EXTI_Pin = EXTI9_PB9;
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <main+0x30>)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Pin_Config.IRQ_EN = EXTI_IRQ_Enable;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	747b      	strb	r3, [r7, #17]
	EXTI_Pin_Config.Trigger_Case = EXTI_Trigger_Rising;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	743b      	strb	r3, [r7, #16]
	EXTI_Pin_Config.P_IRQ_Callback = EXTI_IRQ_Callback;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <main+0x34>)
 8000b22:	617b      	str	r3, [r7, #20]

	MCAL_EXTI_GPIO_Init(&EXTI_Pin_Config);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd94 	bl	8000654 <MCAL_EXTI_GPIO_Init>
	while(1)
 8000b2c:	e7fe      	b.n	8000b2c <main+0x2c>
 8000b2e:	bf00      	nop
 8000b30:	08000c08 	.word	0x08000c08
 8000b34:	08000ae1 	.word	0x08000ae1

08000b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b66:	f000 f811 	bl	8000b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff ffc9 	bl	8000b00 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b7c:	08000c1c 	.word	0x08000c1c
  ldr r2, =_sbss
 8000b80:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b84:	2000005c 	.word	0x2000005c

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <__libc_init_array>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	2500      	movs	r5, #0
 8000b90:	4e0c      	ldr	r6, [pc, #48]	; (8000bc4 <__libc_init_array+0x38>)
 8000b92:	4c0d      	ldr	r4, [pc, #52]	; (8000bc8 <__libc_init_array+0x3c>)
 8000b94:	1ba4      	subs	r4, r4, r6
 8000b96:	10a4      	asrs	r4, r4, #2
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	d109      	bne.n	8000bb0 <__libc_init_array+0x24>
 8000b9c:	f000 f81a 	bl	8000bd4 <_init>
 8000ba0:	2500      	movs	r5, #0
 8000ba2:	4e0a      	ldr	r6, [pc, #40]	; (8000bcc <__libc_init_array+0x40>)
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <__libc_init_array+0x44>)
 8000ba6:	1ba4      	subs	r4, r4, r6
 8000ba8:	10a4      	asrs	r4, r4, #2
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d105      	bne.n	8000bba <__libc_init_array+0x2e>
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
 8000bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bb4:	4798      	blx	r3
 8000bb6:	3501      	adds	r5, #1
 8000bb8:	e7ee      	b.n	8000b98 <__libc_init_array+0xc>
 8000bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bbe:	4798      	blx	r3
 8000bc0:	3501      	adds	r5, #1
 8000bc2:	e7f2      	b.n	8000baa <__libc_init_array+0x1e>
 8000bc4:	08000c14 	.word	0x08000c14
 8000bc8:	08000c14 	.word	0x08000c14
 8000bcc:	08000c14 	.word	0x08000c14
 8000bd0:	08000c18 	.word	0x08000c18

08000bd4 <_init>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	bf00      	nop
 8000bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bda:	bc08      	pop	{r3}
 8000bdc:	469e      	mov	lr, r3
 8000bde:	4770      	bx	lr

08000be0 <_fini>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	bf00      	nop
 8000be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be6:	bc08      	pop	{r3}
 8000be8:	469e      	mov	lr, r3
 8000bea:	4770      	bx	lr
