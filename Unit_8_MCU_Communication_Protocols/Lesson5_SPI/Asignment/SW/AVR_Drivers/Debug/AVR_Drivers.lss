
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0c  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ca  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000614  00000000  00000000  000026b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_13>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Seven_Segment_Write>:

#define MCU_Act_As_Master
//#define MCU_Act_As_Slave

void Seven_Segment_Write(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	uint8_t data1, data2;
	uint8_t received_data;

#ifdef MCU_Act_As_Master

	data2=0;
  96:	d0 e0       	ldi	r29, 0x00	; 0

	data2 = 5;
	
#endif

	for(; data2 < 10; ++data2)
  98:	25 c0       	rjmp	.+74     	; 0xe4 <Seven_Segment_Write+0x52>
	{
		received_data = SPI_Send_Receive(data2);
  9a:	8d 2f       	mov	r24, r29
  9c:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Send_Receive>
		Set_SEG2(received_data);
  a0:	9b b3       	in	r25, 0x1b	; 27
  a2:	9f 70       	andi	r25, 0x0F	; 15
  a4:	9b bb       	out	0x1b, r25	; 27
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	30 e1       	ldi	r19, 0x10	; 16
  aa:	83 9f       	mul	r24, r19
  ac:	c0 01       	movw	r24, r0
  ae:	11 24       	eor	r1, r1
  b0:	82 2b       	or	r24, r18
  b2:	8b bb       	out	0x1b, r24	; 27
		
		for(data1 = 0; data1 < 10; ++data1)
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	13 c0       	rjmp	.+38     	; 0xde <Seven_Segment_Write+0x4c>
		{
			received_data = SPI_Send_Receive(data1);
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 9f 00 	call	0x13e	; 0x13e <SPI_Send_Receive>
			Set_SEG1(received_data);
  be:	9b b3       	in	r25, 0x1b	; 27
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	9b bb       	out	0x1b, r25	; 27
  c4:	9b b3       	in	r25, 0x1b	; 27
  c6:	89 2b       	or	r24, r25
  c8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	99 e6       	ldi	r25, 0x69	; 105
  ce:	28 e1       	ldi	r18, 0x18	; 24
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <Seven_Segment_Write+0x3e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <Seven_Segment_Write+0x48>
  da:	00 00       	nop
	for(; data2 < 10; ++data2)
	{
		received_data = SPI_Send_Receive(data2);
		Set_SEG2(received_data);
		
		for(data1 = 0; data1 < 10; ++data1)
  dc:	cf 5f       	subi	r28, 0xFF	; 255
  de:	ca 30       	cpi	r28, 0x0A	; 10
  e0:	58 f3       	brcs	.-42     	; 0xb8 <Seven_Segment_Write+0x26>

	data2 = 5;
	
#endif

	for(; data2 < 10; ++data2)
  e2:	df 5f       	subi	r29, 0xFF	; 255
  e4:	da 30       	cpi	r29, 0x0A	; 10
  e6:	c8 f2       	brcs	.-78     	; 0x9a <Seven_Segment_Write+0x8>
			Set_SEG1(received_data);
			_delay_ms(1000);
		}
	}
	
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <main>:
int main()
{
	
#ifdef MCU_Act_As_Master
	
	SPI_Master_Init();
  ee:	0e 94 80 00 	call	0x100	; 0x100 <SPI_Master_Init>
	SPI_Slave_Init();
		
#endif
	
	//set portA as output to be connected to two 7 segments
	DDRA = 0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
	
	Seven_Segment_Write();
  f6:	0e 94 49 00 	call	0x92	; 0x92 <Seven_Segment_Write>
	
	return 0;
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret

00000100 <SPI_Master_Init>:
		
	//set SPI mode to Slave
	SPI_Mode_Slave();
		
	//enable the SPI
	Set_Bit(SPCR, SPE);
 100:	87 b3       	in	r24, 0x17	; 23
 102:	80 6b       	ori	r24, 0xB0	; 176
 104:	87 bb       	out	0x17, r24	; 23
 106:	8e b1       	in	r24, 0x0e	; 14
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	8e b9       	out	0x0e, r24	; 14
 10c:	8d b1       	in	r24, 0x0d	; 13
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8d b9       	out	0x0d, r24	; 13
 112:	8d b1       	in	r24, 0x0d	; 13
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	8d b9       	out	0x0d, r24	; 13
 118:	8e b1       	in	r24, 0x0e	; 14
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8e b9       	out	0x0e, r24	; 14
 11e:	8d b1       	in	r24, 0x0d	; 13
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	8d b9       	out	0x0d, r24	; 13
 124:	8d b1       	in	r24, 0x0d	; 13
 126:	81 60       	ori	r24, 0x01	; 1
 128:	8d b9       	out	0x0d, r24	; 13
 12a:	8d b1       	in	r24, 0x0d	; 13
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	8d b9       	out	0x0d, r24	; 13
 130:	8d b1       	in	r24, 0x0d	; 13
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8d b9       	out	0x0d, r24	; 13
 136:	88 b3       	in	r24, 0x18	; 24
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret

0000013e <SPI_Send_Receive>:

//note: //calling the function in the master means write data to be send and issue transaction to exchange data then read the received data
		//calling the function in the slave means write data to be send and wait a transaction from the master to exchange data then read the received data
uint8_t SPI_Send_Receive(uint8_t Data)
{
	if(Read_Bit(SPCR,MSTR))
 13e:	6c 9b       	sbis	0x0d, 4	; 13
 140:	03 c0       	rjmp	.+6      	; 0x148 <SPI_Send_Receive+0xa>
		Reset_Bit(PORTB, SS);
 142:	98 b3       	in	r25, 0x18	; 24
 144:	9f 7e       	andi	r25, 0xEF	; 239
 146:	98 bb       	out	0x18, r25	; 24
	
	if(!Read_Bit(SPCR,MSTR))
 148:	6c 99       	sbic	0x0d, 4	; 13
 14a:	02 c0       	rjmp	.+4      	; 0x150 <SPI_Send_Receive+0x12>
		while(Read_Bit(PORTB, SS));
 14c:	c4 99       	sbic	0x18, 4	; 24
 14e:	fe cf       	rjmp	.-4      	; 0x14c <SPI_Send_Receive+0xe>
 150:	ef e3       	ldi	r30, 0x3F	; 63
 152:	fc e9       	ldi	r31, 0x9C	; 156
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <SPI_Send_Receive+0x16>
 158:	00 c0       	rjmp	.+0      	; 0x15a <SPI_Send_Receive+0x1c>
 15a:	00 00       	nop
	
	_delay_ms(20);
	//write data to be send
	SPDR = Data;
 15c:	8f b9       	out	0x0f, r24	; 15
	
	//in the master: an exchange data transaction is issued and wait until the transmit is complete from the master (new data received also) 
	//in the slave: wait for the exchange data transaction from the master is issued and the transmit is complete from the slave (new data received also) 
	while(!Read_Bit(SPSR, SPIF));	
 15e:	77 9b       	sbis	0x0e, 7	; 14
 160:	fe cf       	rjmp	.-4      	; 0x15e <SPI_Send_Receive+0x20>
	
	if(Read_Bit(SPCR,MSTR))
 162:	6c 9b       	sbis	0x0d, 4	; 13
 164:	03 c0       	rjmp	.+6      	; 0x16c <SPI_Send_Receive+0x2e>
		Set_Bit(PORTB, SS);
 166:	88 b3       	in	r24, 0x18	; 24
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	88 bb       	out	0x18, r24	; 24
	
	//read the new received data
	return SPDR;
 16c:	8f b1       	in	r24, 0x0f	; 15
}
 16e:	08 95       	ret

00000170 <__vector_14>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
 192:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <P_UART_UDRE_ISR_CallBack>
 196:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <P_UART_UDRE_ISR_CallBack+0x1>
 19a:	09 95       	icall
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_13>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	09 95       	icall
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
