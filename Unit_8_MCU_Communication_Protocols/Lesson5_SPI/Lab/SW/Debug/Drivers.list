
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010ec  080010ec  000110f4  2**0
                  CONTENTS
  4 .ARM          00000000  080010ec  080010ec  000110f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010ec  080010f4  000110f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010ec  080010ec  000110ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010f0  080010f0  000110f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000000  080010f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080010f4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005142  00000000  00000000  0001111d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bab  00000000  00000000  0001625f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d6e  00000000  00000000  00016e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001aa0  00000000  00000000  00017f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00000e6e  00000000  00000000  00019a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001a87e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006fc  00000000  00000000  0001a8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080010bc 	.word	0x080010bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080010bc 	.word	0x080010bc

08000170 <EXTI0_IRQHandler>:
//----------------------------------------------------------------
//EXTI ISR functions
//----------------------------------------------------------------

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	EXTI->PR |= 1<<4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//go to the call back function in APP layer
	GP_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//clear the interrupt from the EXTI module
	//go to the call back function in APP layer
	if(EXTI->PR & (1<<5) ) {	EXTI->PR |= 1<<5 ;GP_IRQ_Callback[5]();		}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6) ) {	EXTI->PR |= 1<<6 ;GP_IRQ_Callback[6](); 	}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7) ) {	EXTI->PR |= 1<<7 ;GP_IRQ_Callback[7](); 	}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8) ) { 	EXTI->PR |= 1<<8 ;GP_IRQ_Callback[8](); 	}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9) ) { 	EXTI->PR |= 1<<9 ;GP_IRQ_Callback[9](); 	}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10) )	{ 	EXTI->PR |= 1<<10 ;GP_IRQ_Callback[10]();	}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11) ) { 	EXTI->PR |= 1<<11 ;GP_IRQ_Callback[11]();	}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12) ) {	EXTI->PR |= 1<<12 ;GP_IRQ_Callback[12](); 	}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13) ) {	EXTI->PR |= 1<<13 ;GP_IRQ_Callback[13](); 	}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14) ) { 	EXTI->PR |= 1<<14 ;GP_IRQ_Callback[14](); 	}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<15) ) { 	EXTI->PR |= 1<<15 ;GP_IRQ_Callback[15](); 	}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <GPIO_Get_Config_Position>:
//----------------------------------------------------------------

static uint8_t GPIO_Get_Config_Position(uint16_t Pin_Number);

static uint8_t GPIO_Get_Config_Position(uint16_t Pin_Number)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(Pin_Number)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <GPIO_Get_Config_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <GPIO_Get_Config_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <GPIO_Get_Config_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <GPIO_Get_Config_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <GPIO_Get_Config_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <GPIO_Get_Config_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <GPIO_Get_Config_Position+0x7a>
 80003b8:	e037      	b.n	800042a <GPIO_Get_Config_Position+0x9a>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <GPIO_Get_Config_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <GPIO_Get_Config_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <GPIO_Get_Config_Position+0x8a>
 80003c6:	e030      	b.n	800042a <GPIO_Get_Config_Position+0x9a>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d023      	beq.n	8000416 <GPIO_Get_Config_Position+0x86>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <GPIO_Get_Config_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d019      	beq.n	800040e <GPIO_Get_Config_Position+0x7e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d018      	beq.n	8000412 <GPIO_Get_Config_Position+0x82>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d011      	beq.n	800040a <GPIO_Get_Config_Position+0x7a>
 80003e6:	e020      	b.n	800042a <GPIO_Get_Config_Position+0x9a>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d017      	beq.n	800041e <GPIO_Get_Config_Position+0x8e>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <GPIO_Get_Config_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d00f      	beq.n	800041a <GPIO_Get_Config_Position+0x8a>
 80003fa:	e016      	b.n	800042a <GPIO_Get_Config_Position+0x9a>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d00f      	beq.n	8000422 <GPIO_Get_Config_Position+0x92>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d00e      	beq.n	8000426 <GPIO_Get_Config_Position+0x96>
 8000408:	e00f      	b.n	800042a <GPIO_Get_Config_Position+0x9a>
	{
	case (GPIO_Pin0):
	case (GPIO_Pin8):
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e00e      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin1):
	case (GPIO_Pin9):
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e00c      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin2):
	case (GPIO_Pin10):
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e00a      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin3):
	case (GPIO_Pin11):
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e008      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin4):
	case (GPIO_Pin12):
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e006      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin5):
	case (GPIO_Pin13):
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e004      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin6):
	case (GPIO_Pin14):
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e002      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	case (GPIO_Pin7):
	case (GPIO_Pin15):
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e000      	b.n	800042c <GPIO_Get_Config_Position+0x9c>
	}
	return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
	...

08000438 <MCAL_GPIO_Init>:


//Init/Deinit API

void MCAL_GPIO_Init(volatile GPIO_typedef *GPIOX, GPIO_Pin_Configuration_t *Pin_Configuration)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	uint32_t *Config_Register = NULL;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]

	// specify which register from CRL and CRH is responsible to configure the pin according to pin number
	Config_Register= (Pin_Configuration->GPIO_Pin_Number < GPIO_Pin8) ? (&(GPIOX->CRL)) : (&(GPIOX->CRH)) ;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	d801      	bhi.n	8000452 <MCAL_GPIO_Init+0x1a>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	e001      	b.n	8000456 <MCAL_GPIO_Init+0x1e>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3304      	adds	r3, #4
 8000456:	613b      	str	r3, [r7, #16]

	//get the pin configuration position in the Config_Register
	uint8_t Config_Position = GPIO_Get_Config_Position(Pin_Configuration->GPIO_Pin_Number);
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff97 	bl	8000390 <GPIO_Get_Config_Position>
 8000462:	4603      	mov	r3, r0
 8000464:	73fb      	strb	r3, [r7, #15]

	//clear the pin configuration position in the config_register (Pin is temporary Input Analog)
	*Config_Register &= ~(0xF << Config_Position);
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	7bfa      	ldrb	r2, [r7, #15]
 800046c:	210f      	movs	r1, #15
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	43d2      	mvns	r2, r2
 8000474:	401a      	ands	r2, r3
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	601a      	str	r2, [r3, #0]

	uint8_t config_value; //value that will be written to the pin configuration position in the config_register


	switch(Pin_Configuration->GPIO_Pin_Mode)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	789b      	ldrb	r3, [r3, #2]
 800047e:	2b08      	cmp	r3, #8
 8000480:	d83d      	bhi.n	80004fe <MCAL_GPIO_Init+0xc6>
 8000482:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <MCAL_GPIO_Init+0x50>)
 8000484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000488:	080004ad 	.word	0x080004ad
 800048c:	080004ad 	.word	0x080004ad
 8000490:	080004b7 	.word	0x080004b7
 8000494:	080004cb 	.word	0x080004cb
 8000498:	080004e7 	.word	0x080004e7
 800049c:	080004e7 	.word	0x080004e7
 80004a0:	080004e7 	.word	0x080004e7
 80004a4:	080004e7 	.word	0x080004e7
 80004a8:	080004e1 	.word	0x080004e1
	{
	// pin is input floating or Analog or with pull up resistance (same for AF input floating or analog or pull up resistance according to the TRM)
	case (GPIO_Mode_Input_FLO):
	case (GPIO_Mode_Input_Analog):
		config_value = (Pin_Configuration->GPIO_Pin_Mode <<2);
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	789b      	ldrb	r3, [r3, #2]
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	75fb      	strb	r3, [r7, #23]
		break;
 80004b4:	e023      	b.n	80004fe <MCAL_GPIO_Init+0xc6>

	// pin is input with pull up or pull down resistance (same for AF input with pull up resistance according to the TRM)
	//same config_value of input with pull down resistance the difference is the GPIOX_ODR bit value to choose between pull up/down resistance
	case (GPIO_Mode_Input_PU):
		config_value = (GPIO_Mode_Input_PU <<2);
 80004b6:	2308      	movs	r3, #8
 80004b8:	75fb      	strb	r3, [r7, #23]
		GPIOX->ODR |= (Pin_Configuration->GPIO_Pin_Number); //set PXODR to 1 to activate select pull up resistance
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	8812      	ldrh	r2, [r2, #0]
 80004c2:	431a      	orrs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	60da      	str	r2, [r3, #12]
		break;
 80004c8:	e019      	b.n	80004fe <MCAL_GPIO_Init+0xc6>

	// pin is input with pull down resistance (same for AF input with pull down resistance according to the TRM)
	//same config_value of input with pull up resistance the difference is the GPIOX_ODR bit value to choose between pull up/down resistance
	case (GPIO_Mode_Input_PD):
		config_value = (GPIO_Mode_Input_PU <<2);
 80004ca:	2308      	movs	r3, #8
 80004cc:	75fb      	strb	r3, [r7, #23]
		GPIOX->ODR &= ~(Pin_Configuration->GPIO_Pin_Number); //set PXODR to 0 to select pull down resistance
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	8812      	ldrh	r2, [r2, #0]
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	401a      	ands	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	60da      	str	r2, [r3, #12]
		break;
 80004de:	e00e      	b.n	80004fe <MCAL_GPIO_Init+0xc6>

	//pin is Alternative function input this option is considered as input floating in this driver
	case (GPIO_Mode_AF_Input):
		config_value = (GPIO_Mode_Input_FLO <<2);
 80004e0:	2304      	movs	r3, #4
 80004e2:	75fb      	strb	r3, [r7, #23]
		break;
 80004e4:	e00b      	b.n	80004fe <MCAL_GPIO_Init+0xc6>
	//pin is (output/Alternative function output) open drain or push pull
	case (GPIO_Mode_Output_OD):
	case (GPIO_Mode_Output_PP):
	case (GPIO_Mode_AF_OD):
	case (GPIO_Mode_AF_PP):
		config_value = ((Pin_Configuration->GPIO_Pin_Output_Speed) | ((Pin_Configuration->GPIO_Pin_Mode-4) <<2));
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	78db      	ldrb	r3, [r3, #3]
 80004ea:	b25a      	sxtb	r2, r3
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	3b04      	subs	r3, #4
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	75fb      	strb	r3, [r7, #23]
		break;
 80004fc:	bf00      	nop
	}

	*Config_Register |= (config_value << Config_Position);
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7df9      	ldrb	r1, [r7, #23]
 8000504:	7bfa      	ldrb	r2, [r7, #15]
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	431a      	orrs	r2, r3
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <MCAL_GPIO_Write_Pin>:
		}
	return pin_status;
}

void MCAL_GPIO_Write_Pin(volatile GPIO_typedef *GPIOX, uint16_t Pin_Number, uint8_t Pin_Value)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	807b      	strh	r3, [r7, #2]
 8000524:	4613      	mov	r3, r2
 8000526:	707b      	strb	r3, [r7, #1]
	switch(Pin_Value)
 8000528:	787b      	ldrb	r3, [r7, #1]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d009      	beq.n	8000542 <MCAL_GPIO_Write_Pin+0x2a>
 800052e:	2b01      	cmp	r3, #1
 8000530:	d000      	beq.n	8000534 <MCAL_GPIO_Write_Pin+0x1c>
		break;
	case (GPIO_Pin_Reset):
		GPIOX->ODR &= ~(Pin_Number);
		break;
	}
}
 8000532:	e00e      	b.n	8000552 <MCAL_GPIO_Write_Pin+0x3a>
		GPIOX->ODR |= Pin_Number;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60da      	str	r2, [r3, #12]
		break;
 8000540:	e007      	b.n	8000552 <MCAL_GPIO_Write_Pin+0x3a>
		GPIOX->ODR &= ~(Pin_Number);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	887a      	ldrh	r2, [r7, #2]
 8000548:	43d2      	mvns	r2, r2
 800054a:	401a      	ands	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	60da      	str	r2, [r3, #12]
		break;
 8000550:	bf00      	nop
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <MCAL_RCC_Get_SYSCLK_FREQ>:
//----------------------------------------------------------------
//APIs Implementation by "MCAL RCC driver"
//----------------------------------------------------------------

uint32_t MCAL_RCC_Get_SYSCLK_FREQ(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch( (RCC->CFGR >> 2) & 0b11 )
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MCAL_RCC_Get_SYSCLK_FREQ+0x30>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	2b01      	cmp	r3, #1
 800056c:	d006      	beq.n	800057c <MCAL_RCC_Get_SYSCLK_FREQ+0x20>
 800056e:	2b01      	cmp	r3, #1
 8000570:	d302      	bcc.n	8000578 <MCAL_RCC_Get_SYSCLK_FREQ+0x1c>
 8000572:	2b02      	cmp	r3, #2
 8000574:	d004      	beq.n	8000580 <MCAL_RCC_Get_SYSCLK_FREQ+0x24>
 8000576:	e005      	b.n	8000584 <MCAL_RCC_Get_SYSCLK_FREQ+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MCAL_RCC_Get_SYSCLK_FREQ+0x34>)
 800057a:	e003      	b.n	8000584 <MCAL_RCC_Get_SYSCLK_FREQ+0x28>

	case 1:
		//HSE to do: need to be calculated and user should specify it in the macro
			return HSE_CLK;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <MCAL_RCC_Get_SYSCLK_FREQ+0x38>)
 800057e:	e001      	b.n	8000584 <MCAL_RCC_Get_SYSCLK_FREQ+0x28>

	case 2:
		//PLLCLK to do: need to be calculated by PLLSRC, PLLMUL, ....
			return 16000000U;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <MCAL_RCC_Get_SYSCLK_FREQ+0x38>)
 8000582:	e7ff      	b.n	8000584 <MCAL_RCC_Get_SYSCLK_FREQ+0x28>
	}
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000
 8000590:	007a1200 	.word	0x007a1200
 8000594:	00f42400 	.word	0x00f42400

08000598 <MCAL_RCC_Get_HCLK_FREQ>:

uint32_t MCAL_RCC_Get_HCLK_FREQ(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_SYSCLK_FREQ() >> AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0xF ] );
 800059c:	f7ff ffde 	bl	800055c <MCAL_RCC_Get_SYSCLK_FREQ>
 80005a0:	4601      	mov	r1, r0
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MCAL_RCC_Get_HCLK_FREQ+0x20>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	091b      	lsrs	r3, r3, #4
 80005a8:	f003 030f 	and.w	r3, r3, #15
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <MCAL_RCC_Get_HCLK_FREQ+0x24>)
 80005ae:	5cd3      	ldrb	r3, [r2, r3]
 80005b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	080010dc 	.word	0x080010dc

080005c0 <MCAL_RCC_Get_PCLK1_FREQ>:

uint32_t MCAL_RCC_Get_PCLK1_FREQ(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLK_FREQ() >> APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ] );
 80005c4:	f7ff ffe8 	bl	8000598 <MCAL_RCC_Get_HCLK_FREQ>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_Get_PCLK1_FREQ+0x20>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_Get_PCLK1_FREQ+0x24>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	080010d4 	.word	0x080010d4

080005e8 <MCAL_RCC_Get_PCLK2_FREQ>:

uint32_t MCAL_RCC_Get_PCLK2_FREQ(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_Get_HCLK_FREQ() >> APB_Prescaler_Table[(RCC->CFGR >> 11) & 0b111]);
 80005ec:	f7ff ffd4 	bl	8000598 <MCAL_RCC_Get_HCLK_FREQ>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_Get_PCLK2_FREQ+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	0adb      	lsrs	r3, r3, #11
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_Get_PCLK2_FREQ+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	080010d4 	.word	0x080010d4

08000610 <MCAL_SPI_Init>:
//----------------------------------------------------------------
//APIs Implementation by "MCAL SPI driver"
//----------------------------------------------------------------

void MCAL_SPI_Init(volatile SPI_typedef* SPIx, SPI_Config_t* SPI_Config)
{
 8000610:	b4b0      	push	{r4, r5, r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t Temp_reg_CR1=0;
 800061a:	2300      	movs	r3, #0
 800061c:	81fb      	strh	r3, [r7, #14]
	uint16_t Temp_reg_CR2=0;
 800061e:	2300      	movs	r3, #0
 8000620:	81bb      	strh	r3, [r7, #12]

	//Copy the configuration address and enable SPI clock
	if(SPIx == SPI1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <MCAL_SPI_Init+0x120>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d110      	bne.n	800064c <MCAL_SPI_Init+0x3c>
	{
		G_SPI_CFG[SPI1_Index] = *SPI_Config;
 800062a:	4a42      	ldr	r2, [pc, #264]	; (8000734 <MCAL_SPI_Init+0x124>)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4614      	mov	r4, r2
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0003 	ldmia.w	r5, {r0, r1}
 800063a:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_SPI1_Clock_Enable();
 800063e:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <MCAL_SPI_Init+0x128>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a3d      	ldr	r2, [pc, #244]	; (8000738 <MCAL_SPI_Init+0x128>)
 8000644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	e014      	b.n	8000676 <MCAL_SPI_Init+0x66>
	}else if(SPIx == SPI2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <MCAL_SPI_Init+0x12c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d110      	bne.n	8000676 <MCAL_SPI_Init+0x66>
	{
		G_SPI_CFG[SPI2_Index] = *SPI_Config;
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <MCAL_SPI_Init+0x124>)
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	f103 0418 	add.w	r4, r3, #24
 800065c:	4615      	mov	r5, r2
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000666:	e884 0003 	stmia.w	r4, {r0, r1}
		RCC_SPI2_Clock_Enable();
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MCAL_SPI_Init+0x128>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a32      	ldr	r2, [pc, #200]	; (8000738 <MCAL_SPI_Init+0x128>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	61d3      	str	r3, [r2, #28]
	}

	//enable the SPI module
	Temp_reg_CR1 = (1U << 6); //SPIx.CR1 Bit 6 SPE: SPI enable
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	81fb      	strh	r3, [r7, #14]

	//Master or slave
	Temp_reg_CR1 |= SPI_Config->Device_Mode;
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	881a      	ldrh	r2, [r3, #0]
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	4313      	orrs	r3, r2
 8000682:	81fb      	strh	r3, [r7, #14]

	//communication mode
	Temp_reg_CR1 |= SPI_Config->Communication_Mode;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	885a      	ldrh	r2, [r3, #2]
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	4313      	orrs	r3, r2
 800068c:	81fb      	strh	r3, [r7, #14]

	//Frame_Format
	Temp_reg_CR1 |= SPI_Config->Frame_Format;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	889a      	ldrh	r2, [r3, #4]
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	4313      	orrs	r3, r2
 8000696:	81fb      	strh	r3, [r7, #14]

	//Data_Size
	Temp_reg_CR1 |= SPI_Config->Data_Size;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	88da      	ldrh	r2, [r3, #6]
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	4313      	orrs	r3, r2
 80006a0:	81fb      	strh	r3, [r7, #14]

	//CLK_Polarity
	Temp_reg_CR1 |= SPI_Config->CLK_Polarity;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	891a      	ldrh	r2, [r3, #8]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	81fb      	strh	r3, [r7, #14]

	//CLK_Phase
	Temp_reg_CR1 |= SPI_Config->CLK_Phase;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	895a      	ldrh	r2, [r3, #10]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	81fb      	strh	r3, [r7, #14]

	//NSS
	if(SPI_Config->NSS == SPI_NSS_Hardware_Master_SS_Output_Enable)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	899b      	ldrh	r3, [r3, #12]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d105      	bne.n	80006ca <MCAL_SPI_Init+0xba>
	{
		Temp_reg_CR2 |= SPI_Config->NSS;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	899a      	ldrh	r2, [r3, #12]
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	81bb      	strh	r3, [r7, #12]
 80006c8:	e004      	b.n	80006d4 <MCAL_SPI_Init+0xc4>
	}else if(SPI_Config->NSS == SPI_NSS_Hardware_Master_SS_Output_Disable)
	{
		Temp_reg_CR2 &= SPI_Config->NSS;
	}else
	{
		Temp_reg_CR1 |= SPI_Config->NSS;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	899a      	ldrh	r2, [r3, #12]
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	81fb      	strh	r3, [r7, #14]
	}

	//SPI_BAUDRATE_Prescaler
	Temp_reg_CR1 |= SPI_Config->SPI_BAUDRATE_Prescaler;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	89da      	ldrh	r2, [r3, #14]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	4313      	orrs	r3, r2
 80006dc:	81fb      	strh	r3, [r7, #14]

	//SPI_IRQ_Enable
	if(SPI_Config->IRQ_Enable != SPI_IRQ_Enable_None)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	8a1b      	ldrh	r3, [r3, #16]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d019      	beq.n	800071a <MCAL_SPI_Init+0x10a>
	{
		Temp_reg_CR2 |= SPI_Config->IRQ_Enable;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	8a1a      	ldrh	r2, [r3, #16]
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MCAL_SPI_Init+0x120>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <MCAL_SPI_Init+0xf6>
		{
			NVIC_IRQ35_SPI1_Enable;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MCAL_SPI_Init+0x130>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <MCAL_SPI_Init+0x130>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e009      	b.n	800071a <MCAL_SPI_Init+0x10a>

		}else if(SPIx == SPI2)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <MCAL_SPI_Init+0x12c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d105      	bne.n	800071a <MCAL_SPI_Init+0x10a>
		{
			NVIC_IRQ36_SPI2_Enable;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MCAL_SPI_Init+0x130>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MCAL_SPI_Init+0x130>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->SPI_CR1 = Temp_reg_CR1;
 800071a:	89fa      	ldrh	r2, [r7, #14]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = Temp_reg_CR2;
 8000720:	89ba      	ldrh	r2, [r7, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bcb0      	pop	{r4, r5, r7}
 800072e:	4770      	bx	lr
 8000730:	40013000 	.word	0x40013000
 8000734:	20000060 	.word	0x20000060
 8000738:	40021000 	.word	0x40021000
 800073c:	40003800 	.word	0x40003800
 8000740:	e000e104 	.word	0xe000e104

08000744 <MCAL_SPI_GPIO_Set_Pins>:

}


void MCAL_SPI_GPIO_Set_Pins(volatile SPI_typedef* SPIx)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configuration_t Pin_CFG;
	if(SPIx == SPI1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a7e      	ldr	r2, [pc, #504]	; (8000948 <MCAL_SPI_GPIO_Set_Pins+0x204>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d174      	bne.n	800083e <MCAL_SPI_GPIO_Set_Pins+0xfa>
		//PA5: SPI1_SCK
		//PA6: SPI1_MISO
		//PA7: SPI1_MOSI

		//Master
		if(G_SPI_CFG[SPI1_Index].Device_Mode == SPI_Device_Mode_Master)
 8000754:	4b7d      	ldr	r3, [pc, #500]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d141      	bne.n	80007e0 <MCAL_SPI_GPIO_Set_Pins+0x9c>
		{
			//PA4: SPI1_NSS
			switch ((uint32_t)G_SPI_CFG[SPI1_Index].NSS)
 800075c:	4b7b      	ldr	r3, [pc, #492]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d00d      	beq.n	8000780 <MCAL_SPI_GPIO_Set_Pins+0x3c>
 8000764:	f113 0f05 	cmn.w	r3, #5
 8000768:	d117      	bne.n	800079a <MCAL_SPI_GPIO_Set_Pins+0x56>
			{
			case SPI_NSS_Hardware_Master_SS_Output_Disable:
				// Hardware master/slave >>> Input floating
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin4;
 800076a:	2310      	movs	r3, #16
 800076c:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 800076e:	2301      	movs	r3, #1
 8000770:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4875      	ldr	r0, [pc, #468]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800077a:	f7ff fe5d 	bl	8000438 <MCAL_GPIO_Init>
				break;
 800077e:	e00c      	b.n	800079a <MCAL_SPI_GPIO_Set_Pins+0x56>

			case SPI_NSS_Hardware_Master_SS_Output_Enable:
				//Hardware master/NSS output enabled >>> Alternate function push-pull
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin4;
 8000780:	2310      	movs	r3, #16
 8000782:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000784:	2306      	movs	r3, #6
 8000786:	73bb      	strb	r3, [r7, #14]
				Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	486f      	ldr	r0, [pc, #444]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000794:	f7ff fe50 	bl	8000438 <MCAL_GPIO_Init>
				break;
 8000798:	bf00      	nop
			}


			//PA5: SPI1_SCK
			//Master Alternate function push-pull
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin5;
 800079a:	2320      	movs	r3, #32
 800079c:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 800079e:	2306      	movs	r3, #6
 80007a0:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4868      	ldr	r0, [pc, #416]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80007ae:	f7ff fe43 	bl	8000438 <MCAL_GPIO_Init>


			//PA6: SPI1_MISO
			//Full duplex / master Input floating
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin6;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	4863      	ldr	r0, [pc, #396]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80007c2:	f7ff fe39 	bl	8000438 <MCAL_GPIO_Init>

			//PA7: SPI1_MOSI
			//Full duplex / master Alternate function push-pull
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin7;
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 80007ca:	2306      	movs	r3, #6
 80007cc:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	485d      	ldr	r0, [pc, #372]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80007da:	f7ff fe2d 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin15;
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
		}
	}
}
 80007de:	e0af      	b.n	8000940 <MCAL_SPI_GPIO_Set_Pins+0x1fc>
			if(G_SPI_CFG[SPI1_Index].NSS == SPI_NSS_Hardware_Slave)
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d109      	bne.n	80007fc <MCAL_SPI_GPIO_Set_Pins+0xb8>
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin4;
 80007e8:	2310      	movs	r3, #16
 80007ea:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4856      	ldr	r0, [pc, #344]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 80007f8:	f7ff fe1e 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin5;
 80007fc:	2320      	movs	r3, #32
 80007fe:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000800:	2301      	movs	r3, #1
 8000802:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	4851      	ldr	r0, [pc, #324]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 800080c:	f7ff fe14 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin6;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000814:	2306      	movs	r3, #6
 8000816:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	484b      	ldr	r0, [pc, #300]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000824:	f7ff fe08 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin7;
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 800082c:	2301      	movs	r3, #1
 800082e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4846      	ldr	r0, [pc, #280]	; (8000950 <MCAL_SPI_GPIO_Set_Pins+0x20c>)
 8000838:	f7ff fdfe 	bl	8000438 <MCAL_GPIO_Init>
}
 800083c:	e080      	b.n	8000940 <MCAL_SPI_GPIO_Set_Pins+0x1fc>
	else if(SPIx == SPI2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a44      	ldr	r2, [pc, #272]	; (8000954 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d17c      	bne.n	8000940 <MCAL_SPI_GPIO_Set_Pins+0x1fc>
		if(G_SPI_CFG[SPI2_Index].Device_Mode == SPI_Device_Mode_Master)
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000848:	8b1b      	ldrh	r3, [r3, #24]
 800084a:	2b04      	cmp	r3, #4
 800084c:	d146      	bne.n	80008dc <MCAL_SPI_GPIO_Set_Pins+0x198>
			switch ((uint32_t)G_SPI_CFG[SPI2_Index].NSS)
 800084e:	4b3f      	ldr	r3, [pc, #252]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 8000850:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000852:	2b04      	cmp	r3, #4
 8000854:	d00e      	beq.n	8000874 <MCAL_SPI_GPIO_Set_Pins+0x130>
 8000856:	f113 0f05 	cmn.w	r3, #5
 800085a:	d119      	bne.n	8000890 <MCAL_SPI_GPIO_Set_Pins+0x14c>
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin12;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000862:	2301      	movs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800086e:	f7ff fde3 	bl	8000438 <MCAL_GPIO_Init>
				break;
 8000872:	e00d      	b.n	8000890 <MCAL_SPI_GPIO_Set_Pins+0x14c>
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin12;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 800087a:	2306      	movs	r3, #6
 800087c:	73bb      	strb	r3, [r7, #14]
				Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4833      	ldr	r0, [pc, #204]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800088a:	f7ff fdd5 	bl	8000438 <MCAL_GPIO_Init>
				break;
 800088e:	bf00      	nop
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin13;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000896:	2306      	movs	r3, #6
 8000898:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008a6:	f7ff fdc7 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin14;
 80008aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008ae:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4827      	ldr	r0, [pc, #156]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008bc:	f7ff fdbc 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin15;
 80008c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c4:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 80008c6:	2306      	movs	r3, #6
 80008c8:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 80008ca:	2301      	movs	r3, #1
 80008cc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4820      	ldr	r0, [pc, #128]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008d6:	f7ff fdaf 	bl	8000438 <MCAL_GPIO_Init>
}
 80008da:	e031      	b.n	8000940 <MCAL_SPI_GPIO_Set_Pins+0x1fc>
			if(G_SPI_CFG[SPI2_Index].NSS == SPI_NSS_Hardware_Slave)
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MCAL_SPI_GPIO_Set_Pins+0x208>)
 80008de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10a      	bne.n	80008fa <MCAL_SPI_GPIO_Set_Pins+0x1b6>
				Pin_CFG.GPIO_Pin_Number = GPIO_Pin12;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	81bb      	strh	r3, [r7, #12]
				Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 80008ea:	2301      	movs	r3, #1
 80008ec:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4619      	mov	r1, r3
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 80008f6:	f7ff fd9f 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin13;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000900:	2301      	movs	r3, #1
 8000902:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4813      	ldr	r0, [pc, #76]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800090c:	f7ff fd94 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin14;
 8000910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000914:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000916:	2306      	movs	r3, #6
 8000918:	73bb      	strb	r3, [r7, #14]
			Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000926:	f7ff fd87 	bl	8000438 <MCAL_GPIO_Init>
			Pin_CFG.GPIO_Pin_Number = GPIO_Pin15;
 800092a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092e:	81bb      	strh	r3, [r7, #12]
			Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000930:	2301      	movs	r3, #1
 8000932:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_CFG);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 800093c:	f7ff fd7c 	bl	8000438 <MCAL_GPIO_Init>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013000 	.word	0x40013000
 800094c:	20000060 	.word	0x20000060
 8000950:	40010800 	.word	0x40010800
 8000954:	40003800 	.word	0x40003800
 8000958:	40010c00 	.word	0x40010c00

0800095c <MCAL_SPI_TX_RX_Data>:
	*P_TX_Buffer = SPIx->SPI_DR;
}


void MCAL_SPI_TX_RX_Data(volatile SPI_typedef* SPIx, uint16_t* P_TX_Buffer, enum SPI_Polling_Mechanism Polling_En)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	4613      	mov	r3, r2
 8000968:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == Polling_Enable)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <MCAL_SPI_TX_RX_Data+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TXE));
 8000970:	bf00      	nop
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f9      	beq.n	8000972 <MCAL_SPI_TX_RX_Data+0x16>

	SPIx->SPI_DR = *P_TX_Buffer;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	60da      	str	r2, [r3, #12]

	if(Polling_En == Polling_Enable)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <MCAL_SPI_TX_RX_Data+0x40>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 800098e:	bf00      	nop
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <MCAL_SPI_TX_RX_Data+0x34>

	*P_TX_Buffer = SPIx->SPI_DR;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	801a      	strh	r2, [r3, #0]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <SPI1_IRQHandler>:

//----------------------------------------------------------------
//IRQ
//----------------------------------------------------------------
void SPI1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SPI_SR & 1<<1) >> 1);
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <SPI1_IRQHandler+0x50>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	793b      	ldrb	r3, [r7, #4]
 80009c4:	f362 0300 	bfi	r3, r2, #0, #1
 80009c8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & 1<<0) >> 0);
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <SPI1_IRQHandler+0x50>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	793b      	ldrb	r3, [r7, #4]
 80009d6:	f362 0341 	bfi	r3, r2, #1, #1
 80009da:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & 1<<4) >> 4);
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SPI1_IRQHandler+0x50>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	091b      	lsrs	r3, r3, #4
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	793b      	ldrb	r3, [r7, #4]
 80009ea:	f362 0382 	bfi	r3, r2, #2, #1
 80009ee:	713b      	strb	r3, [r7, #4]

	G_SPI_CFG[SPI1_Index].P_IRQ_CallBack(irq_src);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SPI1_IRQHandler+0x54>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	7938      	ldrb	r0, [r7, #4]
 80009f6:	4798      	blx	r3
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013000 	.word	0x40013000
 8000a04:	20000060 	.word	0x20000060

08000a08 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SPI_SR & 1<<1) >> 1);
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <SPI2_IRQHandler+0x50>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	793b      	ldrb	r3, [r7, #4]
 8000a1c:	f362 0300 	bfi	r3, r2, #0, #1
 8000a20:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SPI_SR & 1<<0) >> 0);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <SPI2_IRQHandler+0x50>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	f362 0341 	bfi	r3, r2, #1, #1
 8000a32:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SPI_SR & 1<<4) >> 4);
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SPI2_IRQHandler+0x50>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	793b      	ldrb	r3, [r7, #4]
 8000a42:	f362 0382 	bfi	r3, r2, #2, #1
 8000a46:	713b      	strb	r3, [r7, #4]

	G_SPI_CFG[SPI2_Index].P_IRQ_CallBack(irq_src);
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SPI2_IRQHandler+0x54>)
 8000a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4c:	7938      	ldrb	r0, [r7, #4]
 8000a4e:	4798      	blx	r3

}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	20000060 	.word	0x20000060

08000a60 <MCAL_UART_Init>:
//----------------------------------------------------------------
//APIs Implementation "MCAL USART driver"
//----------------------------------------------------------------

void MCAL_UART_Init(volatile USART_typedef* USARTx, UART_Config_t* UART_Config)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	uint32_t BRR, PCLK;

	//set the global pointer to share the configurations with other functions
	GP_UART_Config = UART_Config;
 8000a6a:	4a57      	ldr	r2, [pc, #348]	; (8000bc8 <MCAL_UART_Init+0x168>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	6013      	str	r3, [r2, #0]

	//UART clock enable
	if(USARTx == USART1)		{ 	RCC_USART1_Clock_Enable(); 	}
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a56      	ldr	r2, [pc, #344]	; (8000bcc <MCAL_UART_Init+0x16c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <MCAL_UART_Init+0x26>
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a54      	ldr	r2, [pc, #336]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	e014      	b.n	8000ab0 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)	{ 	RCC_USART2_Clock_Enable(); 	}
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a52      	ldr	r2, [pc, #328]	; (8000bd4 <MCAL_UART_Init+0x174>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <MCAL_UART_Init+0x3c>
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a4f      	ldr	r2, [pc, #316]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	e009      	b.n	8000ab0 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)	{ 	RCC_USART3_Clock_Enable(); 	}
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <MCAL_UART_Init+0x178>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d105      	bne.n	8000ab0 <MCAL_UART_Init+0x50>
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a49      	ldr	r2, [pc, #292]	; (8000bd0 <MCAL_UART_Init+0x170>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	61d3      	str	r3, [r2, #28]

	//enable the USART module
	USARTx->CR1 |= 1<<13;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]

	//set TX/RX enable/disable value
	//USART_CR1 Bit 3 TE: transmitter enable & Bit 2 RE:receiver enable enable
	USARTx->CR1 |= UART_Config->UART_Mode;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60da      	str	r2, [r3, #12]

	//Payload width
	//USART_CR1 Bit 12 M: word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	8912      	ldrh	r2, [r2, #8]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60da      	str	r2, [r3, #12]

	//enable/disable Parity & if enabled select Odd/Even
	//USART_CR1 Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	8952      	ldrh	r2, [r2, #10]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]

	//No of stop Bits
	//USART_CR2 Bits 13:12 stop bits
	USARTx->CR2 |= UART_Config->StopBits;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	8992      	ldrh	r2, [r2, #12]
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3 Bit 9 CTSE: CTS enable & Bit8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HW_Flow_CTRL;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	89d2      	ldrh	r2, [r2, #14]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	615a      	str	r2, [r3, #20]


	//configuration of BRR (baud rate register)
	//PCLK1 for USART 2,3
	//PCLK2 for USART 1
	if(USARTx == USART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <MCAL_UART_Init+0x16c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d103      	bne.n	8000b12 <MCAL_UART_Init+0xb2>
	{	PCLK = MCAL_RCC_Get_PCLK2_FREQ();	}
 8000b0a:	f7ff fd6d 	bl	80005e8 <MCAL_RCC_Get_PCLK2_FREQ>
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	e002      	b.n	8000b18 <MCAL_UART_Init+0xb8>
	else
	{	PCLK = MCAL_RCC_Get_PCLK1_FREQ();	}
 8000b12:	f7ff fd55 	bl	80005c0 <MCAL_RCC_Get_PCLK1_FREQ>
 8000b16:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(PCLK, UART_Config->BaudRate);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b24:	0119      	lsls	r1, r3, #4
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009a      	lsls	r2, r3, #2
 8000b30:	441a      	add	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	fb00 f303 	mul.w	r3, r0, r3
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <MCAL_UART_Init+0x17c>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	095b      	lsrs	r3, r3, #5
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	609a      	str	r2, [r3, #8]


	//Enable/Disable the interrupt
	//USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_None)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	8a1b      	ldrh	r3, [r3, #16]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d026      	beq.n	8000bbe <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	8a12      	ldrh	r2, [r2, #16]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx IRQ
		//any flag that can generate an interrupt is cleared by the hardware when the interrupt is acknowledged in the NVIC by the processor
		if(USARTx == USART1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MCAL_UART_Init+0x16c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d106      	bne.n	8000b94 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000b8c:	f043 0320 	orr.w	r3, r3, #32
 8000b90:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}

}
 8000b92:	e014      	b.n	8000bbe <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <MCAL_UART_Init+0x174>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d106      	bne.n	8000baa <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	e009      	b.n	8000bbe <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <MCAL_UART_Init+0x178>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d105      	bne.n	8000bbe <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <MCAL_UART_Init+0x180>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000005c 	.word	0x2000005c
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	51eb851f 	.word	0x51eb851f
 8000be0:	e000e104 	.word	0xe000e104

08000be4 <MCAL_UART_Send_Data>:
	}

}

void MCAL_UART_Send_Data(volatile USART_typedef* USARTx, uint16_t* P_TX_Buffer, enum Polling_Mechanism Polling_En)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	71fb      	strb	r3, [r7, #7]
	//for polling mechanism
	//wait until the transmit data register is empty if the TXE flag is set in the SR
	if(Polling_En == Enable)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d106      	bne.n	8000c06 <MCAL_UART_Send_Data+0x22>
		while(! (USARTx->SR & 1<<7) );
 8000bf8:	bf00      	nop
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f9      	beq.n	8000bfa <MCAL_UART_Send_Data+0x16>
	//	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//	because it is replaced by the parity.
	//	When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.

	//payload = 9 bits
	if(GP_UART_Config->Payload_Length == UART_Payload_Length_9B)
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MCAL_UART_Send_Data+0x50>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	891b      	ldrh	r3, [r3, #8]
 8000c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c10:	d106      	bne.n	8000c20 <MCAL_UART_Send_Data+0x3c>
	{	USARTx->DR = (*P_TX_Buffer & (uint16_t)0x1FF);	}
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	605a      	str	r2, [r3, #4]

	//payload = 8 bits
	else
	{	USARTx->DR = (*P_TX_Buffer & (uint8_t)0xFF);	}

}
 8000c1e:	e004      	b.n	8000c2a <MCAL_UART_Send_Data+0x46>
	{	USARTx->DR = (*P_TX_Buffer & (uint8_t)0xFF);	}
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	605a      	str	r2, [r3, #4]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	2000005c 	.word	0x2000005c

08000c38 <MCAL_UART_Receive_Data>:

void MCAL_UART_Receive_Data(volatile USART_typedef* USARTx, uint16_t* P_RX_Buffer, enum Polling_Mechanism Polling_En)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	4613      	mov	r3, r2
 8000c44:	71fb      	strb	r3, [r7, #7]
	//for polling mechanism
	//wait until the data is transfered to the receive data register if the RXNE flag is set in the SR
	if(Polling_En == Enable)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d106      	bne.n	8000c5a <MCAL_UART_Receive_Data+0x22>
		while(! (USARTx->SR & 1<<5) );
 8000c4c:	bf00      	nop
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f9      	beq.n	8000c4e <MCAL_UART_Receive_Data+0x16>
	//	because it is replaced by the parity.
	//	When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.


	//parity is enabled
	if(GP_UART_Config->Parity != UART_Parity_None)
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MCAL_UART_Receive_Data+0x90>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	895b      	ldrh	r3, [r3, #10]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d016      	beq.n	8000c92 <MCAL_UART_Receive_Data+0x5a>
	{
		//RXNE flag if not cleared by the hardware if its interrupt is enabled it will be cleared by a read to the USART_DR register
		//payload = 9 bits
		if(GP_UART_Config->Payload_Length == UART_Payload_Length_9B)
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MCAL_UART_Receive_Data+0x90>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	891b      	ldrh	r3, [r3, #8]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d107      	bne.n	8000c80 <MCAL_UART_Receive_Data+0x48>
		{	*P_RX_Buffer = (USARTx->DR  & (uint8_t)0xFF);	}
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	801a      	strh	r2, [r3, #0]

		//payload = 8 bits
		else
		{	*P_RX_Buffer = (USARTx->DR & (uint8_t)0xFF);	}
	}
}
 8000c7e:	e01e      	b.n	8000cbe <MCAL_UART_Receive_Data+0x86>
		{	*P_RX_Buffer = (USARTx->DR & (uint8_t)0x7F);	}
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	801a      	strh	r2, [r3, #0]
}
 8000c90:	e015      	b.n	8000cbe <MCAL_UART_Receive_Data+0x86>
		if(GP_UART_Config->Payload_Length == UART_Payload_Length_9B)
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MCAL_UART_Receive_Data+0x90>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	891b      	ldrh	r3, [r3, #8]
 8000c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c9c:	d108      	bne.n	8000cb0 <MCAL_UART_Receive_Data+0x78>
		{	*P_RX_Buffer = (USARTx->DR  & (uint16_t)0x1FF);	}
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	801a      	strh	r2, [r3, #0]
}
 8000cae:	e006      	b.n	8000cbe <MCAL_UART_Receive_Data+0x86>
		{	*P_RX_Buffer = (USARTx->DR & (uint8_t)0xFF);	}
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	801a      	strh	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	2000005c 	.word	0x2000005c

08000ccc <MCAL_UART_GPIO_Set_Pins>:
	while(! (USARTx->SR & 1<<6) );
}


void MCAL_UART_GPIO_Set_Pins(volatile USART_typedef* USARTx)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configuration_t Pin_Config;

	//USART1
	if(USARTx == USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a71      	ldr	r2, [pc, #452]	; (8000e9c <MCAL_UART_GPIO_Set_Pins+0x1d0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d147      	bne.n	8000d6c <MCAL_UART_GPIO_Set_Pins+0xa0>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin9;
 8000cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce0:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4619      	mov	r1, r3
 8000cf0:	486b      	ldr	r0, [pc, #428]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000cf2:	f7ff fba1 	bl	8000438 <MCAL_GPIO_Init>

		//PA10 RX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin10;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_Input;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4866      	ldr	r0, [pc, #408]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000d08:	f7ff fb96 	bl	8000438 <MCAL_GPIO_Init>

		//check if CTS is enabled
		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000d0c:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	89db      	ldrh	r3, [r3, #14]
 8000d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d16:	d005      	beq.n	8000d24 <MCAL_UART_GPIO_Set_Pins+0x58>
 8000d18:	4b62      	ldr	r3, [pc, #392]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	89db      	ldrh	r3, [r3, #14]
 8000d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d22:	d10a      	bne.n	8000d3a <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			//PA11 CTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin11;
 8000d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d28:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	485a      	ldr	r0, [pc, #360]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000d36:	f7ff fb7f 	bl	8000438 <MCAL_GPIO_Init>
		}

		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_RTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000d3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	89db      	ldrh	r3, [r3, #14]
 8000d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d44:	d005      	beq.n	8000d52 <MCAL_UART_GPIO_Set_Pins+0x86>
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	89db      	ldrh	r3, [r3, #14]
 8000d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d50:	d10c      	bne.n	8000d6c <MCAL_UART_GPIO_Set_Pins+0xa0>
		{
			//PA12 RTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin12;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	484e      	ldr	r0, [pc, #312]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000d68:	f7ff fb66 	bl	8000438 <MCAL_GPIO_Init>
		}
	}

	//USART2
	if(USARTx == USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d143      	bne.n	8000dfc <MCAL_UART_GPIO_Set_Pins+0x130>
		//PA3 RX
		//PA0 CTS
		//PA1 RTS

		//PA2 TX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin2;
 8000d74:	2304      	movs	r3, #4
 8000d76:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000d78:	2306      	movs	r3, #6
 8000d7a:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4846      	ldr	r0, [pc, #280]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000d88:	f7ff fb56 	bl	8000438 <MCAL_GPIO_Init>

		//PA3 RX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin3;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_Input;
 8000d90:	2308      	movs	r3, #8
 8000d92:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4841      	ldr	r0, [pc, #260]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000d9c:	f7ff fb4c 	bl	8000438 <MCAL_GPIO_Init>

		//check if CTS is enabled
		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	89db      	ldrh	r3, [r3, #14]
 8000da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000daa:	d005      	beq.n	8000db8 <MCAL_UART_GPIO_Set_Pins+0xec>
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	89db      	ldrh	r3, [r3, #14]
 8000db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000db6:	d109      	bne.n	8000dcc <MCAL_UART_GPIO_Set_Pins+0x100>
		{
			//PA0 CTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin0;
 8000db8:	2301      	movs	r3, #1
 8000dba:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4836      	ldr	r0, [pc, #216]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000dc8:	f7ff fb36 	bl	8000438 <MCAL_GPIO_Init>
		}

		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_RTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000dcc:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	89db      	ldrh	r3, [r3, #14]
 8000dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd6:	d005      	beq.n	8000de4 <MCAL_UART_GPIO_Set_Pins+0x118>
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	89db      	ldrh	r3, [r3, #14]
 8000dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000de2:	d10b      	bne.n	8000dfc <MCAL_UART_GPIO_Set_Pins+0x130>
		{
			//PA1 RTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin1;
 8000de4:	2302      	movs	r3, #2
 8000de6:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000de8:	2306      	movs	r3, #6
 8000dea:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <MCAL_UART_GPIO_Set_Pins+0x1d4>)
 8000df8:	f7ff fb1e 	bl	8000438 <MCAL_GPIO_Init>
		}
	}

	//USART3
	if(USARTx == USART3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d147      	bne.n	8000e94 <MCAL_UART_GPIO_Set_Pins+0x1c8>
		//PB11 RX
		//PB13 CTS
		//PB14 RTS

		//PB10 TX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin10;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000e1a:	f7ff fb0d 	bl	8000438 <MCAL_GPIO_Init>

		//PB11 RX
		Pin_Config.GPIO_Pin_Number = GPIO_Pin11;
 8000e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e22:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_Input;
 8000e24:	2308      	movs	r3, #8
 8000e26:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000e30:	f7ff fb02 	bl	8000438 <MCAL_GPIO_Init>

		//check if CTS is enabled
		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	89db      	ldrh	r3, [r3, #14]
 8000e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e3e:	d005      	beq.n	8000e4c <MCAL_UART_GPIO_Set_Pins+0x180>
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	89db      	ldrh	r3, [r3, #14]
 8000e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e4a:	d10a      	bne.n	8000e62 <MCAL_UART_GPIO_Set_Pins+0x196>
		{
			//PB13 CTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin13;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e50:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_Input_FLO;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000e5e:	f7ff faeb 	bl	8000438 <MCAL_GPIO_Init>
		}

		if(GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_RTS || GP_UART_Config->HW_Flow_CTRL == UART_HW_Flow_CTRL_CTS_RTS)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	89db      	ldrh	r3, [r3, #14]
 8000e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e6c:	d005      	beq.n	8000e7a <MCAL_UART_GPIO_Set_Pins+0x1ae>
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	89db      	ldrh	r3, [r3, #14]
 8000e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e78:	d10c      	bne.n	8000e94 <MCAL_UART_GPIO_Set_Pins+0x1c8>
		{
			//PB14 RTS
			Pin_Config.GPIO_Pin_Number = GPIO_Pin14;
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Pin_Mode = GPIO_Mode_AF_PP;
 8000e80:	2306      	movs	r3, #6
 8000e82:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000e90:	f7ff fad2 	bl	8000438 <MCAL_GPIO_Init>
		}
	}
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	2000005c 	.word	0x2000005c
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <USART1_IRQHandler>:

//ISR
//any flag that can generate an interrupt is cleared by the hardware when the interrupt is acknowledged in the NVIC by the processor
//if the flag is not enabled as interrupt it can be cleared reading from or writing to certain register or by another method according to the SPECS
void USART1_IRQHandler (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	GP_UART_Config->P_IRQ_CallBack();
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <USART1_IRQHandler+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4798      	blx	r3
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000005c 	.word	0x2000005c

08000ec8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	GP_UART_Config->P_IRQ_CallBack();
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <USART2_IRQHandler+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4798      	blx	r3
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000005c 	.word	0x2000005c

08000edc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	GP_UART_Config->P_IRQ_CallBack();
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <USART3_IRQHandler+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4798      	blx	r3
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000005c 	.word	0x2000005c

08000ef0 <clock_init>:

#define MCU_Act_As_Master
//#define MCU_Act_As_Slave

void clock_init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
	// Bit 2 IOPAEN: I/O port A clock enable
	// 1:I/O port A clock enabled
	RCC_GPIOA_Clock_Enable();
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <clock_init+0x30>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <clock_init+0x30>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]

	// Bit 3 IOPBEN: I/O port B clock enable
	// 1:I/O port B clock enabled
	RCC_GPIOB_Clock_Enable();
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <clock_init+0x30>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <clock_init+0x30>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]

	//AFIO clock enable
	RCC_AFIO_Clock_Enable();
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <clock_init+0x30>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <clock_init+0x30>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6193      	str	r3, [r2, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000

08000f24 <UART_IRQ_CallBack>:
	}
#endif
}

void UART_IRQ_CallBack(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master
	MCAL_UART_Receive_Data(USART1, &ch, Disable);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <UART_IRQ_CallBack+0x3c>)
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <UART_IRQ_CallBack+0x40>)
 8000f2e:	f7ff fe83 	bl	8000c38 <MCAL_UART_Receive_Data>
	MCAL_UART_Send_Data(USART1, &ch, Enable);
 8000f32:	2200      	movs	r2, #0
 8000f34:	490a      	ldr	r1, [pc, #40]	; (8000f60 <UART_IRQ_CallBack+0x3c>)
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <UART_IRQ_CallBack+0x40>)
 8000f38:	f7ff fe54 	bl	8000be4 <MCAL_UART_Send_Data>
	//Send to SPI
	MCAL_GPIO_Write_Pin(GPIOA, GPIO_Pin4, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2110      	movs	r1, #16
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <UART_IRQ_CallBack+0x44>)
 8000f42:	f7ff fae9 	bl	8000518 <MCAL_GPIO_Write_Pin>
	MCAL_SPI_TX_RX_Data(SPI1, &ch, Polling_Enable);
 8000f46:	2200      	movs	r2, #0
 8000f48:	4905      	ldr	r1, [pc, #20]	; (8000f60 <UART_IRQ_CallBack+0x3c>)
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <UART_IRQ_CallBack+0x48>)
 8000f4c:	f7ff fd06 	bl	800095c <MCAL_SPI_TX_RX_Data>
	MCAL_GPIO_Write_Pin(GPIOA, GPIO_Pin4, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2110      	movs	r1, #16
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <UART_IRQ_CallBack+0x44>)
 8000f56:	f7ff fadf 	bl	8000518 <MCAL_GPIO_Write_Pin>
#endif
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000090 	.word	0x20000090
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40013000 	.word	0x40013000

08000f70 <main>:

int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0

	//=================UART1_Init=================
	UART_Config_t UART_CFG;
	clock_init();
 8000f76:	f7ff ffbb 	bl	8000ef0 <clock_init>
	UART_CFG.BaudRate = UART_BaudRate_115200;
 8000f7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
	UART_CFG.HW_Flow_CTRL = UART_HW_Flow_CTRL_None;
 8000f80:	2300      	movs	r3, #0
 8000f82:	85fb      	strh	r3, [r7, #46]	; 0x2e
	UART_CFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000f84:	2320      	movs	r3, #32
 8000f86:	863b      	strh	r3, [r7, #48]	; 0x30
	UART_CFG.P_IRQ_CallBack = UART_IRQ_CallBack;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <main+0xa0>)
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
	UART_CFG.Parity = UART_Parity_None;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	857b      	strh	r3, [r7, #42]	; 0x2a
	UART_CFG.Payload_Length = UART_Payload_Length_8B;
 8000f90:	2300      	movs	r3, #0
 8000f92:	853b      	strh	r3, [r7, #40]	; 0x28
	UART_CFG.StopBits = UART_StopBits_1Bit;
 8000f94:	2300      	movs	r3, #0
 8000f96:	85bb      	strh	r3, [r7, #44]	; 0x2c
	UART_CFG.UART_Mode = UART_Mode_RX_TX;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	f887 3020 	strb.w	r3, [r7, #32]

	MCAL_UART_Init(USART1, &UART_CFG);
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <main+0xa4>)
 8000fa6:	f7ff fd5b 	bl	8000a60 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000faa:	481a      	ldr	r0, [pc, #104]	; (8001014 <main+0xa4>)
 8000fac:	f7ff fe8e 	bl	8000ccc <MCAL_UART_GPIO_Set_Pins>
	//PA7: SPI1_MOSI

	SPI_Config_t SPI1_CFG;

	//Common configuration for SPI1 master/slave
	SPI1_CFG.CLK_Phase = SPI_CLK_Phase_Data_Capture_at_2nd_Edge;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	827b      	strh	r3, [r7, #18]
	SPI1_CFG.CLK_Polarity = SPI_CLK_Polarity_Idle_High;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	823b      	strh	r3, [r7, #16]
	SPI1_CFG.Data_Size = SPI_Data_Size_8Bits;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	81fb      	strh	r3, [r7, #14]
	SPI1_CFG.Frame_Format = SPI_Frame_Format_MSB_Transmitted_First;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	81bb      	strh	r3, [r7, #12]
	//Assume by default pclk2 = 8MHZ
	SPI1_CFG.SPI_BAUDRATE_Prescaler = SPI_BAUDRATE_Prescaler_8;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	82fb      	strh	r3, [r7, #22]
	SPI1_CFG.Communication_Mode = SPI_Direction_2Lines;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	817b      	strh	r3, [r7, #10]

#ifdef MCU_Act_As_Master

	SPI1_CFG.Device_Mode = SPI_Device_Mode_Master;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	813b      	strh	r3, [r7, #8]
	SPI1_CFG.IRQ_Enable = SPI_IRQ_Enable_None;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	833b      	strh	r3, [r7, #24]
	SPI1_CFG.NSS = SPI_NSS_Software_set;
 8000fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd4:	82bb      	strh	r3, [r7, #20]
	SPI1_CFG.P_IRQ_CallBack = NULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

	MCAL_SPI_Init(SPI1, &SPI1_CFG);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <main+0xa8>)
 8000fe2:	f7ff fb15 	bl	8000610 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <main+0xa8>)
 8000fe8:	f7ff fbac 	bl	8000744 <MCAL_SPI_GPIO_Set_Pins>

	//configure ss on PA.4 by GPIO
	GPIO_Pin_Configuration_t Pin_CFG;
	Pin_CFG.GPIO_Pin_Number = GPIO_Pin4;
 8000fec:	2310      	movs	r3, #16
 8000fee:	80bb      	strh	r3, [r7, #4]
	Pin_CFG.GPIO_Pin_Mode = GPIO_Mode_Output_PP;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	71bb      	strb	r3, [r7, #6]
	Pin_CFG.GPIO_Pin_Output_Speed = GPIO_Output_Speed_10M;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &Pin_CFG);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <main+0xac>)
 8000ffe:	f7ff fa1b 	bl	8000438 <MCAL_GPIO_Init>

	//force the slave select (High) idle mode
	MCAL_GPIO_Write_Pin(GPIOA, GPIO_Pin4, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	2110      	movs	r1, #16
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <main+0xac>)
 8001008:	f7ff fa86 	bl	8000518 <MCAL_GPIO_Write_Pin>
	MCAL_SPI_Init(SPI1, &SPI1_CFG);
	MCAL_SPI_GPIO_Set_Pins(SPI1);
#endif


	while(1)
 800100c:	e7fe      	b.n	800100c <main+0x9c>
 800100e:	bf00      	nop
 8001010:	08000f25 	.word	0x08000f25
 8001014:	40013800 	.word	0x40013800
 8001018:	40013000 	.word	0x40013000
 800101c:	40010800 	.word	0x40010800

08001020 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001024:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800104e:	f000 f811 	bl	8001074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001052:	f7ff ff8d 	bl	8000f70 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
  ldr   r0, =_estack
 8001058:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001064:	080010f4 	.word	0x080010f4
  ldr r2, =_sbss
 8001068:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800106c:	20000094 	.word	0x20000094

08001070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_2_IRQHandler>
	...

08001074 <__libc_init_array>:
 8001074:	b570      	push	{r4, r5, r6, lr}
 8001076:	2500      	movs	r5, #0
 8001078:	4e0c      	ldr	r6, [pc, #48]	; (80010ac <__libc_init_array+0x38>)
 800107a:	4c0d      	ldr	r4, [pc, #52]	; (80010b0 <__libc_init_array+0x3c>)
 800107c:	1ba4      	subs	r4, r4, r6
 800107e:	10a4      	asrs	r4, r4, #2
 8001080:	42a5      	cmp	r5, r4
 8001082:	d109      	bne.n	8001098 <__libc_init_array+0x24>
 8001084:	f000 f81a 	bl	80010bc <_init>
 8001088:	2500      	movs	r5, #0
 800108a:	4e0a      	ldr	r6, [pc, #40]	; (80010b4 <__libc_init_array+0x40>)
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <__libc_init_array+0x44>)
 800108e:	1ba4      	subs	r4, r4, r6
 8001090:	10a4      	asrs	r4, r4, #2
 8001092:	42a5      	cmp	r5, r4
 8001094:	d105      	bne.n	80010a2 <__libc_init_array+0x2e>
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800109c:	4798      	blx	r3
 800109e:	3501      	adds	r5, #1
 80010a0:	e7ee      	b.n	8001080 <__libc_init_array+0xc>
 80010a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010a6:	4798      	blx	r3
 80010a8:	3501      	adds	r5, #1
 80010aa:	e7f2      	b.n	8001092 <__libc_init_array+0x1e>
 80010ac:	080010ec 	.word	0x080010ec
 80010b0:	080010ec 	.word	0x080010ec
 80010b4:	080010ec 	.word	0x080010ec
 80010b8:	080010f0 	.word	0x080010f0

080010bc <_init>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	bf00      	nop
 80010c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c2:	bc08      	pop	{r3}
 80010c4:	469e      	mov	lr, r3
 80010c6:	4770      	bx	lr

080010c8 <_fini>:
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ca:	bf00      	nop
 80010cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ce:	bc08      	pop	{r3}
 80010d0:	469e      	mov	lr, r3
 80010d2:	4770      	bx	lr
