
AVR_ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  000027de  00002872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000650  00800136  00800136  00002948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058ec  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001497  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000345c  00000000  00000000  00009bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  0000d014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c08  00000000  00000000  0000dde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c9a  00000000  00000000  0000f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00014686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <main>
      8a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
      92:	fc 01       	movw	r30, r24
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsertEnd>:
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	9c 01       	movw	r18, r24
      bc:	fb 01       	movw	r30, r22
      be:	dc 01       	movw	r26, r24
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	cd 91       	ld	r28, X+
      c4:	dc 91       	ld	r29, X
      c6:	12 97       	sbiw	r26, 0x02	; 2
      c8:	d3 83       	std	Z+3, r29	; 0x03
      ca:	c2 83       	std	Z+2, r28	; 0x02
      cc:	8c 81       	ldd	r24, Y+4	; 0x04
      ce:	9d 81       	ldd	r25, Y+5	; 0x05
      d0:	95 83       	std	Z+5, r25	; 0x05
      d2:	84 83       	std	Z+4, r24	; 0x04
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	dc 01       	movw	r26, r24
      da:	13 96       	adiw	r26, 0x03	; 3
      dc:	7c 93       	st	X, r23
      de:	6e 93       	st	-X, r22
      e0:	12 97       	sbiw	r26, 0x02	; 2
      e2:	7d 83       	std	Y+5, r23	; 0x05
      e4:	6c 83       	std	Y+4, r22	; 0x04
      e6:	31 87       	std	Z+9, r19	; 0x09
      e8:	20 87       	std	Z+8, r18	; 0x08
      ea:	f9 01       	movw	r30, r18
      ec:	80 81       	ld	r24, Z
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 83       	st	Z, r24
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <vListInsert>:
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	eb 01       	movw	r28, r22
      fe:	48 81       	ld	r20, Y
     100:	59 81       	ldd	r21, Y+1	; 0x01
     102:	4f 3f       	cpi	r20, 0xFF	; 255
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	52 07       	cpc	r21, r18
     108:	21 f4       	brne	.+8      	; 0x112 <vListInsert+0x1a>
     10a:	fc 01       	movw	r30, r24
     10c:	a7 81       	ldd	r26, Z+7	; 0x07
     10e:	b0 85       	ldd	r27, Z+8	; 0x08
     110:	0d c0       	rjmp	.+26     	; 0x12c <vListInsert+0x34>
     112:	dc 01       	movw	r26, r24
     114:	13 96       	adiw	r26, 0x03	; 3
     116:	01 c0       	rjmp	.+2      	; 0x11a <vListInsert+0x22>
     118:	df 01       	movw	r26, r30
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	13 97       	sbiw	r26, 0x03	; 3
     122:	20 81       	ld	r18, Z
     124:	31 81       	ldd	r19, Z+1	; 0x01
     126:	42 17       	cp	r20, r18
     128:	53 07       	cpc	r21, r19
     12a:	b0 f7       	brcc	.-20     	; 0x118 <vListInsert+0x20>
     12c:	12 96       	adiw	r26, 0x02	; 2
     12e:	ed 91       	ld	r30, X+
     130:	fc 91       	ld	r31, X
     132:	13 97       	sbiw	r26, 0x03	; 3
     134:	fb 83       	std	Y+3, r31	; 0x03
     136:	ea 83       	std	Y+2, r30	; 0x02
     138:	d5 83       	std	Z+5, r29	; 0x05
     13a:	c4 83       	std	Z+4, r28	; 0x04
     13c:	bd 83       	std	Y+5, r27	; 0x05
     13e:	ac 83       	std	Y+4, r26	; 0x04
     140:	13 96       	adiw	r26, 0x03	; 3
     142:	dc 93       	st	X, r29
     144:	ce 93       	st	-X, r28
     146:	12 97       	sbiw	r26, 0x02	; 2
     148:	99 87       	std	Y+9, r25	; 0x09
     14a:	88 87       	std	Y+8, r24	; 0x08
     14c:	fc 01       	movw	r30, r24
     14e:	20 81       	ld	r18, Z
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	20 83       	st	Z, r18
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <uxListRemove>:
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	fc 01       	movw	r30, r24
     160:	a0 85       	ldd	r26, Z+8	; 0x08
     162:	b1 85       	ldd	r27, Z+9	; 0x09
     164:	c2 81       	ldd	r28, Z+2	; 0x02
     166:	d3 81       	ldd	r29, Z+3	; 0x03
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	9d 83       	std	Y+5, r25	; 0x05
     16e:	8c 83       	std	Y+4, r24	; 0x04
     170:	c4 81       	ldd	r28, Z+4	; 0x04
     172:	d5 81       	ldd	r29, Z+5	; 0x05
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	93 81       	ldd	r25, Z+3	; 0x03
     178:	9b 83       	std	Y+3, r25	; 0x03
     17a:	8a 83       	std	Y+2, r24	; 0x02
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	8d 91       	ld	r24, X+
     180:	9c 91       	ld	r25, X
     182:	12 97       	sbiw	r26, 0x02	; 2
     184:	e8 17       	cp	r30, r24
     186:	f9 07       	cpc	r31, r25
     188:	31 f4       	brne	.+12     	; 0x196 <uxListRemove+0x3c>
     18a:	84 81       	ldd	r24, Z+4	; 0x04
     18c:	95 81       	ldd	r25, Z+5	; 0x05
     18e:	12 96       	adiw	r26, 0x02	; 2
     190:	9c 93       	st	X, r25
     192:	8e 93       	st	-X, r24
     194:	11 97       	sbiw	r26, 0x01	; 1
     196:	11 86       	std	Z+9, r1	; 0x09
     198:	10 86       	std	Z+8, r1	; 0x08
     19a:	8c 91       	ld	r24, X
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	8c 93       	st	X, r24
     1a0:	8c 91       	ld	r24, X
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <prvSetupTimerInterrupt>:
     1a8:	1b bc       	out	0x2b, r1	; 43
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	8a bd       	out	0x2a, r24	; 42
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	8e bd       	out	0x2e, r24	; 46
     1b2:	89 b7       	in	r24, 0x39	; 57
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	89 bf       	out	0x39, r24	; 57
     1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
     1ba:	31 e1       	ldi	r19, 0x11	; 17
     1bc:	fc 01       	movw	r30, r24
     1be:	30 83       	st	Z, r19
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	22 e2       	ldi	r18, 0x22	; 34
     1c4:	20 83       	st	Z, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	a3 e3       	ldi	r26, 0x33	; 51
     1ca:	a0 83       	st	Z, r26
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	70 83       	st	Z, r23
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	10 82       	st	Z, r1
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	10 82       	st	Z, r1
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	60 83       	st	Z, r22
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	60 83       	st	Z, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	65 e0       	ldi	r22, 0x05	; 5
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	68 e0       	ldi	r22, 0x08	; 8
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	69 e0       	ldi	r22, 0x09	; 9
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	60 e1       	ldi	r22, 0x10	; 16
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 83       	st	Z, r19
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	32 e1       	ldi	r19, 0x12	; 18
     220:	30 83       	st	Z, r19
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	33 e1       	ldi	r19, 0x13	; 19
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	34 e1       	ldi	r19, 0x14	; 20
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	35 e1       	ldi	r19, 0x15	; 21
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	36 e1       	ldi	r19, 0x16	; 22
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	37 e1       	ldi	r19, 0x17	; 23
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	38 e1       	ldi	r19, 0x18	; 24
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	39 e1       	ldi	r19, 0x19	; 25
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	30 e2       	ldi	r19, 0x20	; 32
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	31 e2       	ldi	r19, 0x21	; 33
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	20 83       	st	Z, r18
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	23 e2       	ldi	r18, 0x23	; 35
     260:	20 83       	st	Z, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	40 83       	st	Z, r20
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	50 83       	st	Z, r21
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	26 e2       	ldi	r18, 0x26	; 38
     26e:	20 83       	st	Z, r18
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	27 e2       	ldi	r18, 0x27	; 39
     274:	20 83       	st	Z, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	29 e2       	ldi	r18, 0x29	; 41
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	21 e3       	ldi	r18, 0x31	; 49
     28c:	20 83       	st	Z, r18
     28e:	86 97       	sbiw	r24, 0x26	; 38
     290:	08 95       	ret

00000292 <xPortStartScheduler>:
     292:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <prvSetupTimerInterrupt>
     296:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <pxCurrentTCB>
     29a:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     29e:	cd 91       	ld	r28, X+
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	dd 91       	ld	r29, X+
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	8f 90       	pop	r8
     2d6:	7f 90       	pop	r7
     2d8:	6f 90       	pop	r6
     2da:	5f 90       	pop	r5
     2dc:	4f 90       	pop	r4
     2de:	3f 90       	pop	r3
     2e0:	2f 90       	pop	r2
     2e2:	1f 90       	pop	r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	08 95       	ret
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret

000002f0 <vPortYield>:
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	0f 92       	push	r0
     2f8:	1f 92       	push	r1
     2fa:	11 24       	eor	r1, r1
     2fc:	2f 92       	push	r2
     2fe:	3f 92       	push	r3
     300:	4f 92       	push	r4
     302:	5f 92       	push	r5
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
     338:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <pxCurrentTCB>
     33c:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     340:	0d b6       	in	r0, 0x3d	; 61
     342:	0d 92       	st	X+, r0
     344:	0e b6       	in	r0, 0x3e	; 62
     346:	0d 92       	st	X+, r0
     348:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <vTaskSwitchContext>
     34c:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <pxCurrentTCB>
     350:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     354:	cd 91       	ld	r28, X+
     356:	cd bf       	out	0x3d, r28	; 61
     358:	dd 91       	ld	r29, X+
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	3f 90       	pop	r3
     396:	2f 90       	pop	r2
     398:	1f 90       	pop	r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0
     3a0:	08 95       	ret

000003a2 <__vector_7>:
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 c0 07 	call	0xf80	; 0xf80 <xTaskIncrementTick>
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <pvPortMalloc>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
     3f0:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
     3f4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     3f8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     3fc:	89 2b       	or	r24, r25
     3fe:	31 f4       	brne	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     400:	8a e3       	ldi	r24, 0x3A	; 58
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
     408:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
     40c:	20 97       	sbiw	r28, 0x00	; 0
     40e:	c9 f0       	breq	.+50     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     410:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <xNextFreeByte>
     414:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <xNextFreeByte+0x1>
     418:	9e 01       	movw	r18, r28
     41a:	28 0f       	add	r18, r24
     41c:	39 1f       	adc	r19, r25
     41e:	2b 3d       	cpi	r18, 0xDB	; 219
     420:	45 e0       	ldi	r20, 0x05	; 5
     422:	34 07       	cpc	r19, r20
     424:	88 f4       	brcc	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	88 f4       	brcc	.+34     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     42c:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <__data_end>
     430:	d0 91 37 01 	lds	r29, 0x0137	; 0x800137 <__data_end+0x1>
     434:	c8 0f       	add	r28, r24
     436:	d9 1f       	adc	r29, r25
     438:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <xNextFreeByte+0x1>
     43c:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <xNextFreeByte>
     440:	08 c0       	rjmp	.+16     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     442:	c0 e0       	ldi	r28, 0x00	; 0
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	05 c0       	rjmp	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d0 e0       	ldi	r29, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	c0 e0       	ldi	r28, 0x00	; 0
     450:	d0 e0       	ldi	r29, 0x00	; 0
     452:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     456:	ce 01       	movw	r24, r28
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <vPortFree>:
     45e:	08 95       	ret

00000460 <prvIsQueueEmpty>:
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	0f 92       	push	r0
     466:	fc 01       	movw	r30, r24
     468:	82 8d       	ldd	r24, Z+26	; 0x1a
     46a:	81 11       	cpse	r24, r1
     46c:	02 c0       	rjmp	.+4      	; 0x472 <prvIsQueueEmpty+0x12>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	01 c0       	rjmp	.+2      	; 0x474 <prvIsQueueEmpty+0x14>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	08 95       	ret

0000047a <prvIsQueueFull>:
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	0f 92       	push	r0
     480:	fc 01       	movw	r30, r24
     482:	22 8d       	ldd	r18, Z+26	; 0x1a
     484:	83 8d       	ldd	r24, Z+27	; 0x1b
     486:	28 13       	cpse	r18, r24
     488:	02 c0       	rjmp	.+4      	; 0x48e <prvIsQueueFull+0x14>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	01 c0       	rjmp	.+2      	; 0x490 <prvIsQueueFull+0x16>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	08 95       	ret

00000496 <prvCopyDataToQueue>:
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
     4a0:	04 2f       	mov	r16, r20
     4a2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     4a4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4a6:	44 23       	and	r20, r20
     4a8:	b9 f1       	breq	.+110    	; 0x518 <prvCopyDataToQueue+0x82>
     4aa:	01 11       	cpse	r16, r1
     4ac:	16 c0       	rjmp	.+44     	; 0x4da <prvCopyDataToQueue+0x44>
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	9b 81       	ldd	r25, Y+3	; 0x03
     4b4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <memcpy>
     4b8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	82 0f       	add	r24, r18
     4c0:	91 1d       	adc	r25, r1
     4c2:	9b 83       	std	Y+3, r25	; 0x03
     4c4:	8a 83       	std	Y+2, r24	; 0x02
     4c6:	2c 81       	ldd	r18, Y+4	; 0x04
     4c8:	3d 81       	ldd	r19, Y+5	; 0x05
     4ca:	82 17       	cp	r24, r18
     4cc:	93 07       	cpc	r25, r19
     4ce:	20 f1       	brcs	.+72     	; 0x518 <prvCopyDataToQueue+0x82>
     4d0:	88 81       	ld	r24, Y
     4d2:	99 81       	ldd	r25, Y+1	; 0x01
     4d4:	9b 83       	std	Y+3, r25	; 0x03
     4d6:	8a 83       	std	Y+2, r24	; 0x02
     4d8:	1f c0       	rjmp	.+62     	; 0x518 <prvCopyDataToQueue+0x82>
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	8e 81       	ldd	r24, Y+6	; 0x06
     4de:	9f 81       	ldd	r25, Y+7	; 0x07
     4e0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <memcpy>
     4e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	91 95       	neg	r25
     4ea:	81 95       	neg	r24
     4ec:	91 09       	sbc	r25, r1
     4ee:	2e 81       	ldd	r18, Y+6	; 0x06
     4f0:	3f 81       	ldd	r19, Y+7	; 0x07
     4f2:	28 0f       	add	r18, r24
     4f4:	39 1f       	adc	r19, r25
     4f6:	3f 83       	std	Y+7, r19	; 0x07
     4f8:	2e 83       	std	Y+6, r18	; 0x06
     4fa:	48 81       	ld	r20, Y
     4fc:	59 81       	ldd	r21, Y+1	; 0x01
     4fe:	24 17       	cp	r18, r20
     500:	35 07       	cpc	r19, r21
     502:	30 f4       	brcc	.+12     	; 0x510 <prvCopyDataToQueue+0x7a>
     504:	2c 81       	ldd	r18, Y+4	; 0x04
     506:	3d 81       	ldd	r19, Y+5	; 0x05
     508:	82 0f       	add	r24, r18
     50a:	93 1f       	adc	r25, r19
     50c:	9f 83       	std	Y+7, r25	; 0x07
     50e:	8e 83       	std	Y+6, r24	; 0x06
     510:	02 30       	cpi	r16, 0x02	; 2
     512:	11 f4       	brne	.+4      	; 0x518 <prvCopyDataToQueue+0x82>
     514:	11 11       	cpse	r17, r1
     516:	11 50       	subi	r17, 0x01	; 1
     518:	1f 5f       	subi	r17, 0xFF	; 255
     51a:	1a 8f       	std	Y+26, r17	; 0x1a
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	08 95       	ret

00000528 <prvCopyDataFromQueue>:
     528:	fc 01       	movw	r30, r24
     52a:	44 8d       	ldd	r20, Z+28	; 0x1c
     52c:	44 23       	and	r20, r20
     52e:	a9 f0       	breq	.+42     	; 0x55a <prvCopyDataFromQueue+0x32>
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	26 81       	ldd	r18, Z+6	; 0x06
     534:	37 81       	ldd	r19, Z+7	; 0x07
     536:	24 0f       	add	r18, r20
     538:	35 1f       	adc	r19, r21
     53a:	37 83       	std	Z+7, r19	; 0x07
     53c:	26 83       	std	Z+6, r18	; 0x06
     53e:	84 81       	ldd	r24, Z+4	; 0x04
     540:	95 81       	ldd	r25, Z+5	; 0x05
     542:	28 17       	cp	r18, r24
     544:	39 07       	cpc	r19, r25
     546:	20 f0       	brcs	.+8      	; 0x550 <prvCopyDataFromQueue+0x28>
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	97 83       	std	Z+7, r25	; 0x07
     54e:	86 83       	std	Z+6, r24	; 0x06
     550:	cb 01       	movw	r24, r22
     552:	66 81       	ldd	r22, Z+6	; 0x06
     554:	77 81       	ldd	r23, Z+7	; 0x07
     556:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <memcpy>
     55a:	08 95       	ret

0000055c <prvUnlockQueue>:
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	0f 92       	push	r0
     56a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     56c:	0b c0       	rjmp	.+22     	; 0x584 <prvUnlockQueue+0x28>
     56e:	89 89       	ldd	r24, Y+17	; 0x11
     570:	88 23       	and	r24, r24
     572:	51 f0       	breq	.+20     	; 0x588 <prvUnlockQueue+0x2c>
     574:	ce 01       	movw	r24, r28
     576:	41 96       	adiw	r24, 0x11	; 17
     578:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     57c:	81 11       	cpse	r24, r1
     57e:	0e 94 34 0b 	call	0x1668	; 0x1668 <vTaskMissedYield>
     582:	11 50       	subi	r17, 0x01	; 1
     584:	11 16       	cp	r1, r17
     586:	9c f3       	brlt	.-26     	; 0x56e <prvUnlockQueue+0x12>
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	8e 8f       	std	Y+30, r24	; 0x1e
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	0f 92       	push	r0
     596:	1d 8d       	ldd	r17, Y+29	; 0x1d
     598:	0b c0       	rjmp	.+22     	; 0x5b0 <prvUnlockQueue+0x54>
     59a:	88 85       	ldd	r24, Y+8	; 0x08
     59c:	88 23       	and	r24, r24
     59e:	51 f0       	breq	.+20     	; 0x5b4 <prvUnlockQueue+0x58>
     5a0:	ce 01       	movw	r24, r28
     5a2:	08 96       	adiw	r24, 0x08	; 8
     5a4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     5a8:	81 11       	cpse	r24, r1
     5aa:	0e 94 34 0b 	call	0x1668	; 0x1668 <vTaskMissedYield>
     5ae:	11 50       	subi	r17, 0x01	; 1
     5b0:	11 16       	cp	r1, r17
     5b2:	9c f3       	brlt	.-26     	; 0x59a <prvUnlockQueue+0x3e>
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	8d 8f       	std	Y+29, r24	; 0x1d
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	08 95       	ret

000005c4 <xQueueGenericReset>:
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	fc 01       	movw	r30, r24
     5ce:	36 2f       	mov	r19, r22
     5d0:	89 2b       	or	r24, r25
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <xQueueGenericReset+0x12>
     5d4:	49 c0       	rjmp	.+146    	; 0x668 <xQueueGenericReset+0xa4>
     5d6:	23 8d       	ldd	r18, Z+27	; 0x1b
     5d8:	22 23       	and	r18, r18
     5da:	09 f4       	brne	.+2      	; 0x5de <xQueueGenericReset+0x1a>
     5dc:	47 c0       	rjmp	.+142    	; 0x66c <xQueueGenericReset+0xa8>
     5de:	02 2f       	mov	r16, r18
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	9f ef       	ldi	r25, 0xFF	; 255
     5e6:	b8 01       	movw	r22, r16
     5e8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__udivmodhi4>
     5ec:	44 8d       	ldd	r20, Z+28	; 0x1c
     5ee:	84 2f       	mov	r24, r20
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	68 17       	cp	r22, r24
     5f4:	79 07       	cpc	r23, r25
     5f6:	08 f4       	brcc	.+2      	; 0x5fa <xQueueGenericReset+0x36>
     5f8:	3b c0       	rjmp	.+118    	; 0x670 <xQueueGenericReset+0xac>
     5fa:	ef 01       	movw	r28, r30
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	0f 92       	push	r0
     602:	60 81       	ld	r22, Z
     604:	71 81       	ldd	r23, Z+1	; 0x01
     606:	fb 01       	movw	r30, r22
     608:	24 9f       	mul	r18, r20
     60a:	e0 0d       	add	r30, r0
     60c:	f1 1d       	adc	r31, r1
     60e:	11 24       	eor	r1, r1
     610:	fd 83       	std	Y+5, r31	; 0x05
     612:	ec 83       	std	Y+4, r30	; 0x04
     614:	1a 8e       	std	Y+26, r1	; 0x1a
     616:	7b 83       	std	Y+3, r23	; 0x03
     618:	6a 83       	std	Y+2, r22	; 0x02
     61a:	01 50       	subi	r16, 0x01	; 1
     61c:	11 09       	sbc	r17, r1
     61e:	80 9f       	mul	r24, r16
     620:	a0 01       	movw	r20, r0
     622:	81 9f       	mul	r24, r17
     624:	50 0d       	add	r21, r0
     626:	90 9f       	mul	r25, r16
     628:	50 0d       	add	r21, r0
     62a:	11 24       	eor	r1, r1
     62c:	cb 01       	movw	r24, r22
     62e:	84 0f       	add	r24, r20
     630:	95 1f       	adc	r25, r21
     632:	9f 83       	std	Y+7, r25	; 0x07
     634:	8e 83       	std	Y+6, r24	; 0x06
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	8d 8f       	std	Y+29, r24	; 0x1d
     63a:	8e 8f       	std	Y+30, r24	; 0x1e
     63c:	31 11       	cpse	r19, r1
     63e:	08 c0       	rjmp	.+16     	; 0x650 <xQueueGenericReset+0x8c>
     640:	88 85       	ldd	r24, Y+8	; 0x08
     642:	88 23       	and	r24, r24
     644:	69 f0       	breq	.+26     	; 0x660 <xQueueGenericReset+0x9c>
     646:	ce 01       	movw	r24, r28
     648:	08 96       	adiw	r24, 0x08	; 8
     64a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     64e:	08 c0       	rjmp	.+16     	; 0x660 <xQueueGenericReset+0x9c>
     650:	ce 01       	movw	r24, r28
     652:	08 96       	adiw	r24, 0x08	; 8
     654:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     658:	ce 01       	movw	r24, r28
     65a:	41 96       	adiw	r24, 0x11	; 17
     65c:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     660:	0f 90       	pop	r0
     662:	0f be       	out	0x3f, r0	; 63
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	05 c0       	rjmp	.+10     	; 0x672 <xQueueGenericReset+0xae>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	03 c0       	rjmp	.+6      	; 0x672 <xQueueGenericReset+0xae>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	01 c0       	rjmp	.+2      	; 0x672 <xQueueGenericReset+0xae>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <prvInitialiseNewQueue>:
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	f8 01       	movw	r30, r16
     682:	61 11       	cpse	r22, r1
     684:	03 c0       	rjmp	.+6      	; 0x68c <prvInitialiseNewQueue+0x10>
     686:	11 83       	std	Z+1, r17	; 0x01
     688:	00 83       	st	Z, r16
     68a:	02 c0       	rjmp	.+4      	; 0x690 <prvInitialiseNewQueue+0x14>
     68c:	51 83       	std	Z+1, r21	; 0x01
     68e:	40 83       	st	Z, r20
     690:	83 8f       	std	Z+27, r24	; 0x1b
     692:	64 8f       	std	Z+28, r22	; 0x1c
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	cf 01       	movw	r24, r30
     698:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <xQueueGenericReset>
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <xQueueGenericCreate>:
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	38 2f       	mov	r19, r24
     6b2:	e6 2f       	mov	r30, r22
     6b4:	88 23       	and	r24, r24
     6b6:	29 f1       	breq	.+74     	; 0x702 <xQueueGenericCreate+0x60>
     6b8:	68 2f       	mov	r22, r24
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__udivmodhi4>
     6c4:	8e 2f       	mov	r24, r30
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	68 17       	cp	r22, r24
     6ca:	79 07       	cpc	r23, r25
     6cc:	e8 f0       	brcs	.+58     	; 0x708 <xQueueGenericCreate+0x66>
     6ce:	3e 9f       	mul	r19, r30
     6d0:	c0 01       	movw	r24, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	81 3e       	cpi	r24, 0xE1	; 225
     6d6:	2f ef       	ldi	r18, 0xFF	; 255
     6d8:	92 07       	cpc	r25, r18
     6da:	c8 f4       	brcc	.+50     	; 0x70e <xQueueGenericCreate+0x6c>
     6dc:	d4 2e       	mov	r13, r20
     6de:	de 2f       	mov	r29, r30
     6e0:	c3 2f       	mov	r28, r19
     6e2:	4f 96       	adiw	r24, 0x1f	; 31
     6e4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
     6e8:	7c 01       	movw	r14, r24
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	91 f0       	breq	.+36     	; 0x712 <xQueueGenericCreate+0x70>
     6ee:	8c 01       	movw	r16, r24
     6f0:	2d 2d       	mov	r18, r13
     6f2:	ac 01       	movw	r20, r24
     6f4:	41 5e       	subi	r20, 0xE1	; 225
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	6d 2f       	mov	r22, r29
     6fa:	8c 2f       	mov	r24, r28
     6fc:	0e 94 3e 03 	call	0x67c	; 0x67c <prvInitialiseNewQueue>
     700:	08 c0       	rjmp	.+16     	; 0x712 <xQueueGenericCreate+0x70>
     702:	e1 2c       	mov	r14, r1
     704:	f1 2c       	mov	r15, r1
     706:	05 c0       	rjmp	.+10     	; 0x712 <xQueueGenericCreate+0x70>
     708:	e1 2c       	mov	r14, r1
     70a:	f1 2c       	mov	r15, r1
     70c:	02 c0       	rjmp	.+4      	; 0x712 <xQueueGenericCreate+0x70>
     70e:	e1 2c       	mov	r14, r1
     710:	f1 2c       	mov	r15, r1
     712:	c7 01       	movw	r24, r14
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	08 95       	ret

00000724 <xQueueGenericSend>:
     724:	cf 92       	push	r12
     726:	df 92       	push	r13
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <xQueueGenericSend+0x12>
     736:	00 d0       	rcall	.+0      	; 0x738 <xQueueGenericSend+0x14>
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8c 01       	movw	r16, r24
     740:	7b 01       	movw	r14, r22
     742:	5d 83       	std	Y+5, r21	; 0x05
     744:	4c 83       	std	Y+4, r20	; 0x04
     746:	c2 2e       	mov	r12, r18
     748:	d1 2c       	mov	r13, r1
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	0f 92       	push	r0
     750:	f8 01       	movw	r30, r16
     752:	92 8d       	ldd	r25, Z+26	; 0x1a
     754:	83 8d       	ldd	r24, Z+27	; 0x1b
     756:	98 17       	cp	r25, r24
     758:	18 f0       	brcs	.+6      	; 0x760 <xQueueGenericSend+0x3c>
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	cf 12       	cpse	r12, r31
     75e:	11 c0       	rjmp	.+34     	; 0x782 <xQueueGenericSend+0x5e>
     760:	4c 2d       	mov	r20, r12
     762:	b7 01       	movw	r22, r14
     764:	c8 01       	movw	r24, r16
     766:	0e 94 4b 02 	call	0x496	; 0x496 <prvCopyDataToQueue>
     76a:	f8 01       	movw	r30, r16
     76c:	81 89       	ldd	r24, Z+17	; 0x11
     76e:	88 23       	and	r24, r24
     770:	21 f0       	breq	.+8      	; 0x77a <xQueueGenericSend+0x56>
     772:	c8 01       	movw	r24, r16
     774:	41 96       	adiw	r24, 0x11	; 17
     776:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	4d c0       	rjmp	.+154    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	89 2b       	or	r24, r25
     788:	21 f4       	brne	.+8      	; 0x792 <xQueueGenericSend+0x6e>
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	45 c0       	rjmp	.+138    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     792:	d1 10       	cpse	r13, r1
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <xQueueGenericSend+0x7e>
     796:	ce 01       	movw	r24, r28
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskInternalSetTimeOutState>
     79e:	dd 24       	eor	r13, r13
     7a0:	d3 94       	inc	r13
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	0f 92       	push	r0
     7b0:	f8 01       	movw	r30, r16
     7b2:	85 8d       	ldd	r24, Z+29	; 0x1d
     7b4:	8f 3f       	cpi	r24, 0xFF	; 255
     7b6:	09 f4       	brne	.+2      	; 0x7ba <xQueueGenericSend+0x96>
     7b8:	15 8e       	std	Z+29, r1	; 0x1d
     7ba:	f8 01       	movw	r30, r16
     7bc:	86 8d       	ldd	r24, Z+30	; 0x1e
     7be:	8f 3f       	cpi	r24, 0xFF	; 255
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <xQueueGenericSend+0xa0>
     7c2:	16 8e       	std	Z+30, r1	; 0x1e
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	be 01       	movw	r22, r28
     7ca:	6c 5f       	subi	r22, 0xFC	; 252
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	ce 01       	movw	r24, r28
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	0e 94 02 0b 	call	0x1604	; 0x1604 <xTaskCheckForTimeOut>
     7d6:	81 11       	cpse	r24, r1
     7d8:	1b c0       	rjmp	.+54     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7da:	c8 01       	movw	r24, r16
     7dc:	0e 94 3d 02 	call	0x47a	; 0x47a <prvIsQueueFull>
     7e0:	88 23       	and	r24, r24
     7e2:	81 f0       	breq	.+32     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7e4:	6c 81       	ldd	r22, Y+4	; 0x04
     7e6:	7d 81       	ldd	r23, Y+5	; 0x05
     7e8:	c8 01       	movw	r24, r16
     7ea:	08 96       	adiw	r24, 0x08	; 8
     7ec:	0e 94 28 0a 	call	0x1450	; 0x1450 <vTaskPlaceOnEventList>
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     7f6:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     7fa:	81 11       	cpse	r24, r1
     7fc:	a6 cf       	rjmp	.-180    	; 0x74a <xQueueGenericSend+0x26>
     7fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     802:	a3 cf       	rjmp	.-186    	; 0x74a <xQueueGenericSend+0x26>
     804:	c8 01       	movw	r24, r16
     806:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     80a:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     80e:	9d cf       	rjmp	.-198    	; 0x74a <xQueueGenericSend+0x26>
     810:	c8 01       	movw	r24, r16
     812:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     816:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	08 95       	ret

00000838 <xQueueReceive>:
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <xQueueReceive+0x12>
     84a:	00 d0       	rcall	.+0      	; 0x84c <xQueueReceive+0x14>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	8c 01       	movw	r16, r24
     854:	6b 01       	movw	r12, r22
     856:	5d 83       	std	Y+5, r21	; 0x05
     858:	4c 83       	std	Y+4, r20	; 0x04
     85a:	e1 2c       	mov	r14, r1
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	0f 92       	push	r0
     862:	f8 01       	movw	r30, r16
     864:	f2 8c       	ldd	r15, Z+26	; 0x1a
     866:	ff 20       	and	r15, r15
     868:	91 f0       	breq	.+36     	; 0x88e <__stack+0x2f>
     86a:	b6 01       	movw	r22, r12
     86c:	c8 01       	movw	r24, r16
     86e:	0e 94 94 02 	call	0x528	; 0x528 <prvCopyDataFromQueue>
     872:	fa 94       	dec	r15
     874:	f8 01       	movw	r30, r16
     876:	f2 8e       	std	Z+26, r15	; 0x1a
     878:	80 85       	ldd	r24, Z+8	; 0x08
     87a:	88 23       	and	r24, r24
     87c:	21 f0       	breq	.+8      	; 0x886 <__stack+0x27>
     87e:	c8 01       	movw	r24, r16
     880:	08 96       	adiw	r24, 0x08	; 8
     882:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	53 c0       	rjmp	.+166    	; 0x934 <__stack+0xd5>
     88e:	8c 81       	ldd	r24, Y+4	; 0x04
     890:	9d 81       	ldd	r25, Y+5	; 0x05
     892:	89 2b       	or	r24, r25
     894:	21 f4       	brne	.+8      	; 0x89e <__stack+0x3f>
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	4b c0       	rjmp	.+150    	; 0x934 <__stack+0xd5>
     89e:	e1 10       	cpse	r14, r1
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__stack+0x4f>
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskInternalSetTimeOutState>
     8aa:	ee 24       	eor	r14, r14
     8ac:	e3 94       	inc	r14
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	0f 92       	push	r0
     8bc:	f8 01       	movw	r30, r16
     8be:	85 8d       	ldd	r24, Z+29	; 0x1d
     8c0:	8f 3f       	cpi	r24, 0xFF	; 255
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <__stack+0x67>
     8c4:	15 8e       	std	Z+29, r1	; 0x1d
     8c6:	f8 01       	movw	r30, r16
     8c8:	86 8d       	ldd	r24, Z+30	; 0x1e
     8ca:	8f 3f       	cpi	r24, 0xFF	; 255
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <__stack+0x71>
     8ce:	16 8e       	std	Z+30, r1	; 0x1e
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	be 01       	movw	r22, r28
     8d6:	6c 5f       	subi	r22, 0xFC	; 252
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	0e 94 02 0b 	call	0x1604	; 0x1604 <xTaskCheckForTimeOut>
     8e2:	81 11       	cpse	r24, r1
     8e4:	1b c0       	rjmp	.+54     	; 0x91c <__stack+0xbd>
     8e6:	c8 01       	movw	r24, r16
     8e8:	0e 94 30 02 	call	0x460	; 0x460 <prvIsQueueEmpty>
     8ec:	88 23       	and	r24, r24
     8ee:	81 f0       	breq	.+32     	; 0x910 <__stack+0xb1>
     8f0:	6c 81       	ldd	r22, Y+4	; 0x04
     8f2:	7d 81       	ldd	r23, Y+5	; 0x05
     8f4:	c8 01       	movw	r24, r16
     8f6:	41 96       	adiw	r24, 0x11	; 17
     8f8:	0e 94 28 0a 	call	0x1450	; 0x1450 <vTaskPlaceOnEventList>
     8fc:	c8 01       	movw	r24, r16
     8fe:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     902:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     906:	81 11       	cpse	r24, r1
     908:	a9 cf       	rjmp	.-174    	; 0x85c <xQueueReceive+0x24>
     90a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     90e:	a6 cf       	rjmp	.-180    	; 0x85c <xQueueReceive+0x24>
     910:	c8 01       	movw	r24, r16
     912:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     916:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     91a:	a0 cf       	rjmp	.-192    	; 0x85c <xQueueReceive+0x24>
     91c:	c8 01       	movw	r24, r16
     91e:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     922:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     926:	c8 01       	movw	r24, r16
     928:	0e 94 30 02 	call	0x460	; 0x460 <prvIsQueueEmpty>
     92c:	88 23       	and	r24, r24
     92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0xd3>
     930:	95 cf       	rjmp	.-214    	; 0x85c <xQueueReceive+0x24>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <xQueueSemaphoreTake>:
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	00 d0       	rcall	.+0      	; 0x95c <xQueueSemaphoreTake+0xc>
     95c:	00 d0       	rcall	.+0      	; 0x95e <xQueueSemaphoreTake+0xe>
     95e:	1f 92       	push	r1
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	8c 01       	movw	r16, r24
     966:	7d 83       	std	Y+5, r23	; 0x05
     968:	6c 83       	std	Y+4, r22	; 0x04
     96a:	f1 2c       	mov	r15, r1
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	0f 92       	push	r0
     972:	f8 01       	movw	r30, r16
     974:	82 8d       	ldd	r24, Z+26	; 0x1a
     976:	88 23       	and	r24, r24
     978:	69 f0       	breq	.+26     	; 0x994 <xQueueSemaphoreTake+0x44>
     97a:	81 50       	subi	r24, 0x01	; 1
     97c:	82 8f       	std	Z+26, r24	; 0x1a
     97e:	80 85       	ldd	r24, Z+8	; 0x08
     980:	88 23       	and	r24, r24
     982:	21 f0       	breq	.+8      	; 0x98c <xQueueSemaphoreTake+0x3c>
     984:	c8 01       	movw	r24, r16
     986:	08 96       	adiw	r24, 0x08	; 8
     988:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xTaskRemoveFromEventList>
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	53 c0       	rjmp	.+166    	; 0xa3a <xQueueSemaphoreTake+0xea>
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	9d 81       	ldd	r25, Y+5	; 0x05
     998:	89 2b       	or	r24, r25
     99a:	21 f4       	brne	.+8      	; 0x9a4 <xQueueSemaphoreTake+0x54>
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	4b c0       	rjmp	.+150    	; 0xa3a <xQueueSemaphoreTake+0xea>
     9a4:	f1 10       	cpse	r15, r1
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <xQueueSemaphoreTake+0x64>
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskInternalSetTimeOutState>
     9b0:	ff 24       	eor	r15, r15
     9b2:	f3 94       	inc	r15
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	0f 92       	push	r0
     9c2:	f8 01       	movw	r30, r16
     9c4:	85 8d       	ldd	r24, Z+29	; 0x1d
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	09 f4       	brne	.+2      	; 0x9cc <xQueueSemaphoreTake+0x7c>
     9ca:	15 8e       	std	Z+29, r1	; 0x1d
     9cc:	f8 01       	movw	r30, r16
     9ce:	86 8d       	ldd	r24, Z+30	; 0x1e
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <xQueueSemaphoreTake+0x86>
     9d4:	16 8e       	std	Z+30, r1	; 0x1e
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	be 01       	movw	r22, r28
     9dc:	6c 5f       	subi	r22, 0xFC	; 252
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 02 0b 	call	0x1604	; 0x1604 <xTaskCheckForTimeOut>
     9e8:	81 11       	cpse	r24, r1
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <xQueueSemaphoreTake+0xd2>
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 30 02 	call	0x460	; 0x460 <prvIsQueueEmpty>
     9f2:	88 23       	and	r24, r24
     9f4:	81 f0       	breq	.+32     	; 0xa16 <xQueueSemaphoreTake+0xc6>
     9f6:	6c 81       	ldd	r22, Y+4	; 0x04
     9f8:	7d 81       	ldd	r23, Y+5	; 0x05
     9fa:	c8 01       	movw	r24, r16
     9fc:	41 96       	adiw	r24, 0x11	; 17
     9fe:	0e 94 28 0a 	call	0x1450	; 0x1450 <vTaskPlaceOnEventList>
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     a08:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     a0c:	81 11       	cpse	r24, r1
     a0e:	ae cf       	rjmp	.-164    	; 0x96c <xQueueSemaphoreTake+0x1c>
     a10:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     a14:	ab cf       	rjmp	.-170    	; 0x96c <xQueueSemaphoreTake+0x1c>
     a16:	c8 01       	movw	r24, r16
     a18:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     a1c:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     a20:	a5 cf       	rjmp	.-182    	; 0x96c <xQueueSemaphoreTake+0x1c>
     a22:	c8 01       	movw	r24, r16
     a24:	0e 94 ae 02 	call	0x55c	; 0x55c <prvUnlockQueue>
     a28:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 30 02 	call	0x460	; 0x460 <prvIsQueueEmpty>
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <xQueueSemaphoreTake+0xe8>
     a36:	9a cf       	rjmp	.-204    	; 0x96c <xQueueSemaphoreTake+0x1c>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	08 95       	ret

00000a50 <prvResetNextTaskUnblockTime>:
     a50:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <pxDelayedTaskList>
     a54:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
     a58:	80 81       	ld	r24, Z
     a5a:	81 11       	cpse	r24, r1
     a5c:	07 c0       	rjmp	.+14     	; 0xa6c <prvResetNextTaskUnblockTime+0x1c>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	9f ef       	ldi	r25, 0xFF	; 255
     a62:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <xNextTaskUnblockTime+0x1>
     a66:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xNextTaskUnblockTime>
     a6a:	08 95       	ret
     a6c:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <pxDelayedTaskList>
     a70:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
     a74:	05 80       	ldd	r0, Z+5	; 0x05
     a76:	f6 81       	ldd	r31, Z+6	; 0x06
     a78:	e0 2d       	mov	r30, r0
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <xNextTaskUnblockTime+0x1>
     a82:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xNextTaskUnblockTime>
     a86:	08 95       	ret

00000a88 <prvDeleteTCB>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <prvInitialiseNewTask>:
     aa2:	6f 92       	push	r6
     aa4:	7f 92       	push	r7
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	4c 01       	movw	r8, r24
     ac2:	f5 01       	movw	r30, r10
     ac4:	87 89       	ldd	r24, Z+23	; 0x17
     ac6:	90 8d       	ldd	r25, Z+24	; 0x18
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
     acc:	3c 01       	movw	r6, r24
     ace:	62 0e       	add	r6, r18
     ad0:	73 1e       	adc	r7, r19
     ad2:	61 15       	cp	r22, r1
     ad4:	71 05       	cpc	r23, r1
     ad6:	89 f4       	brne	.+34     	; 0xafa <prvInitialiseNewTask+0x58>
     ad8:	15 c0       	rjmp	.+42     	; 0xb04 <prvInitialiseNewTask+0x62>
     ada:	82 2f       	mov	r24, r18
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fb 01       	movw	r30, r22
     ae0:	e8 0f       	add	r30, r24
     ae2:	f9 1f       	adc	r31, r25
     ae4:	30 81       	ld	r19, Z
     ae6:	d5 01       	movw	r26, r10
     ae8:	a8 0f       	add	r26, r24
     aea:	b9 1f       	adc	r27, r25
     aec:	59 96       	adiw	r26, 0x19	; 25
     aee:	3c 93       	st	X, r19
     af0:	80 81       	ld	r24, Z
     af2:	88 23       	and	r24, r24
     af4:	29 f0       	breq	.+10     	; 0xb00 <prvInitialiseNewTask+0x5e>
     af6:	2f 5f       	subi	r18, 0xFF	; 255
     af8:	01 c0       	rjmp	.+2      	; 0xafc <prvInitialiseNewTask+0x5a>
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	28 30       	cpi	r18, 0x08	; 8
     afe:	68 f3       	brcs	.-38     	; 0xada <prvInitialiseNewTask+0x38>
     b00:	f5 01       	movw	r30, r10
     b02:	10 a2       	std	Z+32, r1	; 0x20
     b04:	f3 e0       	ldi	r31, 0x03	; 3
     b06:	fe 15       	cp	r31, r14
     b08:	20 f4       	brcc	.+8      	; 0xb12 <prvInitialiseNewTask+0x70>
     b0a:	0f 2e       	mov	r0, r31
     b0c:	f3 e0       	ldi	r31, 0x03	; 3
     b0e:	ef 2e       	mov	r14, r31
     b10:	f0 2d       	mov	r31, r0
     b12:	f5 01       	movw	r30, r10
     b14:	e6 8a       	std	Z+22, r14	; 0x16
     b16:	c5 01       	movw	r24, r10
     b18:	02 96       	adiw	r24, 0x02	; 2
     b1a:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     b1e:	c5 01       	movw	r24, r10
     b20:	0c 96       	adiw	r24, 0x0c	; 12
     b22:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     b26:	f5 01       	movw	r30, r10
     b28:	b1 86       	std	Z+9, r11	; 0x09
     b2a:	a0 86       	std	Z+8, r10	; 0x08
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	8e 19       	sub	r24, r14
     b32:	91 09       	sbc	r25, r1
     b34:	95 87       	std	Z+13, r25	; 0x0d
     b36:	84 87       	std	Z+12, r24	; 0x0c
     b38:	b3 8a       	std	Z+19, r11	; 0x13
     b3a:	a2 8a       	std	Z+18, r10	; 0x12
     b3c:	a8 01       	movw	r20, r16
     b3e:	b4 01       	movw	r22, r8
     b40:	c3 01       	movw	r24, r6
     b42:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pxPortInitialiseStack>
     b46:	f5 01       	movw	r30, r10
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	80 83       	st	Z, r24
     b4c:	c1 14       	cp	r12, r1
     b4e:	d1 04       	cpc	r13, r1
     b50:	19 f0       	breq	.+6      	; 0xb58 <prvInitialiseNewTask+0xb6>
     b52:	f6 01       	movw	r30, r12
     b54:	b1 82       	std	Z+1, r11	; 0x01
     b56:	a0 82       	st	Z, r10
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	bf 90       	pop	r11
     b68:	af 90       	pop	r10
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	7f 90       	pop	r7
     b70:	6f 90       	pop	r6
     b72:	08 95       	ret

00000b74 <prvInitialiseTaskLists>:
     b74:	cf 93       	push	r28
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	10 c0       	rjmp	.+32     	; 0xb9a <prvInitialiseTaskLists+0x26>
     b7a:	8c 2f       	mov	r24, r28
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9c 01       	movw	r18, r24
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	82 0f       	add	r24, r18
     b8e:	93 1f       	adc	r25, r19
     b90:	82 5b       	subi	r24, 0xB2	; 178
     b92:	98 4f       	sbci	r25, 0xF8	; 248
     b94:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     b98:	cf 5f       	subi	r28, 0xFF	; 255
     b9a:	c4 30       	cpi	r28, 0x04	; 4
     b9c:	70 f3       	brcs	.-36     	; 0xb7a <prvInitialiseTaskLists+0x6>
     b9e:	85 e4       	ldi	r24, 0x45	; 69
     ba0:	97 e0       	ldi	r25, 0x07	; 7
     ba2:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     ba6:	8c e3       	ldi	r24, 0x3C	; 60
     ba8:	97 e0       	ldi	r25, 0x07	; 7
     baa:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     bae:	8f e2       	ldi	r24, 0x2F	; 47
     bb0:	97 e0       	ldi	r25, 0x07	; 7
     bb2:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     bb6:	86 e2       	ldi	r24, 0x26	; 38
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     bbe:	85 e4       	ldi	r24, 0x45	; 69
     bc0:	97 e0       	ldi	r25, 0x07	; 7
     bc2:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <pxDelayedTaskList+0x1>
     bc6:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <pxDelayedTaskList>
     bca:	8c e3       	ldi	r24, 0x3C	; 60
     bcc:	97 e0       	ldi	r25, 0x07	; 7
     bce:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <pxOverflowDelayedTaskList+0x1>
     bd2:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pxOverflowDelayedTaskList>
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <prvAddNewTaskToReadyList>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	0f 92       	push	r0
     be6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxCurrentNumberOfTasks>
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxCurrentNumberOfTasks>
     bf0:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     bf4:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     bf8:	89 2b       	or	r24, r25
     bfa:	59 f4       	brne	.+22     	; 0xc12 <prvAddNewTaskToReadyList+0x38>
     bfc:	d0 93 73 07 	sts	0x0773, r29	; 0x800773 <pxCurrentTCB+0x1>
     c00:	c0 93 72 07 	sts	0x0772, r28	; 0x800772 <pxCurrentTCB>
     c04:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxCurrentNumberOfTasks>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	99 f4       	brne	.+38     	; 0xc32 <prvAddNewTaskToReadyList+0x58>
     c0c:	0e 94 ba 05 	call	0xb74	; 0xb74 <prvInitialiseTaskLists>
     c10:	10 c0       	rjmp	.+32     	; 0xc32 <prvAddNewTaskToReadyList+0x58>
     c12:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xSchedulerRunning>
     c16:	81 11       	cpse	r24, r1
     c18:	0c c0       	rjmp	.+24     	; 0xc32 <prvAddNewTaskToReadyList+0x58>
     c1a:	e0 91 72 07 	lds	r30, 0x0772	; 0x800772 <pxCurrentTCB>
     c1e:	f0 91 73 07 	lds	r31, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     c22:	96 89       	ldd	r25, Z+22	; 0x16
     c24:	8e 89       	ldd	r24, Y+22	; 0x16
     c26:	89 17       	cp	r24, r25
     c28:	20 f0       	brcs	.+8      	; 0xc32 <prvAddNewTaskToReadyList+0x58>
     c2a:	d0 93 73 07 	sts	0x0773, r29	; 0x800773 <pxCurrentTCB+0x1>
     c2e:	c0 93 72 07 	sts	0x0772, r28	; 0x800772 <pxCurrentTCB>
     c32:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTaskNumber>
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTaskNumber>
     c3c:	8e 89       	ldd	r24, Y+22	; 0x16
     c3e:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <uxTopReadyPriority>
     c42:	98 17       	cp	r25, r24
     c44:	10 f4       	brcc	.+4      	; 0xc4a <prvAddNewTaskToReadyList+0x70>
     c46:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxTopReadyPriority>
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	fc 01       	movw	r30, r24
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	8e 0f       	add	r24, r30
     c5c:	9f 1f       	adc	r25, r31
     c5e:	fc 01       	movw	r30, r24
     c60:	e2 5b       	subi	r30, 0xB2	; 178
     c62:	f8 4f       	sbci	r31, 0xF8	; 248
     c64:	01 80       	ldd	r0, Z+1	; 0x01
     c66:	f2 81       	ldd	r31, Z+2	; 0x02
     c68:	e0 2d       	mov	r30, r0
     c6a:	fd 83       	std	Y+5, r31	; 0x05
     c6c:	ec 83       	std	Y+4, r30	; 0x04
     c6e:	84 81       	ldd	r24, Z+4	; 0x04
     c70:	95 81       	ldd	r25, Z+5	; 0x05
     c72:	9f 83       	std	Y+7, r25	; 0x07
     c74:	8e 83       	std	Y+6, r24	; 0x06
     c76:	a4 81       	ldd	r26, Z+4	; 0x04
     c78:	b5 81       	ldd	r27, Z+5	; 0x05
     c7a:	ce 01       	movw	r24, r28
     c7c:	02 96       	adiw	r24, 0x02	; 2
     c7e:	13 96       	adiw	r26, 0x03	; 3
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
     c84:	12 97       	sbiw	r26, 0x02	; 2
     c86:	95 83       	std	Z+5, r25	; 0x05
     c88:	84 83       	std	Z+4, r24	; 0x04
     c8a:	ee 89       	ldd	r30, Y+22	; 0x16
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	cf 01       	movw	r24, r30
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	e8 0f       	add	r30, r24
     c9e:	f9 1f       	adc	r31, r25
     ca0:	e2 5b       	subi	r30, 0xB2	; 178
     ca2:	f8 4f       	sbci	r31, 0xF8	; 248
     ca4:	fb 87       	std	Y+11, r31	; 0x0b
     ca6:	ea 87       	std	Y+10, r30	; 0x0a
     ca8:	80 81       	ld	r24, Z
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xSchedulerRunning>
     cb6:	88 23       	and	r24, r24
     cb8:	21 f0       	breq	.+8      	; 0xcc2 <prvAddNewTaskToReadyList+0xe8>
     cba:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     cbe:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <prvCheckTasksWaitingTermination>:
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	1c c0       	rjmp	.+56     	; 0xd06 <prvCheckTasksWaitingTermination+0x3e>
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	0f 92       	push	r0
     cd4:	e0 91 2b 07 	lds	r30, 0x072B	; 0x80072b <xTasksWaitingTermination+0x5>
     cd8:	f0 91 2c 07 	lds	r31, 0x072C	; 0x80072c <xTasksWaitingTermination+0x6>
     cdc:	c6 81       	ldd	r28, Z+6	; 0x06
     cde:	d7 81       	ldd	r29, Z+7	; 0x07
     ce0:	ce 01       	movw	r24, r28
     ce2:	02 96       	adiw	r24, 0x02	; 2
     ce4:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     ce8:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxCurrentNumberOfTasks>
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxCurrentNumberOfTasks>
     cf2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxDeletedTasksWaitingCleanUp>
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <uxDeletedTasksWaitingCleanUp>
     cfc:	0f 90       	pop	r0
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 44 05 	call	0xa88	; 0xa88 <prvDeleteTCB>
     d06:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxDeletedTasksWaitingCleanUp>
     d0a:	81 11       	cpse	r24, r1
     d0c:	e0 cf       	rjmp	.-64     	; 0xcce <prvCheckTasksWaitingTermination+0x6>
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <prvIdleTask>:
     d14:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvCheckTasksWaitingTermination>
     d18:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     d1c:	fb cf       	rjmp	.-10     	; 0xd14 <prvIdleTask>

00000d1e <prvAddCurrentTaskToDelayedList>:
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
     d28:	00 91 22 07 	lds	r16, 0x0722	; 0x800722 <xTickCount>
     d2c:	10 91 23 07 	lds	r17, 0x0723	; 0x800723 <xTickCount+0x1>
     d30:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     d34:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     d3e:	c0 0f       	add	r28, r16
     d40:	d1 1f       	adc	r29, r17
     d42:	e0 91 72 07 	lds	r30, 0x0772	; 0x800772 <pxCurrentTCB>
     d46:	f0 91 73 07 	lds	r31, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     d4a:	d3 83       	std	Z+3, r29	; 0x03
     d4c:	c2 83       	std	Z+2, r28	; 0x02
     d4e:	c0 17       	cp	r28, r16
     d50:	d1 07       	cpc	r29, r17
     d52:	68 f4       	brcc	.+26     	; 0xd6e <prvAddCurrentTaskToDelayedList+0x50>
     d54:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <pxCurrentTCB>
     d58:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     d5c:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pxOverflowDelayedTaskList>
     d60:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <pxOverflowDelayedTaskList+0x1>
     d64:	6e 5f       	subi	r22, 0xFE	; 254
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     d6c:	17 c0       	rjmp	.+46     	; 0xd9c <prvAddCurrentTaskToDelayedList+0x7e>
     d6e:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <pxCurrentTCB>
     d72:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     d76:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <pxDelayedTaskList>
     d7a:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
     d7e:	6e 5f       	subi	r22, 0xFE	; 254
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     d86:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xNextTaskUnblockTime>
     d8a:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <xNextTaskUnblockTime+0x1>
     d8e:	c8 17       	cp	r28, r24
     d90:	d9 07       	cpc	r29, r25
     d92:	20 f4       	brcc	.+8      	; 0xd9c <prvAddCurrentTaskToDelayedList+0x7e>
     d94:	d0 93 1a 07 	sts	0x071A, r29	; 0x80071a <xNextTaskUnblockTime+0x1>
     d98:	c0 93 19 07 	sts	0x0719, r28	; 0x800719 <xNextTaskUnblockTime>
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	08 95       	ret

00000da6 <xTaskCreate>:
     da6:	2f 92       	push	r2
     da8:	3f 92       	push	r3
     daa:	4f 92       	push	r4
     dac:	5f 92       	push	r5
     dae:	6f 92       	push	r6
     db0:	7f 92       	push	r7
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	3c 01       	movw	r6, r24
     dcc:	1b 01       	movw	r2, r22
     dce:	5a 01       	movw	r10, r20
     dd0:	29 01       	movw	r4, r18
     dd2:	ca 01       	movw	r24, r20
     dd4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
     dd8:	6c 01       	movw	r12, r24
     dda:	89 2b       	or	r24, r25
     ddc:	99 f0       	breq	.+38     	; 0xe04 <xTaskCreate+0x5e>
     dde:	86 e2       	ldi	r24, 0x26	; 38
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
     de6:	ec 01       	movw	r28, r24
     de8:	89 2b       	or	r24, r25
     dea:	41 f0       	breq	.+16     	; 0xdfc <xTaskCreate+0x56>
     dec:	86 e2       	ldi	r24, 0x26	; 38
     dee:	fe 01       	movw	r30, r28
     df0:	11 92       	st	Z+, r1
     df2:	8a 95       	dec	r24
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <xTaskCreate+0x4a>
     df6:	d8 8e       	std	Y+24, r13	; 0x18
     df8:	cf 8a       	std	Y+23, r12	; 0x17
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <xTaskCreate+0x62>
     dfc:	c6 01       	movw	r24, r12
     dfe:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <xTaskCreate+0x62>
     e04:	c0 e0       	ldi	r28, 0x00	; 0
     e06:	d0 e0       	ldi	r29, 0x00	; 0
     e08:	20 97       	sbiw	r28, 0x00	; 0
     e0a:	91 f0       	breq	.+36     	; 0xe30 <xTaskCreate+0x8a>
     e0c:	95 01       	movw	r18, r10
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	81 2c       	mov	r8, r1
     e14:	91 2c       	mov	r9, r1
     e16:	5e 01       	movw	r10, r28
     e18:	67 01       	movw	r12, r14
     e1a:	e0 2e       	mov	r14, r16
     e1c:	82 01       	movw	r16, r4
     e1e:	b1 01       	movw	r22, r2
     e20:	c3 01       	movw	r24, r6
     e22:	0e 94 51 05 	call	0xaa2	; 0xaa2 <prvInitialiseNewTask>
     e26:	ce 01       	movw	r24, r28
     e28:	0e 94 ed 05 	call	0xbda	; 0xbda <prvAddNewTaskToReadyList>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <xTaskCreate+0x8c>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	3f 90       	pop	r3
     e54:	2f 90       	pop	r2
     e56:	08 95       	ret

00000e58 <vTaskDelete>:
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ec 01       	movw	r28, r24
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	0f 92       	push	r0
     e68:	89 2b       	or	r24, r25
     e6a:	21 f4       	brne	.+8      	; 0xe74 <vTaskDelete+0x1c>
     e6c:	c0 91 72 07 	lds	r28, 0x0772	; 0x800772 <pxCurrentTCB>
     e70:	d0 91 73 07 	lds	r29, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     e74:	8e 01       	movw	r16, r28
     e76:	0e 5f       	subi	r16, 0xFE	; 254
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     e80:	8c 89       	ldd	r24, Y+20	; 0x14
     e82:	9d 89       	ldd	r25, Y+21	; 0x15
     e84:	89 2b       	or	r24, r25
     e86:	21 f0       	breq	.+8      	; 0xe90 <vTaskDelete+0x38>
     e88:	ce 01       	movw	r24, r28
     e8a:	0c 96       	adiw	r24, 0x0c	; 12
     e8c:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     e90:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <uxTaskNumber>
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <uxTaskNumber>
     e9a:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     e9e:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     ea2:	c8 17       	cp	r28, r24
     ea4:	d9 07       	cpc	r29, r25
     ea6:	59 f4       	brne	.+22     	; 0xebe <vTaskDelete+0x66>
     ea8:	b8 01       	movw	r22, r16
     eaa:	86 e2       	ldi	r24, 0x26	; 38
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     eb2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <uxDeletedTasksWaitingCleanUp>
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <uxDeletedTasksWaitingCleanUp>
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <vTaskDelete+0x74>
     ebe:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxCurrentNumberOfTasks>
     ec2:	81 50       	subi	r24, 0x01	; 1
     ec4:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <uxCurrentNumberOfTasks>
     ec8:	0e 94 28 05 	call	0xa50	; 0xa50 <prvResetNextTaskUnblockTime>
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     ed4:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     ed8:	c8 17       	cp	r28, r24
     eda:	d9 07       	cpc	r29, r25
     edc:	19 f0       	breq	.+6      	; 0xee4 <vTaskDelete+0x8c>
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 44 05 	call	0xa88	; 0xa88 <prvDeleteTCB>
     ee4:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xSchedulerRunning>
     ee8:	88 23       	and	r24, r24
     eea:	49 f0       	breq	.+18     	; 0xefe <vTaskDelete+0xa6>
     eec:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <pxCurrentTCB>
     ef0:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
     ef4:	c8 17       	cp	r28, r24
     ef6:	d9 07       	cpc	r29, r25
     ef8:	11 f4       	brne	.+4      	; 0xefe <vTaskDelete+0xa6>
     efa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <vTaskStartScheduler>:
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	0f 2e       	mov	r0, r31
     f10:	f7 e1       	ldi	r31, 0x17	; 23
     f12:	ef 2e       	mov	r14, r31
     f14:	f7 e0       	ldi	r31, 0x07	; 7
     f16:	ff 2e       	mov	r15, r31
     f18:	f0 2d       	mov	r31, r0
     f1a:	00 e0       	ldi	r16, 0x00	; 0
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	45 e5       	ldi	r20, 0x55	; 85
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	60 eb       	ldi	r22, 0xB0	; 176
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	8a e8       	ldi	r24, 0x8A	; 138
     f2a:	96 e0       	ldi	r25, 0x06	; 6
     f2c:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskCreate>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	81 f4       	brne	.+32     	; 0xf54 <vTaskStartScheduler+0x4c>
     f34:	f8 94       	cli
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <xNextTaskUnblockTime+0x1>
     f3e:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xNextTaskUnblockTime>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xSchedulerRunning>
     f48:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <xTickCount+0x1>
     f4c:	10 92 22 07 	sts	0x0722, r1	; 0x800722 <xTickCount>
     f50:	0e 94 49 01 	call	0x292	; 0x292 <xPortStartScheduler>
     f54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	08 95       	ret

00000f60 <vTaskSuspendAll>:
     f60:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxSchedulerSuspended>
     f6a:	08 95       	ret

00000f6c <xTaskGetTickCount>:
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	0f 92       	push	r0
     f72:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <xTickCount>
     f76:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <xTickCount+0x1>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	08 95       	ret

00000f80 <xTaskIncrementTick>:
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
     f8c:	81 11       	cpse	r24, r1
     f8e:	d8 c0       	rjmp	.+432    	; 0x1140 <xTaskIncrementTick+0x1c0>
     f90:	c0 91 22 07 	lds	r28, 0x0722	; 0x800722 <xTickCount>
     f94:	d0 91 23 07 	lds	r29, 0x0723	; 0x800723 <xTickCount+0x1>
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	10 93 23 07 	sts	0x0723, r17	; 0x800723 <xTickCount+0x1>
     fa2:	00 93 22 07 	sts	0x0722, r16	; 0x800722 <xTickCount>
     fa6:	01 15       	cp	r16, r1
     fa8:	11 05       	cpc	r17, r1
     faa:	b9 f4       	brne	.+46     	; 0xfda <xTaskIncrementTick+0x5a>
     fac:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <pxDelayedTaskList>
     fb0:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
     fb4:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <pxOverflowDelayedTaskList>
     fb8:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <pxOverflowDelayedTaskList+0x1>
     fbc:	30 93 3b 07 	sts	0x073B, r19	; 0x80073b <pxDelayedTaskList+0x1>
     fc0:	20 93 3a 07 	sts	0x073A, r18	; 0x80073a <pxDelayedTaskList>
     fc4:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <pxOverflowDelayedTaskList+0x1>
     fc8:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pxOverflowDelayedTaskList>
     fcc:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xNumOfOverflows>
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNumOfOverflows>
     fd6:	0e 94 28 05 	call	0xa50	; 0xa50 <prvResetNextTaskUnblockTime>
     fda:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <xNextTaskUnblockTime>
     fde:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <xNextTaskUnblockTime+0x1>
     fe2:	08 17       	cp	r16, r24
     fe4:	19 07       	cpc	r17, r25
     fe6:	08 f4       	brcc	.+2      	; 0xfea <xTaskIncrementTick+0x6a>
     fe8:	b4 c0       	rjmp	.+360    	; 0x1152 <xTaskIncrementTick+0x1d2>
     fea:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <pxDelayedTaskList>
     fee:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
     ff2:	80 81       	ld	r24, Z
     ff4:	81 11       	cpse	r24, r1
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <xTaskIncrementTick+0x86>
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	9f ef       	ldi	r25, 0xFF	; 255
     ffc:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <xNextTaskUnblockTime+0x1>
    1000:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xNextTaskUnblockTime>
    1004:	a6 c0       	rjmp	.+332    	; 0x1152 <xTaskIncrementTick+0x1d2>
    1006:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <pxDelayedTaskList>
    100a:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <pxDelayedTaskList+0x1>
    100e:	05 80       	ldd	r0, Z+5	; 0x05
    1010:	f6 81       	ldd	r31, Z+6	; 0x06
    1012:	e0 2d       	mov	r30, r0
    1014:	06 80       	ldd	r0, Z+6	; 0x06
    1016:	f7 81       	ldd	r31, Z+7	; 0x07
    1018:	e0 2d       	mov	r30, r0
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	08 17       	cp	r16, r24
    1020:	19 07       	cpc	r17, r25
    1022:	28 f4       	brcc	.+10     	; 0x102e <xTaskIncrementTick+0xae>
    1024:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <xNextTaskUnblockTime+0x1>
    1028:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <xNextTaskUnblockTime>
    102c:	92 c0       	rjmp	.+292    	; 0x1152 <xTaskIncrementTick+0x1d2>
    102e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1030:	b3 85       	ldd	r27, Z+11	; 0x0b
    1032:	84 81       	ldd	r24, Z+4	; 0x04
    1034:	95 81       	ldd	r25, Z+5	; 0x05
    1036:	26 81       	ldd	r18, Z+6	; 0x06
    1038:	37 81       	ldd	r19, Z+7	; 0x07
    103a:	ec 01       	movw	r28, r24
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	97 81       	ldd	r25, Z+7	; 0x07
    1044:	24 81       	ldd	r18, Z+4	; 0x04
    1046:	35 81       	ldd	r19, Z+5	; 0x05
    1048:	ec 01       	movw	r28, r24
    104a:	3b 83       	std	Y+3, r19	; 0x03
    104c:	2a 83       	std	Y+2, r18	; 0x02
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	12 97       	sbiw	r26, 0x02	; 2
    1056:	9f 01       	movw	r18, r30
    1058:	2e 5f       	subi	r18, 0xFE	; 254
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	82 17       	cp	r24, r18
    105e:	93 07       	cpc	r25, r19
    1060:	31 f4       	brne	.+12     	; 0x106e <xTaskIncrementTick+0xee>
    1062:	86 81       	ldd	r24, Z+6	; 0x06
    1064:	97 81       	ldd	r25, Z+7	; 0x07
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	11 97       	sbiw	r26, 0x01	; 1
    106e:	13 86       	std	Z+11, r1	; 0x0b
    1070:	12 86       	std	Z+10, r1	; 0x0a
    1072:	8c 91       	ld	r24, X
    1074:	81 50       	subi	r24, 0x01	; 1
    1076:	8c 93       	st	X, r24
    1078:	a4 89       	ldd	r26, Z+20	; 0x14
    107a:	b5 89       	ldd	r27, Z+21	; 0x15
    107c:	10 97       	sbiw	r26, 0x00	; 0
    107e:	11 f1       	breq	.+68     	; 0x10c4 <xTaskIncrementTick+0x144>
    1080:	86 85       	ldd	r24, Z+14	; 0x0e
    1082:	97 85       	ldd	r25, Z+15	; 0x0f
    1084:	40 89       	ldd	r20, Z+16	; 0x10
    1086:	51 89       	ldd	r21, Z+17	; 0x11
    1088:	ec 01       	movw	r28, r24
    108a:	5d 83       	std	Y+5, r21	; 0x05
    108c:	4c 83       	std	Y+4, r20	; 0x04
    108e:	80 89       	ldd	r24, Z+16	; 0x10
    1090:	91 89       	ldd	r25, Z+17	; 0x11
    1092:	46 85       	ldd	r20, Z+14	; 0x0e
    1094:	57 85       	ldd	r21, Z+15	; 0x0f
    1096:	ec 01       	movw	r28, r24
    1098:	5b 83       	std	Y+3, r21	; 0x03
    109a:	4a 83       	std	Y+2, r20	; 0x02
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	4d 91       	ld	r20, X+
    10a0:	5c 91       	ld	r21, X
    10a2:	12 97       	sbiw	r26, 0x02	; 2
    10a4:	cf 01       	movw	r24, r30
    10a6:	0c 96       	adiw	r24, 0x0c	; 12
    10a8:	48 17       	cp	r20, r24
    10aa:	59 07       	cpc	r21, r25
    10ac:	31 f4       	brne	.+12     	; 0x10ba <xTaskIncrementTick+0x13a>
    10ae:	80 89       	ldd	r24, Z+16	; 0x10
    10b0:	91 89       	ldd	r25, Z+17	; 0x11
    10b2:	12 96       	adiw	r26, 0x02	; 2
    10b4:	9c 93       	st	X, r25
    10b6:	8e 93       	st	-X, r24
    10b8:	11 97       	sbiw	r26, 0x01	; 1
    10ba:	15 8a       	std	Z+21, r1	; 0x15
    10bc:	14 8a       	std	Z+20, r1	; 0x14
    10be:	8c 91       	ld	r24, X
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	8c 93       	st	X, r24
    10c4:	86 89       	ldd	r24, Z+22	; 0x16
    10c6:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <uxTopReadyPriority>
    10ca:	98 17       	cp	r25, r24
    10cc:	10 f4       	brcc	.+4      	; 0x10d2 <xTaskIncrementTick+0x152>
    10ce:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxTopReadyPriority>
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	dc 01       	movw	r26, r24
    10d6:	aa 0f       	add	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	aa 0f       	add	r26, r26
    10dc:	bb 1f       	adc	r27, r27
    10de:	aa 0f       	add	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	8a 0f       	add	r24, r26
    10e4:	9b 1f       	adc	r25, r27
    10e6:	dc 01       	movw	r26, r24
    10e8:	a2 5b       	subi	r26, 0xB2	; 178
    10ea:	b8 4f       	sbci	r27, 0xF8	; 248
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	0d 90       	ld	r0, X+
    10f0:	bc 91       	ld	r27, X
    10f2:	a0 2d       	mov	r26, r0
    10f4:	b5 83       	std	Z+5, r27	; 0x05
    10f6:	a4 83       	std	Z+4, r26	; 0x04
    10f8:	14 96       	adiw	r26, 0x04	; 4
    10fa:	8d 91       	ld	r24, X+
    10fc:	9c 91       	ld	r25, X
    10fe:	15 97       	sbiw	r26, 0x05	; 5
    1100:	97 83       	std	Z+7, r25	; 0x07
    1102:	86 83       	std	Z+6, r24	; 0x06
    1104:	14 96       	adiw	r26, 0x04	; 4
    1106:	8d 91       	ld	r24, X+
    1108:	9c 91       	ld	r25, X
    110a:	15 97       	sbiw	r26, 0x05	; 5
    110c:	ec 01       	movw	r28, r24
    110e:	3b 83       	std	Y+3, r19	; 0x03
    1110:	2a 83       	std	Y+2, r18	; 0x02
    1112:	15 96       	adiw	r26, 0x05	; 5
    1114:	3c 93       	st	X, r19
    1116:	2e 93       	st	-X, r18
    1118:	14 97       	sbiw	r26, 0x04	; 4
    111a:	a6 89       	ldd	r26, Z+22	; 0x16
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	cd 01       	movw	r24, r26
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	a8 0f       	add	r26, r24
    112e:	b9 1f       	adc	r27, r25
    1130:	a2 5b       	subi	r26, 0xB2	; 178
    1132:	b8 4f       	sbci	r27, 0xF8	; 248
    1134:	b3 87       	std	Z+11, r27	; 0x0b
    1136:	a2 87       	std	Z+10, r26	; 0x0a
    1138:	8c 91       	ld	r24, X
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	8c 93       	st	X, r24
    113e:	55 cf       	rjmp	.-342    	; 0xfea <xTaskIncrementTick+0x6a>
    1140:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <xPendedTicks>
    1144:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <xPendedTicks+0x1>
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <xPendedTicks+0x1>
    114e:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xPendedTicks>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <xTaskResumeAll>:
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	0f 92       	push	r0
    1168:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
    116c:	81 50       	subi	r24, 0x01	; 1
    116e:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxSchedulerSuspended>
    1172:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
    1176:	81 11       	cpse	r24, r1
    1178:	b9 c0       	rjmp	.+370    	; 0x12ec <xTaskResumeAll+0x18e>
    117a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <uxCurrentNumberOfTasks>
    117e:	81 11       	cpse	r24, r1
    1180:	96 c0       	rjmp	.+300    	; 0x12ae <xTaskResumeAll+0x150>
    1182:	b4 c0       	rjmp	.+360    	; 0x12ec <xTaskResumeAll+0x18e>
    1184:	e0 91 34 07 	lds	r30, 0x0734	; 0x800734 <xPendingReadyList+0x5>
    1188:	f0 91 35 07 	lds	r31, 0x0735	; 0x800735 <xPendingReadyList+0x6>
    118c:	06 80       	ldd	r0, Z+6	; 0x06
    118e:	f7 81       	ldd	r31, Z+7	; 0x07
    1190:	e0 2d       	mov	r30, r0
    1192:	a4 89       	ldd	r26, Z+20	; 0x14
    1194:	b5 89       	ldd	r27, Z+21	; 0x15
    1196:	c6 85       	ldd	r28, Z+14	; 0x0e
    1198:	d7 85       	ldd	r29, Z+15	; 0x0f
    119a:	80 89       	ldd	r24, Z+16	; 0x10
    119c:	91 89       	ldd	r25, Z+17	; 0x11
    119e:	9d 83       	std	Y+5, r25	; 0x05
    11a0:	8c 83       	std	Y+4, r24	; 0x04
    11a2:	c0 89       	ldd	r28, Z+16	; 0x10
    11a4:	d1 89       	ldd	r29, Z+17	; 0x11
    11a6:	86 85       	ldd	r24, Z+14	; 0x0e
    11a8:	97 85       	ldd	r25, Z+15	; 0x0f
    11aa:	9b 83       	std	Y+3, r25	; 0x03
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	11 96       	adiw	r26, 0x01	; 1
    11b0:	2d 91       	ld	r18, X+
    11b2:	3c 91       	ld	r19, X
    11b4:	12 97       	sbiw	r26, 0x02	; 2
    11b6:	cf 01       	movw	r24, r30
    11b8:	0c 96       	adiw	r24, 0x0c	; 12
    11ba:	28 17       	cp	r18, r24
    11bc:	39 07       	cpc	r19, r25
    11be:	31 f4       	brne	.+12     	; 0x11cc <xTaskResumeAll+0x6e>
    11c0:	80 89       	ldd	r24, Z+16	; 0x10
    11c2:	91 89       	ldd	r25, Z+17	; 0x11
    11c4:	12 96       	adiw	r26, 0x02	; 2
    11c6:	9c 93       	st	X, r25
    11c8:	8e 93       	st	-X, r24
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	15 8a       	std	Z+21, r1	; 0x15
    11ce:	14 8a       	std	Z+20, r1	; 0x14
    11d0:	8c 91       	ld	r24, X
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	8c 93       	st	X, r24
    11d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    11d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    11da:	c4 81       	ldd	r28, Z+4	; 0x04
    11dc:	d5 81       	ldd	r29, Z+5	; 0x05
    11de:	86 81       	ldd	r24, Z+6	; 0x06
    11e0:	97 81       	ldd	r25, Z+7	; 0x07
    11e2:	9d 83       	std	Y+5, r25	; 0x05
    11e4:	8c 83       	std	Y+4, r24	; 0x04
    11e6:	c6 81       	ldd	r28, Z+6	; 0x06
    11e8:	d7 81       	ldd	r29, Z+7	; 0x07
    11ea:	84 81       	ldd	r24, Z+4	; 0x04
    11ec:	95 81       	ldd	r25, Z+5	; 0x05
    11ee:	9b 83       	std	Y+3, r25	; 0x03
    11f0:	8a 83       	std	Y+2, r24	; 0x02
    11f2:	11 96       	adiw	r26, 0x01	; 1
    11f4:	8d 91       	ld	r24, X+
    11f6:	9c 91       	ld	r25, X
    11f8:	12 97       	sbiw	r26, 0x02	; 2
    11fa:	9f 01       	movw	r18, r30
    11fc:	2e 5f       	subi	r18, 0xFE	; 254
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	82 17       	cp	r24, r18
    1202:	93 07       	cpc	r25, r19
    1204:	31 f4       	brne	.+12     	; 0x1212 <xTaskResumeAll+0xb4>
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	97 81       	ldd	r25, Z+7	; 0x07
    120a:	12 96       	adiw	r26, 0x02	; 2
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
    1210:	11 97       	sbiw	r26, 0x01	; 1
    1212:	13 86       	std	Z+11, r1	; 0x0b
    1214:	12 86       	std	Z+10, r1	; 0x0a
    1216:	8c 91       	ld	r24, X
    1218:	81 50       	subi	r24, 0x01	; 1
    121a:	8c 93       	st	X, r24
    121c:	86 89       	ldd	r24, Z+22	; 0x16
    121e:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <uxTopReadyPriority>
    1222:	98 17       	cp	r25, r24
    1224:	10 f4       	brcc	.+4      	; 0x122a <xTaskResumeAll+0xcc>
    1226:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxTopReadyPriority>
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	dc 01       	movw	r26, r24
    122e:	aa 0f       	add	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	aa 0f       	add	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	aa 0f       	add	r26, r26
    1238:	bb 1f       	adc	r27, r27
    123a:	8a 0f       	add	r24, r26
    123c:	9b 1f       	adc	r25, r27
    123e:	dc 01       	movw	r26, r24
    1240:	a2 5b       	subi	r26, 0xB2	; 178
    1242:	b8 4f       	sbci	r27, 0xF8	; 248
    1244:	11 96       	adiw	r26, 0x01	; 1
    1246:	0d 90       	ld	r0, X+
    1248:	bc 91       	ld	r27, X
    124a:	a0 2d       	mov	r26, r0
    124c:	b5 83       	std	Z+5, r27	; 0x05
    124e:	a4 83       	std	Z+4, r26	; 0x04
    1250:	14 96       	adiw	r26, 0x04	; 4
    1252:	8d 91       	ld	r24, X+
    1254:	9c 91       	ld	r25, X
    1256:	15 97       	sbiw	r26, 0x05	; 5
    1258:	97 83       	std	Z+7, r25	; 0x07
    125a:	86 83       	std	Z+6, r24	; 0x06
    125c:	14 96       	adiw	r26, 0x04	; 4
    125e:	cd 91       	ld	r28, X+
    1260:	dc 91       	ld	r29, X
    1262:	15 97       	sbiw	r26, 0x05	; 5
    1264:	3b 83       	std	Y+3, r19	; 0x03
    1266:	2a 83       	std	Y+2, r18	; 0x02
    1268:	15 96       	adiw	r26, 0x05	; 5
    126a:	3c 93       	st	X, r19
    126c:	2e 93       	st	-X, r18
    126e:	14 97       	sbiw	r26, 0x04	; 4
    1270:	a6 89       	ldd	r26, Z+22	; 0x16
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	cd 01       	movw	r24, r26
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	a8 0f       	add	r26, r24
    1284:	b9 1f       	adc	r27, r25
    1286:	a2 5b       	subi	r26, 0xB2	; 178
    1288:	b8 4f       	sbci	r27, 0xF8	; 248
    128a:	b3 87       	std	Z+11, r27	; 0x0b
    128c:	a2 87       	std	Z+10, r26	; 0x0a
    128e:	8c 91       	ld	r24, X
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	8c 93       	st	X, r24
    1294:	96 89       	ldd	r25, Z+22	; 0x16
    1296:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <pxCurrentTCB>
    129a:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
    129e:	56 96       	adiw	r26, 0x16	; 22
    12a0:	8c 91       	ld	r24, X
    12a2:	98 17       	cp	r25, r24
    12a4:	30 f0       	brcs	.+12     	; 0x12b2 <xTaskResumeAll+0x154>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xYieldPending>
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <xTaskResumeAll+0x154>
    12ae:	e0 e0       	ldi	r30, 0x00	; 0
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <xPendingReadyList>
    12b6:	81 11       	cpse	r24, r1
    12b8:	65 cf       	rjmp	.-310    	; 0x1184 <xTaskResumeAll+0x26>
    12ba:	ef 2b       	or	r30, r31
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <xTaskResumeAll+0x164>
    12be:	0e 94 28 05 	call	0xa50	; 0xa50 <prvResetNextTaskUnblockTime>
    12c2:	c0 91 1e 07 	lds	r28, 0x071E	; 0x80071e <xPendedTicks>
    12c6:	d0 91 1f 07 	lds	r29, 0x071F	; 0x80071f <xPendedTicks+0x1>
    12ca:	20 97       	sbiw	r28, 0x00	; 0
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <xTaskResumeAll+0x18a>
    12ce:	0e 94 c0 07 	call	0xf80	; 0xf80 <xTaskIncrementTick>
    12d2:	88 23       	and	r24, r24
    12d4:	19 f0       	breq	.+6      	; 0x12dc <xTaskResumeAll+0x17e>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xYieldPending>
    12dc:	21 97       	sbiw	r28, 0x01	; 1
    12de:	b9 f7       	brne	.-18     	; 0x12ce <xTaskResumeAll+0x170>
    12e0:	10 92 1f 07 	sts	0x071F, r1	; 0x80071f <xPendedTicks+0x1>
    12e4:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <xPendedTicks>
    12e8:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <xYieldPending>
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <xTaskDelayUntil>:
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	8c 01       	movw	r16, r24
    1302:	eb 01       	movw	r28, r22
    1304:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
    1308:	40 91 22 07 	lds	r20, 0x0722	; 0x800722 <xTickCount>
    130c:	50 91 23 07 	lds	r21, 0x0723	; 0x800723 <xTickCount+0x1>
    1310:	f8 01       	movw	r30, r16
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	c9 01       	movw	r24, r18
    1318:	8c 0f       	add	r24, r28
    131a:	9d 1f       	adc	r25, r29
    131c:	42 17       	cp	r20, r18
    131e:	53 07       	cpc	r21, r19
    1320:	40 f4       	brcc	.+16     	; 0x1332 <xTaskDelayUntil+0x3a>
    1322:	82 17       	cp	r24, r18
    1324:	93 07       	cpc	r25, r19
    1326:	68 f4       	brcc	.+26     	; 0x1342 <xTaskDelayUntil+0x4a>
    1328:	48 17       	cp	r20, r24
    132a:	59 07       	cpc	r21, r25
    132c:	60 f0       	brcs	.+24     	; 0x1346 <xTaskDelayUntil+0x4e>
    132e:	c0 e0       	ldi	r28, 0x00	; 0
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <xTaskDelayUntil+0x58>
    1332:	82 17       	cp	r24, r18
    1334:	93 07       	cpc	r25, r19
    1336:	48 f0       	brcs	.+18     	; 0x134a <xTaskDelayUntil+0x52>
    1338:	48 17       	cp	r20, r24
    133a:	59 07       	cpc	r21, r25
    133c:	40 f0       	brcs	.+16     	; 0x134e <xTaskDelayUntil+0x56>
    133e:	c0 e0       	ldi	r28, 0x00	; 0
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <xTaskDelayUntil+0x58>
    1342:	c0 e0       	ldi	r28, 0x00	; 0
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <xTaskDelayUntil+0x58>
    1346:	c1 e0       	ldi	r28, 0x01	; 1
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <xTaskDelayUntil+0x58>
    134a:	c1 e0       	ldi	r28, 0x01	; 1
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <xTaskDelayUntil+0x58>
    134e:	c1 e0       	ldi	r28, 0x01	; 1
    1350:	f8 01       	movw	r30, r16
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
    1356:	cc 23       	and	r28, r28
    1358:	29 f0       	breq	.+10     	; 0x1364 <xTaskDelayUntil+0x6c>
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	84 1b       	sub	r24, r20
    135e:	95 0b       	sbc	r25, r21
    1360:	0e 94 8f 06 	call	0xd1e	; 0xd1e <prvAddCurrentTaskToDelayedList>
    1364:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
    1368:	81 11       	cpse	r24, r1
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <xTaskDelayUntil+0x78>
    136c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
    1370:	8c 2f       	mov	r24, r28
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <vTaskDelay>:
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
    1382:	89 2b       	or	r24, r25
    1384:	49 f0       	breq	.+18     	; 0x1398 <vTaskDelay+0x1c>
    1386:	0e 94 b0 07 	call	0xf60	; 0xf60 <vTaskSuspendAll>
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <prvAddCurrentTaskToDelayedList>
    1392:	0e 94 af 08 	call	0x115e	; 0x115e <xTaskResumeAll>
    1396:	01 c0       	rjmp	.+2      	; 0x139a <vTaskDelay+0x1e>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	81 11       	cpse	r24, r1
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vTaskDelay+0x26>
    139e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <vTaskSwitchContext>:
    13a8:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
    13ac:	88 23       	and	r24, r24
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <vTaskSwitchContext+0x10>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xYieldPending>
    13b6:	08 95       	ret
    13b8:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <xYieldPending>
    13bc:	20 91 21 07 	lds	r18, 0x0721	; 0x800721 <uxTopReadyPriority>
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vTaskSwitchContext+0x1c>
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	82 2f       	mov	r24, r18
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	e8 0f       	add	r30, r24
    13d8:	f9 1f       	adc	r31, r25
    13da:	e2 5b       	subi	r30, 0xB2	; 178
    13dc:	f8 4f       	sbci	r31, 0xF8	; 248
    13de:	30 81       	ld	r19, Z
    13e0:	33 23       	and	r19, r19
    13e2:	79 f3       	breq	.-34     	; 0x13c2 <vTaskSwitchContext+0x1a>
    13e4:	ac 01       	movw	r20, r24
    13e6:	44 0f       	add	r20, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	44 0f       	add	r20, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	48 0f       	add	r20, r24
    13f4:	59 1f       	adc	r21, r25
    13f6:	df 01       	movw	r26, r30
    13f8:	01 80       	ldd	r0, Z+1	; 0x01
    13fa:	f2 81       	ldd	r31, Z+2	; 0x02
    13fc:	e0 2d       	mov	r30, r0
    13fe:	02 80       	ldd	r0, Z+2	; 0x02
    1400:	f3 81       	ldd	r31, Z+3	; 0x03
    1402:	e0 2d       	mov	r30, r0
    1404:	12 96       	adiw	r26, 0x02	; 2
    1406:	fc 93       	st	X, r31
    1408:	ee 93       	st	-X, r30
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	4f 5a       	subi	r20, 0xAF	; 175
    140e:	58 4f       	sbci	r21, 0xF8	; 248
    1410:	e4 17       	cp	r30, r20
    1412:	f5 07       	cpc	r31, r21
    1414:	29 f4       	brne	.+10     	; 0x1420 <vTaskSwitchContext+0x78>
    1416:	42 81       	ldd	r20, Z+2	; 0x02
    1418:	53 81       	ldd	r21, Z+3	; 0x03
    141a:	fd 01       	movw	r30, r26
    141c:	52 83       	std	Z+2, r21	; 0x02
    141e:	41 83       	std	Z+1, r20	; 0x01
    1420:	fc 01       	movw	r30, r24
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	8e 0f       	add	r24, r30
    1430:	9f 1f       	adc	r25, r31
    1432:	fc 01       	movw	r30, r24
    1434:	e2 5b       	subi	r30, 0xB2	; 178
    1436:	f8 4f       	sbci	r31, 0xF8	; 248
    1438:	01 80       	ldd	r0, Z+1	; 0x01
    143a:	f2 81       	ldd	r31, Z+2	; 0x02
    143c:	e0 2d       	mov	r30, r0
    143e:	86 81       	ldd	r24, Z+6	; 0x06
    1440:	97 81       	ldd	r25, Z+7	; 0x07
    1442:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <pxCurrentTCB+0x1>
    1446:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <pxCurrentTCB>
    144a:	20 93 21 07 	sts	0x0721, r18	; 0x800721 <uxTopReadyPriority>
    144e:	08 95       	ret

00001450 <vTaskPlaceOnEventList>:
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	eb 01       	movw	r28, r22
    1456:	60 91 72 07 	lds	r22, 0x0772	; 0x800772 <pxCurrentTCB>
    145a:	70 91 73 07 	lds	r23, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
    145e:	64 5f       	subi	r22, 0xF4	; 244
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	ce 01       	movw	r24, r28
    146a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <prvAddCurrentTaskToDelayedList>
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <xTaskRemoveFromEventList>:
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	dc 01       	movw	r26, r24
    147a:	15 96       	adiw	r26, 0x05	; 5
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	16 97       	sbiw	r26, 0x06	; 6
    1482:	06 80       	ldd	r0, Z+6	; 0x06
    1484:	f7 81       	ldd	r31, Z+7	; 0x07
    1486:	e0 2d       	mov	r30, r0
    1488:	a4 89       	ldd	r26, Z+20	; 0x14
    148a:	b5 89       	ldd	r27, Z+21	; 0x15
    148c:	c6 85       	ldd	r28, Z+14	; 0x0e
    148e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1490:	80 89       	ldd	r24, Z+16	; 0x10
    1492:	91 89       	ldd	r25, Z+17	; 0x11
    1494:	9d 83       	std	Y+5, r25	; 0x05
    1496:	8c 83       	std	Y+4, r24	; 0x04
    1498:	c0 89       	ldd	r28, Z+16	; 0x10
    149a:	d1 89       	ldd	r29, Z+17	; 0x11
    149c:	86 85       	ldd	r24, Z+14	; 0x0e
    149e:	97 85       	ldd	r25, Z+15	; 0x0f
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	8d 91       	ld	r24, X+
    14a8:	9c 91       	ld	r25, X
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	9f 01       	movw	r18, r30
    14ae:	24 5f       	subi	r18, 0xF4	; 244
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	31 f4       	brne	.+12     	; 0x14c4 <xTaskRemoveFromEventList+0x50>
    14b8:	80 89       	ldd	r24, Z+16	; 0x10
    14ba:	91 89       	ldd	r25, Z+17	; 0x11
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	9c 93       	st	X, r25
    14c0:	8e 93       	st	-X, r24
    14c2:	11 97       	sbiw	r26, 0x01	; 1
    14c4:	15 8a       	std	Z+21, r1	; 0x15
    14c6:	14 8a       	std	Z+20, r1	; 0x14
    14c8:	8c 91       	ld	r24, X
    14ca:	81 50       	subi	r24, 0x01	; 1
    14cc:	8c 93       	st	X, r24
    14ce:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <uxSchedulerSuspended>
    14d2:	81 11       	cpse	r24, r1
    14d4:	60 c0       	rjmp	.+192    	; 0x1596 <xTaskRemoveFromEventList+0x122>
    14d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    14d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    14da:	c4 81       	ldd	r28, Z+4	; 0x04
    14dc:	d5 81       	ldd	r29, Z+5	; 0x05
    14de:	86 81       	ldd	r24, Z+6	; 0x06
    14e0:	97 81       	ldd	r25, Z+7	; 0x07
    14e2:	9d 83       	std	Y+5, r25	; 0x05
    14e4:	8c 83       	std	Y+4, r24	; 0x04
    14e6:	c6 81       	ldd	r28, Z+6	; 0x06
    14e8:	d7 81       	ldd	r29, Z+7	; 0x07
    14ea:	84 81       	ldd	r24, Z+4	; 0x04
    14ec:	95 81       	ldd	r25, Z+5	; 0x05
    14ee:	9b 83       	std	Y+3, r25	; 0x03
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8d 91       	ld	r24, X+
    14f6:	9c 91       	ld	r25, X
    14f8:	12 97       	sbiw	r26, 0x02	; 2
    14fa:	9f 01       	movw	r18, r30
    14fc:	2e 5f       	subi	r18, 0xFE	; 254
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	31 f4       	brne	.+12     	; 0x1512 <xTaskRemoveFromEventList+0x9e>
    1506:	86 81       	ldd	r24, Z+6	; 0x06
    1508:	97 81       	ldd	r25, Z+7	; 0x07
    150a:	12 96       	adiw	r26, 0x02	; 2
    150c:	9c 93       	st	X, r25
    150e:	8e 93       	st	-X, r24
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	13 86       	std	Z+11, r1	; 0x0b
    1514:	12 86       	std	Z+10, r1	; 0x0a
    1516:	8c 91       	ld	r24, X
    1518:	81 50       	subi	r24, 0x01	; 1
    151a:	8c 93       	st	X, r24
    151c:	86 89       	ldd	r24, Z+22	; 0x16
    151e:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <uxTopReadyPriority>
    1522:	98 17       	cp	r25, r24
    1524:	10 f4       	brcc	.+4      	; 0x152a <xTaskRemoveFromEventList+0xb6>
    1526:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <uxTopReadyPriority>
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	dc 01       	movw	r26, r24
    152e:	aa 0f       	add	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	aa 0f       	add	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	aa 0f       	add	r26, r26
    1538:	bb 1f       	adc	r27, r27
    153a:	8a 0f       	add	r24, r26
    153c:	9b 1f       	adc	r25, r27
    153e:	dc 01       	movw	r26, r24
    1540:	a2 5b       	subi	r26, 0xB2	; 178
    1542:	b8 4f       	sbci	r27, 0xF8	; 248
    1544:	11 96       	adiw	r26, 0x01	; 1
    1546:	0d 90       	ld	r0, X+
    1548:	bc 91       	ld	r27, X
    154a:	a0 2d       	mov	r26, r0
    154c:	b5 83       	std	Z+5, r27	; 0x05
    154e:	a4 83       	std	Z+4, r26	; 0x04
    1550:	14 96       	adiw	r26, 0x04	; 4
    1552:	8d 91       	ld	r24, X+
    1554:	9c 91       	ld	r25, X
    1556:	15 97       	sbiw	r26, 0x05	; 5
    1558:	97 83       	std	Z+7, r25	; 0x07
    155a:	86 83       	std	Z+6, r24	; 0x06
    155c:	14 96       	adiw	r26, 0x04	; 4
    155e:	cd 91       	ld	r28, X+
    1560:	dc 91       	ld	r29, X
    1562:	15 97       	sbiw	r26, 0x05	; 5
    1564:	3b 83       	std	Y+3, r19	; 0x03
    1566:	2a 83       	std	Y+2, r18	; 0x02
    1568:	15 96       	adiw	r26, 0x05	; 5
    156a:	3c 93       	st	X, r19
    156c:	2e 93       	st	-X, r18
    156e:	14 97       	sbiw	r26, 0x04	; 4
    1570:	a6 89       	ldd	r26, Z+22	; 0x16
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	cd 01       	movw	r24, r26
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	a8 0f       	add	r26, r24
    1584:	b9 1f       	adc	r27, r25
    1586:	a2 5b       	subi	r26, 0xB2	; 178
    1588:	b8 4f       	sbci	r27, 0xF8	; 248
    158a:	b3 87       	std	Z+11, r27	; 0x0b
    158c:	a2 87       	std	Z+10, r26	; 0x0a
    158e:	8c 91       	ld	r24, X
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8c 93       	st	X, r24
    1594:	1c c0       	rjmp	.+56     	; 0x15ce <xTaskRemoveFromEventList+0x15a>
    1596:	4f e2       	ldi	r20, 0x2F	; 47
    1598:	57 e0       	ldi	r21, 0x07	; 7
    159a:	da 01       	movw	r26, r20
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	cd 91       	ld	r28, X+
    15a0:	dc 91       	ld	r29, X
    15a2:	12 97       	sbiw	r26, 0x02	; 2
    15a4:	d7 87       	std	Z+15, r29	; 0x0f
    15a6:	c6 87       	std	Z+14, r28	; 0x0e
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	91 8b       	std	Z+17, r25	; 0x11
    15ae:	80 8b       	std	Z+16, r24	; 0x10
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	dc 01       	movw	r26, r24
    15b6:	13 96       	adiw	r26, 0x03	; 3
    15b8:	3c 93       	st	X, r19
    15ba:	2e 93       	st	-X, r18
    15bc:	12 97       	sbiw	r26, 0x02	; 2
    15be:	3d 83       	std	Y+5, r19	; 0x05
    15c0:	2c 83       	std	Y+4, r18	; 0x04
    15c2:	55 8b       	std	Z+21, r21	; 0x15
    15c4:	44 8b       	std	Z+20, r20	; 0x14
    15c6:	da 01       	movw	r26, r20
    15c8:	8c 91       	ld	r24, X
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	8c 93       	st	X, r24
    15ce:	96 89       	ldd	r25, Z+22	; 0x16
    15d0:	e0 91 72 07 	lds	r30, 0x0772	; 0x800772 <pxCurrentTCB>
    15d4:	f0 91 73 07 	lds	r31, 0x0773	; 0x800773 <pxCurrentTCB+0x1>
    15d8:	86 89       	ldd	r24, Z+22	; 0x16
    15da:	89 17       	cp	r24, r25
    15dc:	20 f4       	brcc	.+8      	; 0x15e6 <xTaskRemoveFromEventList+0x172>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xYieldPending>
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <xTaskRemoveFromEventList+0x174>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <vTaskInternalSetTimeOutState>:
    15ee:	20 91 1c 07 	lds	r18, 0x071C	; 0x80071c <xNumOfOverflows>
    15f2:	fc 01       	movw	r30, r24
    15f4:	20 83       	st	Z, r18
    15f6:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <xTickCount>
    15fa:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <xTickCount+0x1>
    15fe:	32 83       	std	Z+2, r19	; 0x02
    1600:	21 83       	std	Z+1, r18	; 0x01
    1602:	08 95       	ret

00001604 <xTaskCheckForTimeOut>:
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	0f 92       	push	r0
    160e:	40 91 22 07 	lds	r20, 0x0722	; 0x800722 <xTickCount>
    1612:	50 91 23 07 	lds	r21, 0x0723	; 0x800723 <xTickCount+0x1>
    1616:	ec 01       	movw	r28, r24
    1618:	29 81       	ldd	r18, Y+1	; 0x01
    161a:	3a 81       	ldd	r19, Y+2	; 0x02
    161c:	da 01       	movw	r26, r20
    161e:	a2 1b       	sub	r26, r18
    1620:	b3 0b       	sbc	r27, r19
    1622:	f8 81       	ld	r31, Y
    1624:	e0 91 1c 07 	lds	r30, 0x071C	; 0x80071c <xNumOfOverflows>
    1628:	fe 17       	cp	r31, r30
    162a:	41 f0       	breq	.+16     	; 0x163c <xTaskCheckForTimeOut+0x38>
    162c:	42 17       	cp	r20, r18
    162e:	53 07       	cpc	r21, r19
    1630:	28 f0       	brcs	.+10     	; 0x163c <xTaskCheckForTimeOut+0x38>
    1632:	fb 01       	movw	r30, r22
    1634:	11 82       	std	Z+1, r1	; 0x01
    1636:	10 82       	st	Z, r1
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	11 c0       	rjmp	.+34     	; 0x165e <xTaskCheckForTimeOut+0x5a>
    163c:	eb 01       	movw	r28, r22
    163e:	28 81       	ld	r18, Y
    1640:	39 81       	ldd	r19, Y+1	; 0x01
    1642:	a2 17       	cp	r26, r18
    1644:	b3 07       	cpc	r27, r19
    1646:	40 f4       	brcc	.+16     	; 0x1658 <xTaskCheckForTimeOut+0x54>
    1648:	2a 1b       	sub	r18, r26
    164a:	3b 0b       	sbc	r19, r27
    164c:	39 83       	std	Y+1, r19	; 0x01
    164e:	28 83       	st	Y, r18
    1650:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskInternalSetTimeOutState>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	03 c0       	rjmp	.+6      	; 0x165e <xTaskCheckForTimeOut+0x5a>
    1658:	19 82       	std	Y+1, r1	; 0x01
    165a:	18 82       	st	Y, r1
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <vTaskMissedYield>:
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <xYieldPending>
    166e:	08 95       	ret

00001670 <Keypad_Get_Active_Column>:
	
	return SW_Value;	// if no Switch is pressed SW_Value is Keypad_SW_NULL defined in Keypad_CFg.h
}

static uint8 Keypad_Get_Active_Column()
{
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	1f 92       	push	r1
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	uint8 SW_Not_Pressed = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
	uint8 Keypad_Active_Col = Keypad_Col_NULL;
	
	for(uint8 Col_Index = Keypad_C1_Index;  Col_Index <= Keypad_C4_Index ; ++Col_Index)
    1686:	14 e0       	ldi	r17, 0x04	; 4
}

static uint8 Keypad_Get_Active_Column()
{
	uint8 SW_Not_Pressed = 1;
	uint8 Keypad_Active_Col = Keypad_Col_NULL;
    1688:	0f ef       	ldi	r16, 0xFF	; 255
	
	for(uint8 Col_Index = Keypad_C1_Index;  Col_Index <= Keypad_C4_Index ; ++Col_Index)
    168a:	45 c0       	rjmp	.+138    	; 0x1716 <Keypad_Get_Active_Column+0xa6>
	{
		// Keypad_Read_MultiPress mode returns the value of the button if it's pressed before the user release the button so if Keypad_Read is used in a loop it will read the same press several times
		if(Keypad_GRead_Mode == Keypad_Read_MultiPress)	
    168c:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <Keypad_GRead_Mode>
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	a1 f4       	brne	.+40     	; 0x16bc <Keypad_Get_Active_Column+0x4c>
		{
			DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);
    1694:	e1 2f       	mov	r30, r17
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	ee 0f       	add	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	ef 58       	subi	r30, 0x8F	; 143
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	ae 01       	movw	r20, r28
    16aa:	4f 5f       	subi	r20, 0xFF	; 255
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
    16ae:	62 81       	ldd	r22, Z+2	; 0x02
    16b0:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_Read_Channel>
			if(!SW_Not_Pressed)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	81 11       	cpse	r24, r1
    16b8:	2d c0       	rjmp	.+90     	; 0x1714 <Keypad_Get_Active_Column+0xa4>
    16ba:	31 c0       	rjmp	.+98     	; 0x171e <Keypad_Get_Active_Column+0xae>
				break;	
			}
		}
		
		// Keypad_Read_Single_Press mode returns the value of the button if it's pressed after the user release the button so if Keypad_Read is used in a loop it will read the same press one time
		else if(Keypad_GRead_Mode == Keypad_Read_Single_Press)
    16bc:	81 11       	cpse	r24, r1
    16be:	2a c0       	rjmp	.+84     	; 0x1714 <Keypad_Get_Active_Column+0xa4>
		{				
			DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);
    16c0:	e1 2e       	mov	r14, r17
    16c2:	f1 2c       	mov	r15, r1
    16c4:	f7 01       	movw	r30, r14
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	ef 58       	subi	r30, 0x8F	; 143
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	ae 01       	movw	r20, r28
    16d8:	4f 5f       	subi	r20, 0xFF	; 255
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	62 81       	ldd	r22, Z+2	; 0x02
    16de:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_Read_Channel>
			
			if(!SW_Not_Pressed)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	81 11       	cpse	r24, r1
    16e6:	11 c0       	rjmp	.+34     	; 0x170a <Keypad_Get_Active_Column+0x9a>
			{	Keypad_Active_Col = Col_Index;	}
    16e8:	01 2f       	mov	r16, r17
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <Keypad_Get_Active_Column+0x9a>
				
			while(!SW_Not_Pressed)	//loop as long as the the button is still pressed until it's released and SW_Not_Pressed read one 
			{	DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);	}
    16ec:	f7 01       	movw	r30, r14
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ef 58       	subi	r30, 0x8F	; 143
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	ae 01       	movw	r20, r28
    1700:	4f 5f       	subi	r20, 0xFF	; 255
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	62 81       	ldd	r22, Z+2	; 0x02
    1706:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_Read_Channel>
			DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);
			
			if(!SW_Not_Pressed)
			{	Keypad_Active_Col = Col_Index;	}
				
			while(!SW_Not_Pressed)	//loop as long as the the button is still pressed until it's released and SW_Not_Pressed read one 
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 23       	and	r24, r24
    170e:	71 f3       	breq	.-36     	; 0x16ec <Keypad_Get_Active_Column+0x7c>
			{	DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);	}
			
			if (Keypad_Active_Col == Col_Index)
    1710:	10 17       	cp	r17, r16
    1712:	31 f0       	breq	.+12     	; 0x1720 <Keypad_Get_Active_Column+0xb0>
static uint8 Keypad_Get_Active_Column()
{
	uint8 SW_Not_Pressed = 1;
	uint8 Keypad_Active_Col = Keypad_Col_NULL;
	
	for(uint8 Col_Index = Keypad_C1_Index;  Col_Index <= Keypad_C4_Index ; ++Col_Index)
    1714:	1f 5f       	subi	r17, 0xFF	; 255
    1716:	18 30       	cpi	r17, 0x08	; 8
    1718:	08 f4       	brcc	.+2      	; 0x171c <Keypad_Get_Active_Column+0xac>
    171a:	b8 cf       	rjmp	.-144    	; 0x168c <Keypad_Get_Active_Column+0x1c>
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <Keypad_Get_Active_Column+0xb0>
		if(Keypad_GRead_Mode == Keypad_Read_MultiPress)	
		{
			DIO_Read_Channel(Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Col_Index].Keypad_Rx_or_Cx_PIN, &SW_Not_Pressed);
			if(!SW_Not_Pressed)
			{
				Keypad_Active_Col = Col_Index;
    171e:	01 2f       	mov	r16, r17
			if (Keypad_Active_Col == Col_Index)
			{	break;	}
		}	
	}
	return	Keypad_Active_Col;
}
    1720:	80 2f       	mov	r24, r16
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	08 95       	ret

00001732 <Keypad_Init>:
//========================================================
#include <HAL/Keypad/Keypad_Includes/Keypad_Private.h>


void Keypad_Init(void)
{
    1732:	cf 93       	push	r28
	//in Eta 32 R1 Pin can be connected to ground directly or to certain PIN PC
	#ifdef Kepad_R1_Connect_PIN		
	Port_Set_Pin_Mode(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_Mode);
    1734:	e1 e7       	ldi	r30, 0x71	; 113
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	43 81       	ldd	r20, Z+3	; 0x03
    173e:	62 81       	ldd	r22, Z+2	; 0x02
    1740:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <Port_Set_Pin_Mode>
	#endif	
	
	for(uint8 PIN_Index = Keypad_R2_Index; PIN_Index <= Keypad_C4_Index; ++PIN_Index)
    1744:	c1 e0       	ldi	r28, 0x01	; 1
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <Keypad_Init+0x34>
	{
		Port_Set_Pin_Mode(Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_PIN, Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_Mode);
    1748:	ec 2f       	mov	r30, r28
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ef 58       	subi	r30, 0x8F	; 143
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	43 81       	ldd	r20, Z+3	; 0x03
    175e:	62 81       	ldd	r22, Z+2	; 0x02
    1760:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <Port_Set_Pin_Mode>
	//in Eta 32 R1 Pin can be connected to ground directly or to certain PIN PC
	#ifdef Kepad_R1_Connect_PIN		
	Port_Set_Pin_Mode(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_Mode);
	#endif	
	
	for(uint8 PIN_Index = Keypad_R2_Index; PIN_Index <= Keypad_C4_Index; ++PIN_Index)
    1764:	cf 5f       	subi	r28, 0xFF	; 255
    1766:	c8 30       	cpi	r28, 0x08	; 8
    1768:	78 f3       	brcs	.-34     	; 0x1748 <Keypad_Init+0x16>
	{
		Port_Set_Pin_Mode(Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_PIN, Keypad_CFG[PIN_Index].Keypad_Rx_or_Cx_Mode);
	}
}
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <Keypad_Read_Character>:

uint8 Keypad_Read_Character(uint8 Keypad_Read_Mode)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
	// copy read mode from local variable to global variable
	Keypad_GRead_Mode = Keypad_Read_Mode;
    1776:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <Keypad_GRead_Mode>
	uint8 Keypad_Active_Col = Keypad_Col_NULL;
	uint8 Keypad_Active_Row = Keypad_R2_Index;
	uint8 SW_Value = Keypad_SW_NULL;
	
	#ifdef Kepad_R1_Connect_PIN
	DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_Low);
    177a:	01 e7       	ldi	r16, 0x71	; 113
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	f8 01       	movw	r30, r16
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	62 81       	ldd	r22, Z+2	; 0x02
    1788:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
	Keypad_Active_Col = Keypad_Get_Active_Column();
    178c:	0e 94 38 0b 	call	0x1670	; 0x1670 <Keypad_Get_Active_Column>
    1790:	c8 2f       	mov	r28, r24
		DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_High);
    1792:	f8 01       	movw	r30, r16
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	62 81       	ldd	r22, Z+2	; 0x02
    179c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
	Keypad_Active_Row = Keypad_R1_Index;
	#endif
	
	if(Keypad_Active_Col == Keypad_Col_NULL)
    17a0:	cf 3f       	cpi	r28, 0xFF	; 255
    17a2:	f9 f0       	breq	.+62     	; 0x17e2 <Keypad_Read_Character+0x74>
	
	#ifdef Kepad_R1_Connect_PIN
	DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_Low);
	Keypad_Active_Col = Keypad_Get_Active_Column();
		DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_High);
	Keypad_Active_Row = Keypad_R1_Index;
    17a4:	d0 e0       	ldi	r29, 0x00	; 0
    17a6:	21 c0       	rjmp	.+66     	; 0x17ea <Keypad_Read_Character+0x7c>
	
	if(Keypad_Active_Col == Keypad_Col_NULL)
	{
		for(uint8 Keypad_Row_Index = Keypad_R2_Index ; Keypad_Row_Index <= Keypad_R4_Index; ++Keypad_Row_Index)
		{
			DIO_Write_Channel(Keypad_CFG[Keypad_Row_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_Row_Index].Keypad_Rx_or_Cx_PIN, PIN_Low);
    17a8:	0d 2f       	mov	r16, r29
    17aa:	10 e0       	ldi	r17, 0x00	; 0
    17ac:	00 0f       	add	r16, r16
    17ae:	11 1f       	adc	r17, r17
    17b0:	00 0f       	add	r16, r16
    17b2:	11 1f       	adc	r17, r17
    17b4:	0f 58       	subi	r16, 0x8F	; 143
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	f8 01       	movw	r30, r16
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	62 81       	ldd	r22, Z+2	; 0x02
    17c2:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
			Keypad_Active_Col = Keypad_Get_Active_Column();
    17c6:	0e 94 38 0b 	call	0x1670	; 0x1670 <Keypad_Get_Active_Column>
    17ca:	c8 2f       	mov	r28, r24
			DIO_Write_Channel(Keypad_CFG[Keypad_Row_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_Row_Index].Keypad_Rx_or_Cx_PIN, PIN_High);
    17cc:	f8 01       	movw	r30, r16
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	62 81       	ldd	r22, Z+2	; 0x02
    17d6:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
			if(Keypad_Active_Col != Keypad_Col_NULL)
    17da:	cf 3f       	cpi	r28, 0xFF	; 255
    17dc:	31 f4       	brne	.+12     	; 0x17ea <Keypad_Read_Character+0x7c>
	Keypad_Active_Row = Keypad_R1_Index;
	#endif
	
	if(Keypad_Active_Col == Keypad_Col_NULL)
	{
		for(uint8 Keypad_Row_Index = Keypad_R2_Index ; Keypad_Row_Index <= Keypad_R4_Index; ++Keypad_Row_Index)
    17de:	df 5f       	subi	r29, 0xFF	; 255
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <Keypad_Read_Character+0x76>
    17e2:	d1 e0       	ldi	r29, 0x01	; 1
    17e4:	d4 30       	cpi	r29, 0x04	; 4
    17e6:	00 f3       	brcs	.-64     	; 0x17a8 <Keypad_Read_Character+0x3a>
	
	#ifdef Kepad_R1_Connect_PIN
	DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_Low);
	Keypad_Active_Col = Keypad_Get_Active_Column();
		DIO_Write_Channel(Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PORT, Keypad_CFG[Keypad_R1_Index].Keypad_Rx_or_Cx_PIN, PIN_High);
	Keypad_Active_Row = Keypad_R1_Index;
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
				Keypad_Active_Row = Keypad_Row_Index;
				break;
			}
		}
	}
	if (Keypad_Active_Col != Keypad_Col_NULL)
    17ea:	cf 3f       	cpi	r28, 0xFF	; 255
    17ec:	89 f0       	breq	.+34     	; 0x1810 <Keypad_Read_Character+0xa2>
	{
		SW_Value = Keypad_SW_Values[Keypad_Active_Row][Keypad_Active_Col-4];
    17ee:	2d 2f       	mov	r18, r29
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	ec 2f       	mov	r30, r28
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	cf 01       	movw	r24, r30
    17f8:	04 97       	sbiw	r24, 0x04	; 4
    17fa:	f9 01       	movw	r30, r18
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	ef 59       	subi	r30, 0x9F	; 159
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	e8 0f       	add	r30, r24
    180a:	f9 1f       	adc	r31, r25
    180c:	80 81       	ld	r24, Z
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <Keypad_Read_Character+0xa4>
{
	// copy read mode from local variable to global variable
	Keypad_GRead_Mode = Keypad_Read_Mode;
	uint8 Keypad_Active_Col = Keypad_Col_NULL;
	uint8 Keypad_Active_Row = Keypad_R2_Index;
	uint8 SW_Value = Keypad_SW_NULL;
    1810:	8e e4       	ldi	r24, 0x4E	; 78
	{
		SW_Value = Keypad_SW_Values[Keypad_Active_Row][Keypad_Active_Col-4];
	}
	
	return SW_Value;	// if no Switch is pressed SW_Value is Keypad_SW_NULL defined in Keypad_CFg.h
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	08 95       	ret

0000181c <LCD_Helper_Send_Data_Bus>:
	LCD_Send_Command(LCD_DDRAM + Line + Column);
}

void LCD_Clear(void)
{
	LCD_Send_Command(LCD_Display_Clear);
    181c:	cf 93       	push	r28
    181e:	c8 2f       	mov	r28, r24
    1820:	48 2f       	mov	r20, r24
    1822:	41 70       	andi	r20, 0x01	; 1
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	88 e3       	ldi	r24, 0x38	; 56
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    182e:	c1 fb       	bst	r28, 1
    1830:	44 27       	eor	r20, r20
    1832:	40 f9       	bld	r20, 0
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	88 e3       	ldi	r24, 0x38	; 56
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    183e:	c2 fb       	bst	r28, 2
    1840:	44 27       	eor	r20, r20
    1842:	40 f9       	bld	r20, 0
    1844:	62 e0       	ldi	r22, 0x02	; 2
    1846:	88 e3       	ldi	r24, 0x38	; 56
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    184e:	c3 fb       	bst	r28, 3
    1850:	44 27       	eor	r20, r20
    1852:	40 f9       	bld	r20, 0
    1854:	63 e0       	ldi	r22, 0x03	; 3
    1856:	88 e3       	ldi	r24, 0x38	; 56
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    185e:	c4 fb       	bst	r28, 4
    1860:	44 27       	eor	r20, r20
    1862:	40 f9       	bld	r20, 0
    1864:	64 e0       	ldi	r22, 0x04	; 4
    1866:	88 e3       	ldi	r24, 0x38	; 56
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    186e:	c5 fb       	bst	r28, 5
    1870:	44 27       	eor	r20, r20
    1872:	40 f9       	bld	r20, 0
    1874:	65 e0       	ldi	r22, 0x05	; 5
    1876:	88 e3       	ldi	r24, 0x38	; 56
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    187e:	c6 fb       	bst	r28, 6
    1880:	44 27       	eor	r20, r20
    1882:	40 f9       	bld	r20, 0
    1884:	66 e0       	ldi	r22, 0x06	; 6
    1886:	88 e3       	ldi	r24, 0x38	; 56
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    188e:	4c 2f       	mov	r20, r28
    1890:	44 1f       	adc	r20, r20
    1892:	44 27       	eor	r20, r20
    1894:	44 1f       	adc	r20, r20
    1896:	67 e0       	ldi	r22, 0x07	; 7
    1898:	88 e3       	ldi	r24, 0x38	; 56
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <LCD_Display_Character>:
    18a4:	cf 93       	push	r28
    18a6:	c8 2f       	mov	r28, r24
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	8b e3       	ldi	r24, 0x3B	; 59
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    18b4:	8c 2f       	mov	r24, r28
    18b6:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_Helper_Send_Data_Bus>
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <LCD_Send_Command>:
    18be:	cf 93       	push	r28
    18c0:	c8 2f       	mov	r28, r24
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	8b e3       	ldi	r24, 0x3B	; 59
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    18ce:	8c 2f       	mov	r24, r28
    18d0:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_Helper_Send_Data_Bus>
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <LCD_GoTO_XY>:
    18d8:	86 0f       	add	r24, r22
    18da:	80 58       	subi	r24, 0x80	; 128
    18dc:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
    18e0:	08 95       	ret

000018e2 <LCD_Kick1>:
#endif	
}

void LCD_Kick1(void)
{
	DIO_Write_Channel(LCD_EN_PORT, LCD_EN_PIN, PIN_High);
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	8b e3       	ldi	r24, 0x3B	; 59
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    18ee:	08 95       	ret

000018f0 <LCD_Kick2>:
}

void LCD_Kick2(void)
{
	DIO_Write_Channel(LCD_EN_PORT, LCD_EN_PIN, PIN_Low);
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	62 e0       	ldi	r22, 0x02	; 2
    18f4:	8b e3       	ldi	r24, 0x3B	; 59
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
    18fc:	08 95       	ret

000018fe <LM35_getTemperature>:
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	00 d0       	rcall	.+0      	; 0x1918 <LM35_getTemperature+0x1a>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	4c 01       	movw	r8, r24
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 2b 10 	call	0x2056	; 0x2056 <ADC_Read>
    1928:	49 81       	ldd	r20, Y+1	; 0x01
    192a:	5a 81       	ldd	r21, Y+2	; 0x02
    192c:	0f 2e       	mov	r0, r31
    192e:	fe ee       	ldi	r31, 0xEE	; 238
    1930:	af 2e       	mov	r10, r31
    1932:	f0 2d       	mov	r31, r0
    1934:	68 94       	set
    1936:	bb 24       	eor	r11, r11
    1938:	b1 f8       	bld	r11, 1
    193a:	c1 2c       	mov	r12, r1
    193c:	d1 2c       	mov	r13, r1
    193e:	e1 2c       	mov	r14, r1
    1940:	f1 2c       	mov	r15, r1
    1942:	00 e0       	ldi	r16, 0x00	; 0
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	24 2f       	mov	r18, r20
    1948:	35 2f       	mov	r19, r21
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__muldi3>
    195a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__floatundisf>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 ed       	ldi	r19, 0xD0	; 208
    1962:	4f eb       	ldi	r20, 0xBF	; 191
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 38 12 	call	0x2470	; 0x2470 <__divsf3>
    196a:	0e 94 aa 12 	call	0x2554	; 0x2554 <__fixunssfsi>
    196e:	f4 01       	movw	r30, r8
    1970:	60 83       	st	Z, r22
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	08 95       	ret

00001990 <OS_LCD_Display>:
	vTaskDelay(10);
}


void OS_LCD_Display(void* pvParamter)
{
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	00 d0       	rcall	.+0      	; 0x1996 <OS_LCD_Display+0x6>
    1996:	1f 92       	push	r1
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	vTaskDelay(15); //wait 15ms for LCD_Init to be complete
    199c:	8f e0       	ldi	r24, 0x0F	; 15
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	
	//delete task (OS_LCD_Init)
	if( OS_LCD_Init_Handle != PTR_NULL && LCD_Init_Flag == 0)
    19a4:	80 91 7d 07 	lds	r24, 0x077D	; 0x80077d <OS_LCD_Init_Handle>
    19a8:	90 91 7e 07 	lds	r25, 0x077E	; 0x80077e <OS_LCD_Init_Handle+0x1>
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	31 f0       	breq	.+12     	; 0x19bc <OS_LCD_Display+0x2c>
    19b0:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <LCD_Init_Flag>
    19b4:	21 11       	cpse	r18, r1
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <OS_LCD_Display+0x2c>
	{
		vTaskDelete( OS_LCD_Init_Handle );
    19b8:	0e 94 2c 07 	call	0xe58	; 0xe58 <vTaskDelete>
	}
	
	uint8 data = 0;
    19bc:	19 82       	std	Y+1, r1	; 0x01
	BaseType_t LCD_Queue1_State = pdPASS;
	portTickType Freq = 20; //the task periodicity in the wait state
	portTickType Start = xTaskGetTickCount();
    19be:	0e 94 b6 07 	call	0xf6c	; 0xf6c <xTaskGetTickCount>
    19c2:	9b 83       	std	Y+3, r25	; 0x03
    19c4:	8a 83       	std	Y+2, r24	; 0x02
	while (1)
	{
		switch(LCD_Run_State)
    19c6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <LCD_Run_State>
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	b9 f1       	breq	.+110    	; 0x1a3c <OS_LCD_Display+0xac>
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <OS_LCD_Display+0x48>
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <OS_LCD_Display+0x46>
    19d4:	43 c0       	rjmp	.+134    	; 0x1a5c <OS_LCD_Display+0xcc>
    19d6:	f7 cf       	rjmp	.-18     	; 0x19c6 <OS_LCD_Display+0x36>
		{
			case LCD_Write_string:		//display the string stored in LCD_Queue1
			if (pdTRUE == xSemaphoreTake(LCD_Queue1_Semaphore,10)) 	//only one task can access the queue to read or write at a time
    19d8:	6a e0       	ldi	r22, 0x0A	; 10
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <LCD_Queue1_Semaphore>
    19e0:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <LCD_Queue1_Semaphore+0x1>
    19e4:	0e 94 a8 04 	call	0x950	; 0x950 <xQueueSemaphoreTake>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <OS_LCD_Display+0x36>
			{
				while(1)				//continue printing as long as the queue is not empty
				{
					LCD_Queue1_State = xQueueReceive(LCD_Queue1,&data,0);
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	be 01       	movw	r22, r28
    19f2:	6f 5f       	subi	r22, 0xFF	; 255
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <LCD_Queue1>
    19fa:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <LCD_Queue1+0x1>
    19fe:	0e 94 1c 04 	call	0x838	; 0x838 <xQueueReceive>
					if (LCD_Queue1_State == pdPASS)
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	61 f4       	brne	.+24     	; 0x1a1e <OS_LCD_Display+0x8e>
					{
						LCD_Display_Character(data);
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_Display_Character>
						LCD_Kick1();
    1a0c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
						vTaskDelay(1);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
						LCD_Kick2();
    1a18:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
					else
					{
						LCD_Run_State = LCD_Wait;	//when the queue is empty go to the wait state
						break;
					}
				}
    1a1c:	e7 cf       	rjmp	.-50     	; 0x19ec <OS_LCD_Display+0x5c>
						vTaskDelay(1);
						LCD_Kick2();
					}
					else
					{
						LCD_Run_State = LCD_Wait;	//when the queue is empty go to the wait state
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
						break;
					}
				}
				xSemaphoreGive(LCD_Queue1_Semaphore); //make LCD_Queue1_Semaphore available for the next usage
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <LCD_Queue1_Semaphore>
    1a32:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <LCD_Queue1_Semaphore+0x1>
    1a36:	0e 94 92 03 	call	0x724	; 0x724 <xQueueGenericSend>
    1a3a:	c5 cf       	rjmp	.-118    	; 0x19c6 <OS_LCD_Display+0x36>
			}
			break;
			
			case LCD_Write_Clear:	//clear the LCD for the next Display
			LCD_Send_Command(LCD_Display_Clear);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
			LCD_Kick1();
    1a42:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
			vTaskDelay(1);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Kick2();
    1a4e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
			vTaskDelay(1);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			break;
    1a5a:	b5 cf       	rjmp	.-150    	; 0x19c6 <OS_LCD_Display+0x36>
			
			case LCD_Wait:			//waiting for a change in the state to take action (Clear or Display)
			vTaskDelayUntil(&Start,Freq);
    1a5c:	64 e1       	ldi	r22, 0x14	; 20
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	ce 01       	movw	r24, r28
    1a62:	02 96       	adiw	r24, 0x02	; 2
    1a64:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <xTaskDelayUntil>
			break;
    1a68:	ae cf       	rjmp	.-164    	; 0x19c6 <OS_LCD_Display+0x36>

00001a6a <main>:
#include <main.h>

int main(void)
{
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	28 97       	sbiw	r28, 0x08	; 8
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
	//initialize all the PORTs
	PORT_Init();
    1a84:	0e 94 73 11 	call	0x22e6	; 0x22e6 <PORT_Init>
	//initialize the keypad
	Keypad_Init();
    1a88:	0e 94 99 0b 	call	0x1732	; 0x1732 <Keypad_Init>
	//initialize the ADC
	ADC_Config_t PS_ADC_Config = {PTR_NULL,ADC_VREF_AVCC, ADC_Channel_ADC0, ADC_Auto_Trigger_Disable, ADC_Interrupt_State_Disable, ADC_Prescale_64, ADC_Trigger_Free};
    1a8c:	88 e0       	ldi	r24, 0x08	; 8
    1a8e:	e4 e9       	ldi	r30, 0x94	; 148
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	de 01       	movw	r26, r28
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	01 90       	ld	r0, Z+
    1a98:	0d 92       	st	X+, r0
    1a9a:	8a 95       	dec	r24
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <main+0x2c>
	ADC_Set_Config(&PS_ADC_Config);
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 3f 10 	call	0x207e	; 0x207e <ADC_Set_Config>
	
	//Create 3 tasks to initialize the LCD, Display on the LCD, Control the System respectively
 	xTaskCreate(OS_LCD_Init,(const char*)"Task0",85,PTR_NULL,OS_LCD_Init_PRI,&OS_LCD_Init_Handle);
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	fd e7       	ldi	r31, 0x7D	; 125
    1aaa:	ef 2e       	mov	r14, r31
    1aac:	f7 e0       	ldi	r31, 0x07	; 7
    1aae:	ff 2e       	mov	r15, r31
    1ab0:	f0 2d       	mov	r31, r0
    1ab2:	03 e0       	ldi	r16, 0x03	; 3
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	45 e5       	ldi	r20, 0x55	; 85
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	65 eb       	ldi	r22, 0xB5	; 181
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	8a ee       	ldi	r24, 0xEA	; 234
    1ac2:	9d e0       	ldi	r25, 0x0D	; 13
    1ac4:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskCreate>
	xTaskCreate(OS_LCD_Display,(const char*)"Task1",85,PTR_NULL,OS_LCD_Display_PRI,&OS_LCD_Display_Char_Handle);
    1ac8:	0f 2e       	mov	r0, r31
    1aca:	f9 e7       	ldi	r31, 0x79	; 121
    1acc:	ef 2e       	mov	r14, r31
    1ace:	f7 e0       	ldi	r31, 0x07	; 7
    1ad0:	ff 2e       	mov	r15, r31
    1ad2:	f0 2d       	mov	r31, r0
    1ad4:	02 e0       	ldi	r16, 0x02	; 2
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	45 e5       	ldi	r20, 0x55	; 85
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	6b eb       	ldi	r22, 0xBB	; 187
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	9c e0       	ldi	r25, 0x0C	; 12
    1ae6:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskCreate>
	xTaskCreate(System_Control,(const char*)"Task2",85,PTR_NULL,System_Control_PRI,&System_Control_Handle);
    1aea:	0f 2e       	mov	r0, r31
    1aec:	f7 e7       	ldi	r31, 0x77	; 119
    1aee:	ef 2e       	mov	r14, r31
    1af0:	f7 e0       	ldi	r31, 0x07	; 7
    1af2:	ff 2e       	mov	r15, r31
    1af4:	f0 2d       	mov	r31, r0
    1af6:	01 e0       	ldi	r16, 0x01	; 1
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	45 e5       	ldi	r20, 0x55	; 85
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	61 ec       	ldi	r22, 0xC1	; 193
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	8a ed       	ldi	r24, 0xDA	; 218
    1b06:	9e e0       	ldi	r25, 0x0E	; 14
    1b08:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskCreate>
	
	//this task is created here because it's related to life safety because it measures the temperature and give an alarm if (Temperature_Threshold < Current_Temperature)
	//also the motor of the fan or air conditioner will not start until the user login and set the desired temperature within the accepted range from (15 to 40)
	//if you want the alarm to work after login create this task inside the System_Control task when password equals to system password
	xTaskCreate(OS_Read_Temp,(const char*)"Task3",85,PTR_NULL,OS_Read_Temp_PRI,&OS_Read_Temp_Handle);
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	fb e7       	ldi	r31, 0x7B	; 123
    1b10:	ef 2e       	mov	r14, r31
    1b12:	f7 e0       	ldi	r31, 0x07	; 7
    1b14:	ff 2e       	mov	r15, r31
    1b16:	f0 2d       	mov	r31, r0
    1b18:	00 e0       	ldi	r16, 0x00	; 0
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	45 e5       	ldi	r20, 0x55	; 85
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	67 ec       	ldi	r22, 0xC7	; 199
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8f e4       	ldi	r24, 0x4F	; 79
    1b28:	9e e0       	ldi	r25, 0x0E	; 14
    1b2a:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskCreate>
	
	//create Semaphore for the LCD_Queue1
	vSemaphoreCreateBinary(LCD_Queue1_Semaphore);
    1b2e:	43 e0       	ldi	r20, 0x03	; 3
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	0e 94 51 03 	call	0x6a2	; 0x6a2 <xQueueGenericCreate>
    1b38:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <LCD_Queue1_Semaphore+0x1>
    1b3c:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <LCD_Queue1_Semaphore>
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <main+0xe8>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	0e 94 92 03 	call	0x724	; 0x724 <xQueueGenericSend>

	//Call the OS scheduler to control the tasks of the Program
	vTaskStartScheduler();
    1b52:	0e 94 84 07 	call	0xf08	; 0xf08 <vTaskStartScheduler>
}
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	28 96       	adiw	r28, 0x08	; 8
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	08 95       	ret

00001b72 <Add_Message>:
		vTaskDelay(20);  // periodicity to read the temperature from the sensor and to control the motor and the alarm as long as user not reading the the current temperature 
	}
}

void Add_Message(char *message) //inset the message into the queue to be printed by the LCD
{
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	8c 01       	movw	r16, r24
	//only one task can access the queue to read or write at a time
	if (pdTRUE == xSemaphoreTake(LCD_Queue1_Semaphore,10))
    1b7a:	6a e0       	ldi	r22, 0x0A	; 10
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <LCD_Queue1_Semaphore>
    1b82:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <LCD_Queue1_Semaphore+0x1>
    1b86:	0e 94 a8 04 	call	0x950	; 0x950 <xQueueSemaphoreTake>
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	f9 f4       	brne	.+62     	; 0x1bcc <Add_Message+0x5a>
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <Add_Message+0x34>
	{
		for(uint8 cnt=0; message[cnt]; cnt++)
		{
			xQueueSend(LCD_Queue1, &message[cnt], 10);
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	4a e0       	ldi	r20, 0x0A	; 10
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <LCD_Queue1>
    1b9a:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <LCD_Queue1+0x1>
    1b9e:	0e 94 92 03 	call	0x724	; 0x724 <xQueueGenericSend>
void Add_Message(char *message) //inset the message into the queue to be printed by the LCD
{
	//only one task can access the queue to read or write at a time
	if (pdTRUE == xSemaphoreTake(LCD_Queue1_Semaphore,10))
	{
		for(uint8 cnt=0; message[cnt]; cnt++)
    1ba2:	cf 5f       	subi	r28, 0xFF	; 255
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <Add_Message+0x36>
    1ba6:	c0 e0       	ldi	r28, 0x00	; 0
    1ba8:	b8 01       	movw	r22, r16
    1baa:	6c 0f       	add	r22, r28
    1bac:	71 1d       	adc	r23, r1
    1bae:	fb 01       	movw	r30, r22
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	ed cf       	rjmp	.-38     	; 0x1b90 <Add_Message+0x1e>
		{
			xQueueSend(LCD_Queue1, &message[cnt], 10);
		}
		xSemaphoreGive(LCD_Queue1_Semaphore); //make LCD_Queue1_Semaphore available for the next usage
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <LCD_Queue1_Semaphore>
    1bc4:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <LCD_Queue1_Semaphore+0x1>
    1bc8:	0e 94 92 03 	call	0x724	; 0x724 <xQueueGenericSend>
	}
}
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <OS_LCD_Init>:

void OS_LCD_Init(void* pvParamter)
{

	//this loop will initialize the LCD
	while(LCD_Init_Flag)
    1bd4:	4c c0       	rjmp	.+152    	; 0x1c6e <OS_LCD_Init+0x9a>
	{
		switch(LCD_Init_State)
    1bd6:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <LCD_Init_State>
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	a9 f0       	breq	.+42     	; 0x1c08 <OS_LCD_Init+0x34>
    1bde:	28 f0       	brcs	.+10     	; 0x1bea <OS_LCD_Init+0x16>
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	09 f1       	breq	.+66     	; 0x1c26 <OS_LCD_Init+0x52>
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 f1       	breq	.+100    	; 0x1c4c <OS_LCD_Init+0x78>
    1be8:	42 c0       	rjmp	.+132    	; 0x1c6e <OS_LCD_Init+0x9a>
		{
			case LCD_Step0:
			LCD_Send_Command(LCD_8Bit);
    1bea:	88 e3       	ldi	r24, 0x38	; 56
    1bec:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
			LCD_Kick1();
    1bf0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
			vTaskDelay(1);	//time delay 1ms
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Kick2();
    1bfc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
			LCD_Init_State = LCD_Step1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <LCD_Init_State>
			break;
    1c06:	33 c0       	rjmp	.+102    	; 0x1c6e <OS_LCD_Init+0x9a>
			
			case LCD_Step1:
			LCD_Send_Command(LCD_Display_On);
    1c08:	8c e0       	ldi	r24, 0x0C	; 12
    1c0a:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
			LCD_Kick1();
    1c0e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
			vTaskDelay(1);	//time delay 1ms
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Kick2();
    1c1a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
			LCD_Init_State = LCD_Step2;
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <LCD_Init_State>
			break;
    1c24:	24 c0       	rjmp	.+72     	; 0x1c6e <OS_LCD_Init+0x9a>

			case LCD_Step2:
			LCD_Send_Command(LCD_Display_Clear);
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
			LCD_Kick1();
    1c2c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
			vTaskDelay(1);	//time delay 1ms
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Kick2();
    1c38:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
			vTaskDelay(4);
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Init_State = LCD_Step3;
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <LCD_Init_State>
			break;
    1c4a:	11 c0       	rjmp	.+34     	; 0x1c6e <OS_LCD_Init+0x9a>
			
			case LCD_Step3:
			LCD_Send_Command(LCD_Shift_Cursor_Disp_fix);
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_Send_Command>
			LCD_Kick1();
    1c52:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
			vTaskDelay(1);	//time delay 1ms
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Kick2();
    1c5e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
			vTaskDelay(1);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
 			LCD_Init_Flag = 0;	//this flag indicates that the LCD initialization is done successfully
    1c6a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <LCD_Init_Flag>

void OS_LCD_Init(void* pvParamter)
{

	//this loop will initialize the LCD
	while(LCD_Init_Flag)
    1c6e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <LCD_Init_Flag>
    1c72:	81 11       	cpse	r24, r1
    1c74:	b0 cf       	rjmp	.-160    	; 0x1bd6 <OS_LCD_Init+0x2>
			break;
		}
	}
	
	//create a queue to store the string to be displayed on the LCD 
	LCD_Queue1 = xQueueCreate(20, sizeof(uint8));
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	84 e1       	ldi	r24, 0x14	; 20
    1c7c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <xQueueGenericCreate>
    1c80:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <LCD_Queue1+0x1>
    1c84:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <LCD_Queue1>
	
	//insert the string into the queue
	Add_Message("Enter Password: ");
    1c88:	8d ec       	ldi	r24, 0xCD	; 205
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
	
	//set the state for the LCD
	LCD_Run_State = LCD_Write_string;
    1c90:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
	
	//LCD initialization is completed and the task goes to the waiting state and it will be deleted in task (OS_LCD_Display)
	vTaskDelay(10);
    1c94:	8a e0       	ldi	r24, 0x0A	; 10
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
    1c9c:	08 95       	ret

00001c9e <OS_Read_Temp>:
		vTaskDelay(160); //Periodicity to read pressed buttons from the user
	}
}

void OS_Read_Temp(void* pvParamter)
{
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	64 97       	sbiw	r28, 0x14	; 20
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
	vTaskDelay(15);
    1cb2:	8f e0       	ldi	r24, 0x0F	; 15
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	while (1)
	{

		uint8 Temp_Arr[20] = "Current Temp: ";	
    1cba:	8f e0       	ldi	r24, 0x0F	; 15
    1cbc:	ec e9       	ldi	r30, 0x9C	; 156
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	de 01       	movw	r26, r28
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	0d 92       	st	X+, r0
    1cc8:	8a 95       	dec	r24
    1cca:	e1 f7       	brne	.-8      	; 0x1cc4 <OS_Read_Temp+0x26>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	70 96       	adiw	r30, 0x10	; 16
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	df 01       	movw	r26, r30
    1cd4:	1d 92       	st	X+, r1
    1cd6:	8a 95       	dec	r24
    1cd8:	e9 f7       	brne	.-6      	; 0x1cd4 <OS_Read_Temp+0x36>
		uint8 Temp_Index = 13;
		uint8 Cnt_Temp_Digits = 0;
		LM35_getTemperature(&Current_Temperature);
    1cda:	8f e7       	ldi	r24, 0x7F	; 127
    1cdc:	97 e0       	ldi	r25, 0x07	; 7
    1cde:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LM35_getTemperature>
		uint8 Temp_Copy = Current_Temperature;		
    1ce2:	50 91 7f 07 	lds	r21, 0x077F	; 0x80077f <Current_Temperature>
    1ce6:	85 2f       	mov	r24, r21
	while (1)
	{

		uint8 Temp_Arr[20] = "Current Temp: ";	
		uint8 Temp_Index = 13;
		uint8 Cnt_Temp_Digits = 0;
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
		LM35_getTemperature(&Current_Temperature);
		uint8 Temp_Copy = Current_Temperature;		
		//if Temperature != 0, calculate the number of digits
		while(Temp_Copy)
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <OS_Read_Temp+0x5e>
		{
			Temp_Copy /= 10;
    1cec:	2d ec       	ldi	r18, 0xCD	; 205
    1cee:	82 9f       	mul	r24, r18
    1cf0:	81 2d       	mov	r24, r1
    1cf2:	11 24       	eor	r1, r1
    1cf4:	86 95       	lsr	r24
    1cf6:	86 95       	lsr	r24
    1cf8:	86 95       	lsr	r24
			Cnt_Temp_Digits++;
    1cfa:	9f 5f       	subi	r25, 0xFF	; 255
		uint8 Temp_Index = 13;
		uint8 Cnt_Temp_Digits = 0;
		LM35_getTemperature(&Current_Temperature);
		uint8 Temp_Copy = Current_Temperature;		
		//if Temperature != 0, calculate the number of digits
		while(Temp_Copy)
    1cfc:	81 11       	cpse	r24, r1
    1cfe:	f6 cf       	rjmp	.-20     	; 0x1cec <OS_Read_Temp+0x4e>
    1d00:	85 2f       	mov	r24, r21
    1d02:	1b c0       	rjmp	.+54     	; 0x1d3a <OS_Read_Temp+0x9c>
		}
		Temp_Copy = Current_Temperature;
		//if Temperature != 0, store the the Temperature in the array
		while(Cnt_Temp_Digits)
		{
			Temp_Arr[Temp_Index+Cnt_Temp_Digits] = (Temp_Copy%10)+'0';
    1d04:	e9 2f       	mov	r30, r25
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	3d 96       	adiw	r30, 0x0d	; 13
    1d0a:	21 e0       	ldi	r18, 0x01	; 1
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	2c 0f       	add	r18, r28
    1d10:	3d 1f       	adc	r19, r29
    1d12:	e2 0f       	add	r30, r18
    1d14:	f3 1f       	adc	r31, r19
    1d16:	2d ec       	ldi	r18, 0xCD	; 205
    1d18:	82 9f       	mul	r24, r18
    1d1a:	21 2d       	mov	r18, r1
    1d1c:	11 24       	eor	r1, r1
    1d1e:	26 95       	lsr	r18
    1d20:	26 95       	lsr	r18
    1d22:	26 95       	lsr	r18
    1d24:	42 2f       	mov	r20, r18
    1d26:	44 0f       	add	r20, r20
    1d28:	34 2f       	mov	r19, r20
    1d2a:	33 0f       	add	r19, r19
    1d2c:	33 0f       	add	r19, r19
    1d2e:	34 0f       	add	r19, r20
    1d30:	83 1b       	sub	r24, r19
    1d32:	80 5d       	subi	r24, 0xD0	; 208
    1d34:	80 83       	st	Z, r24
			Temp_Copy /= 10;
    1d36:	82 2f       	mov	r24, r18
			Cnt_Temp_Digits--;
    1d38:	91 50       	subi	r25, 0x01	; 1
			Temp_Copy /= 10;
			Cnt_Temp_Digits++;
		}
		Temp_Copy = Current_Temperature;
		//if Temperature != 0, store the the Temperature in the array
		while(Cnt_Temp_Digits)
    1d3a:	91 11       	cpse	r25, r1
    1d3c:	e3 cf       	rjmp	.-58     	; 0x1d04 <OS_Read_Temp+0x66>
			Temp_Copy /= 10;
			Cnt_Temp_Digits--;
		}
		
		//to control the Motor of the Fan or Air conditioner in case (Desired_Temperature < Current_Temperature) 
		uint8 Motor_Alarm_State = (Desired_Temperature < Current_Temperature) ;
    1d3e:	41 e0       	ldi	r20, 0x01	; 1
    1d40:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Desired_Temperature>
    1d44:	85 17       	cp	r24, r21
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <OS_Read_Temp+0xac>
    1d48:	40 e0       	ldi	r20, 0x00	; 0
		DIO_Write_Channel(Motor_PORT, Motor_PIN, Motor_Alarm_State);
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	8b e3       	ldi	r24, 0x3B	; 59
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
		
		//to control the alarm in case of very high temperature (Temperature_Threshold < Current_Temperature)
		Motor_Alarm_State = (Temperature_Threshold < Current_Temperature);
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <Current_Temperature>
    1d5a:	8d 33       	cpi	r24, 0x3D	; 61
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <OS_Read_Temp+0xc2>
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
		DIO_Write_Channel(ALarm_PORT, ALarm_PIN, Motor_Alarm_State);
    1d60:	65 e0       	ldi	r22, 0x05	; 5
    1d62:	8b e3       	ldi	r24, 0x3B	; 59
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>

		if(System_State == System_Current_Temp)
    1d6a:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <System_State>
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	89 f4       	brne	.+34     	; 0x1d94 <OS_Read_Temp+0xf6>
		{
			Add_Message((char*)Temp_Arr);
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
			LCD_Run_State = LCD_Write_Clear;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
			vTaskDelay(30);
    1d80:	8e e1       	ldi	r24, 0x1E	; 30
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			LCD_Run_State = LCD_Write_string;
    1d88:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
			vTaskDelay(2000);//when the user wants to see the current temperature the last measured one will be displayed for two seconds without update
    1d8c:	80 ed       	ldi	r24, 0xD0	; 208
    1d8e:	97 e0       	ldi	r25, 0x07	; 7
    1d90:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
		}
		vTaskDelay(20);  // periodicity to read the temperature from the sensor and to control the motor and the alarm as long as user not reading the the current temperature 
    1d94:	84 e1       	ldi	r24, 0x14	; 20
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	}
    1d9c:	8e cf       	rjmp	.-228    	; 0x1cba <OS_Read_Temp+0x1c>

00001d9e <OS_LCD_GoTO_XY>:
	}
}

void OS_LCD_GoTO_XY(uint8 Line, uint8 Column) //move to certain line and column in the LCD
{
	LCD_GoTO_XY(Line, Column);
    1d9e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <LCD_GoTO_XY>
	LCD_Kick1();
    1da2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
	vTaskDelay(1);	//time delay 1ms
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	LCD_Kick2();
    1dae:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
    1db2:	08 95       	ret

00001db4 <System_Control>:
	}
}

void System_Control(void* pvParamter)
{
	uint8 Temp_Copy = Desired_Temperature;
    1db4:	f0 90 91 00 	lds	r15, 0x0091	; 0x800091 <Desired_Temperature>
	vTaskDelay(15);	 //wait 15ms for LCD_Init to be completed
    1db8:	8f e0       	ldi	r24, 0x0F	; 15
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	uint16 Password = 0;
    1dc0:	c0 e0       	ldi	r28, 0x00	; 0
    1dc2:	d0 e0       	ldi	r29, 0x00	; 0
	uint16 Button = 'N';
	while(1)
	{
		if (System_State == System_Get_Password) //the default state when the system start
    1dc4:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <System_State>
    1dc8:	91 11       	cpse	r25, r1
    1dca:	51 c0       	rjmp	.+162    	; 0x1e6e <System_Control+0xba>
		{
			Button = Keypad_Read_Character(Keypad_Read_Single_Press);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 b7 0b 	call	0x176e	; 0x176e <Keypad_Read_Character>
    1dd2:	08 2f       	mov	r16, r24
    1dd4:	10 e0       	ldi	r17, 0x00	; 0
			if( '0' <= Button && Button <= '9')
    1dd6:	98 01       	movw	r18, r16
    1dd8:	20 53       	subi	r18, 0x30	; 48
    1dda:	31 09       	sbc	r19, r1
    1ddc:	2a 30       	cpi	r18, 0x0A	; 10
    1dde:	31 05       	cpc	r19, r1
    1de0:	c8 f4       	brcc	.+50     	; 0x1e14 <System_Control+0x60>
			{
				LCD_Display_Character(Button); //simple case no need to make a semaphore for the LCD
    1de2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_Display_Character>
				LCD_Kick1();
    1de6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
				vTaskDelay(1);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				LCD_Kick2();
    1df2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
				Password *= 10;
    1df6:	ce 01       	movw	r24, r28
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	cc 0f       	add	r28, r28
    1dfe:	dd 1f       	adc	r29, r29
    1e00:	cc 0f       	add	r28, r28
    1e02:	dd 1f       	adc	r29, r29
    1e04:	cc 0f       	add	r28, r28
    1e06:	dd 1f       	adc	r29, r29
    1e08:	c8 0f       	add	r28, r24
    1e0a:	d9 1f       	adc	r29, r25
				Password += (Button -'0');
    1e0c:	c0 0f       	add	r28, r16
    1e0e:	d1 1f       	adc	r29, r17
    1e10:	e0 97       	sbiw	r28, 0x30	; 48
    1e12:	1c c1       	rjmp	.+568    	; 0x204c <System_Control+0x298>
			}
			else if (Button == '=') //end of the Password
    1e14:	0d 33       	cpi	r16, 0x3D	; 61
    1e16:	11 05       	cpc	r17, r1
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <System_Control+0x68>
    1e1a:	18 c1       	rjmp	.+560    	; 0x204c <System_Control+0x298>
			{
				if (Password == System_Password) //correct password
    1e1c:	c2 3d       	cpi	r28, 0xD2	; 210
    1e1e:	d4 40       	sbci	r29, 0x04	; 4
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <System_Control+0x7a>
				{
					System_State = System_Main_Menu;	//move the system state to System_Main_Menu to display the features that the user can monitor and control
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
					Add_Message("Enter Password: ");
					LCD_Run_State = LCD_Write_Clear;
					vTaskDelay(30);
					LCD_Run_State = LCD_Write_string;
				}
				Password = 0;
    1e28:	c0 e0       	ldi	r28, 0x00	; 0
    1e2a:	d0 e0       	ldi	r29, 0x00	; 0
    1e2c:	0f c1       	rjmp	.+542    	; 0x204c <System_Control+0x298>
				{
					System_State = System_Main_Menu;	//move the system state to System_Main_Menu to display the features that the user can monitor and control
				}
				else //handling for a wrong password
				{
					Add_Message("Invalid Input");	
    1e2e:	8e ed       	ldi	r24, 0xDE	; 222
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
					LCD_Run_State = LCD_Write_Clear;
    1e36:	c1 e0       	ldi	r28, 0x01	; 1
    1e38:	c0 93 93 00 	sts	0x0093, r28	; 0x800093 <LCD_Run_State>
					vTaskDelay(30);
    1e3c:	8e e1       	ldi	r24, 0x1E	; 30
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					LCD_Run_State = LCD_Write_string;
    1e44:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
					vTaskDelay(1000);
    1e48:	88 ee       	ldi	r24, 0xE8	; 232
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					Add_Message("Enter Password: ");
    1e50:	8d ec       	ldi	r24, 0xCD	; 205
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
					LCD_Run_State = LCD_Write_Clear;
    1e58:	c0 93 93 00 	sts	0x0093, r28	; 0x800093 <LCD_Run_State>
					vTaskDelay(30);
    1e5c:	8e e1       	ldi	r24, 0x1E	; 30
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					LCD_Run_State = LCD_Write_string;
    1e64:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
				}
				Password = 0;
    1e68:	c0 e0       	ldi	r28, 0x00	; 0
    1e6a:	d0 e0       	ldi	r29, 0x00	; 0
    1e6c:	ef c0       	rjmp	.+478    	; 0x204c <System_Control+0x298>
			}
		}	
		else if(System_State == System_Main_Menu) //display the features that the user can monitor and control
    1e6e:	91 30       	cpi	r25, 0x01	; 1
    1e70:	89 f5       	brne	.+98     	; 0x1ed4 <System_Control+0x120>
		{
			LCD_Run_State = LCD_Write_Clear;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
			vTaskDelay(30); //give a window of 30ms to OS_LCD_Display task to clear the screen
    1e78:	8e e1       	ldi	r24, 0x1E	; 30
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			Add_Message("1) Current Temp");
    1e80:	8c ee       	ldi	r24, 0xEC	; 236
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
			LCD_Run_State = LCD_Write_string;
    1e88:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
			vTaskDelay(40); //give a window of 40ms to OS_LCD_Display task to display the string
    1e8c:	88 e2       	ldi	r24, 0x28	; 40
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			OS_LCD_GoTO_XY(LCD_Line2, LCD_Col1);
    1e94:	60 e0       	ldi	r22, 0x00	; 0
    1e96:	80 e4       	ldi	r24, 0x40	; 64
    1e98:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <OS_LCD_GoTO_XY>
			Add_Message("2) Desired Temp");
    1e9c:	8c ef       	ldi	r24, 0xFC	; 252
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
			LCD_Run_State = LCD_Write_string;
    1ea4:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
			vTaskDelay(40);
    1ea8:	88 e2       	ldi	r24, 0x28	; 40
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			OS_LCD_GoTO_XY(LCD_Line3, LCD_Col1);
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	84 e1       	ldi	r24, 0x14	; 20
    1eb4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <OS_LCD_GoTO_XY>
			Add_Message("3) LED control");
    1eb8:	8c e0       	ldi	r24, 0x0C	; 12
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
			LCD_Run_State = LCD_Write_string;
    1ec0:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
			vTaskDelay(40);
    1ec4:	88 e2       	ldi	r24, 0x28	; 40
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
			System_State = System_Get_input;	//move the system state to System_Get_input get input from the user for which feature to access
    1ecc:	85 e0       	ldi	r24, 0x05	; 5
    1ece:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
    1ed2:	bc c0       	rjmp	.+376    	; 0x204c <System_Control+0x298>
		}
		else if(System_State == System_Get_input) //this state works after System_Main_Menu state to get input from the user for which feature he wants to access
    1ed4:	95 30       	cpi	r25, 0x05	; 5
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <System_Control+0x126>
    1ed8:	56 c0       	rjmp	.+172    	; 0x1f86 <System_Control+0x1d2>
		{
			Button = Keypad_Read_Character(Keypad_Read_Single_Press);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	0e 94 b7 0b 	call	0x176e	; 0x176e <Keypad_Read_Character>
			switch(Button)
    1ee0:	82 33       	cpi	r24, 0x32	; 50
    1ee2:	79 f0       	breq	.+30     	; 0x1f02 <System_Control+0x14e>
    1ee4:	83 33       	cpi	r24, 0x33	; 51
    1ee6:	19 f1       	breq	.+70     	; 0x1f2e <System_Control+0x17a>
    1ee8:	81 33       	cpi	r24, 0x31	; 49
    1eea:	b1 f5       	brne	.+108    	; 0x1f58 <System_Control+0x1a4>
			{
				case '1': //"1) Current Temp"
				System_State = System_Current_Temp; //update the system state to allow the OS_Read_Temp task to display the actual current temperature measured by the sensor to the user
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
				vTaskDelay(2000); //give a window of two seconds to display the actual current temperature
    1ef2:	80 ed       	ldi	r24, 0xD0	; 208
    1ef4:	97 e0       	ldi	r25, 0x07	; 7
    1ef6:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				System_State = System_Main_Menu; //return to the System_Main_Menu state
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
				break;
    1f00:	a5 c0       	rjmp	.+330    	; 0x204c <System_Control+0x298>
				
				case '2': //"2) Desired Temp"
				Temp_Copy = 0;
				LCD_Run_State = LCD_Write_Clear; //clear the LCD
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
				vTaskDelay(30); //give a window of 30ms to OS_LCD_Display task to clear the screen
    1f08:	8e e1       	ldi	r24, 0x1E	; 30
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				Add_Message("Desired Temp: ");
    1f10:	8b e1       	ldi	r24, 0x1B	; 27
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
				LCD_Run_State = LCD_Write_string;
    1f18:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
				vTaskDelay(40); //give a window of 40ms to OS_LCD_Display task to display the string
    1f1c:	88 e2       	ldi	r24, 0x28	; 40
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				System_State = System_Desired_Temp; //move the System_State to System_Desired_Temp to read the desired temperature from the user
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
				vTaskDelay(2000); //give a window of two seconds to display the actual current temperature
				System_State = System_Main_Menu; //return to the System_Main_Menu state
				break;
				
				case '2': //"2) Desired Temp"
				Temp_Copy = 0;
    1f2a:	f1 2c       	mov	r15, r1
				vTaskDelay(30); //give a window of 30ms to OS_LCD_Display task to clear the screen
				Add_Message("Desired Temp: ");
				LCD_Run_State = LCD_Write_string;
				vTaskDelay(40); //give a window of 40ms to OS_LCD_Display task to display the string
				System_State = System_Desired_Temp; //move the System_State to System_Desired_Temp to read the desired temperature from the user
				break;
    1f2c:	8f c0       	rjmp	.+286    	; 0x204c <System_Control+0x298>
				
				case '3': //"3) LED control"
				LCD_Run_State = LCD_Write_Clear;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
				vTaskDelay(30);
    1f34:	8e e1       	ldi	r24, 0x1E	; 30
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				Add_Message("Enter 1/0: ");
    1f3c:	8a e2       	ldi	r24, 0x2A	; 42
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
				LCD_Run_State = LCD_Write_string;
    1f44:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
				vTaskDelay(40);
    1f48:	88 e2       	ldi	r24, 0x28	; 40
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				System_State = System_LED_Control; //move the System_State to System_LED_Control to read user input 1/0 to turn on/off the LED respectively 
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
				break;
    1f56:	7a c0       	rjmp	.+244    	; 0x204c <System_Control+0x298>
				
				default: //invalid input
				if(Button != 'N') //'N' means no button is pressed
    1f58:	8e 34       	cpi	r24, 0x4E	; 78
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <System_Control+0x1aa>
    1f5c:	77 c0       	rjmp	.+238    	; 0x204c <System_Control+0x298>
				{
					LCD_Run_State = LCD_Write_Clear;
    1f5e:	11 e0       	ldi	r17, 0x01	; 1
    1f60:	10 93 93 00 	sts	0x0093, r17	; 0x800093 <LCD_Run_State>
					vTaskDelay(30);
    1f64:	8e e1       	ldi	r24, 0x1E	; 30
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					Add_Message("Invalid Input");
    1f6c:	8e ed       	ldi	r24, 0xDE	; 222
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
					LCD_Run_State = LCD_Write_string;
    1f74:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
					vTaskDelay(1000); //display the message for 1 second
    1f78:	88 ee       	ldi	r24, 0xE8	; 232
    1f7a:	93 e0       	ldi	r25, 0x03	; 3
    1f7c:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					System_State = System_Main_Menu;
    1f80:	10 93 80 07 	sts	0x0780, r17	; 0x800780 <System_State>
    1f84:	63 c0       	rjmp	.+198    	; 0x204c <System_Control+0x298>
				}
				
				break;
			}
		}
		else if(System_State == System_Desired_Temp) //read the desired temperature from the user
    1f86:	93 30       	cpi	r25, 0x03	; 3
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <System_Control+0x1d8>
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <System_Control+0x256>
		{
			Button = Keypad_Read_Character(Keypad_Read_Single_Press);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	0e 94 b7 0b 	call	0x176e	; 0x176e <Keypad_Read_Character>
    1f92:	18 2f       	mov	r17, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
			if( '0' <= Button && Button <= '9')
    1f96:	9c 01       	movw	r18, r24
    1f98:	20 53       	subi	r18, 0x30	; 48
    1f9a:	31 09       	sbc	r19, r1
    1f9c:	2a 30       	cpi	r18, 0x0A	; 10
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	b0 f4       	brcc	.+44     	; 0x1fce <System_Control+0x21a>
			{
				LCD_Display_Character(Button);
    1fa2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_Display_Character>
				LCD_Kick1();
    1fa6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
				vTaskDelay(1);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				LCD_Kick2();
    1fb2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
				Temp_Copy *= 10;
    1fb6:	ff 0c       	add	r15, r15
    1fb8:	8f 2d       	mov	r24, r15
    1fba:	88 0f       	add	r24, r24
    1fbc:	88 0f       	add	r24, r24
    1fbe:	f8 0e       	add	r15, r24
				Temp_Copy += (Button -'0');
    1fc0:	1f 0d       	add	r17, r15
    1fc2:	0f 2e       	mov	r0, r31
    1fc4:	f0 ed       	ldi	r31, 0xD0	; 208
    1fc6:	ff 2e       	mov	r15, r31
    1fc8:	f0 2d       	mov	r31, r0
    1fca:	f1 0e       	add	r15, r17
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <System_Control+0x298>
			}
			else if (Button == '=')	//the desired temperature is inserted
    1fce:	cd 97       	sbiw	r24, 0x3d	; 61
    1fd0:	e9 f5       	brne	.+122    	; 0x204c <System_Control+0x298>
			{
				//handling wrong input for the desired temperature as in a real application the desired temperature must have limits because no motor can support any temperature
				if( 15 > Temp_Copy || Temp_Copy > 40 ) 
    1fd2:	81 ef       	ldi	r24, 0xF1	; 241
    1fd4:	8f 0d       	add	r24, r15
    1fd6:	8a 31       	cpi	r24, 0x1A	; 26
    1fd8:	90 f0       	brcs	.+36     	; 0x1ffe <System_Control+0x24a>
				{
					Add_Message("Invalid Input");
    1fda:	8e ed       	ldi	r24, 0xDE	; 222
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Add_Message>
					LCD_Run_State = LCD_Write_Clear;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <LCD_Run_State>
					vTaskDelay(30);
    1fe8:	8e e1       	ldi	r24, 0x1E	; 30
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
					LCD_Run_State = LCD_Write_string;
    1ff0:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <LCD_Run_State>
					vTaskDelay(1000);
    1ff4:	88 ee       	ldi	r24, 0xE8	; 232
    1ff6:	93 e0       	ldi	r25, 0x03	; 3
    1ff8:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <System_Control+0x24e>
				}
				else  //correct input for the desired temperature so update the Desired_Temperature value
				{
					Desired_Temperature = Temp_Copy;
    1ffe:	f0 92 91 00 	sts	0x0091, r15	; 0x800091 <Desired_Temperature>
				}
				System_State = System_Main_Menu;	//return back to the main menu
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
    2008:	21 c0       	rjmp	.+66     	; 0x204c <System_Control+0x298>
			}
		}
		else if(System_State == System_LED_Control) //read the user input 1/0 to turn on/off the LED respectively
    200a:	94 30       	cpi	r25, 0x04	; 4
    200c:	f9 f4       	brne	.+62     	; 0x204c <System_Control+0x298>
		{
			Button = Keypad_Read_Character(Keypad_Read_Single_Press);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 b7 0b 	call	0x176e	; 0x176e <Keypad_Read_Character>
    2014:	18 2f       	mov	r17, r24
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
			if (Button == '1' || Button == '0') //other inputs will be ignored and the system remain in the System_Led_Control state
    201a:	20 53       	subi	r18, 0x30	; 48
    201c:	31 09       	sbc	r19, r1
    201e:	22 30       	cpi	r18, 0x02	; 2
    2020:	31 05       	cpc	r19, r1
    2022:	a0 f4       	brcc	.+40     	; 0x204c <System_Control+0x298>
			{
				LCD_Display_Character(Button);
    2024:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_Display_Character>
				LCD_Kick1();
    2028:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LCD_Kick1>
				vTaskDelay(1);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
				LCD_Kick2();
    2034:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <LCD_Kick2>
				DIO_Write_Channel(LED1_PORT, LED1_PIN,(Button - '0')); 		//LED (on/off)
    2038:	40 ed       	ldi	r20, 0xD0	; 208
    203a:	41 0f       	add	r20, r17
    203c:	63 e0       	ldi	r22, 0x03	; 3
    203e:	8b e3       	ldi	r24, 0x3B	; 59
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 d7 10 	call	0x21ae	; 0x21ae <DIO_Write_Channel>
				System_State = System_Main_Menu;	//return to the System_Main_Menu state if the user entered 1 or 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <System_State>
			}
		}

		vTaskDelay(160); //Periodicity to read pressed buttons from the user
    204c:	80 ea       	ldi	r24, 0xA0	; 160
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 be 09 	call	0x137c	; 0x137c <vTaskDelay>
	}
    2054:	b7 ce       	rjmp	.-658    	; 0x1dc4 <System_Control+0x10>

00002056 <ADC_Read>:
    2056:	fc 01       	movw	r30, r24
    2058:	97 b1       	in	r25, 0x07	; 7
    205a:	90 7e       	andi	r25, 0xE0	; 224
    205c:	69 2b       	or	r22, r25
    205e:	67 b9       	out	0x07, r22	; 7
    2060:	96 b1       	in	r25, 0x06	; 6
    2062:	90 64       	ori	r25, 0x40	; 64
    2064:	96 b9       	out	0x06, r25	; 6
    2066:	96 ff       	sbrs	r25, 6
    2068:	fe cf       	rjmp	.-4      	; 0x2066 <ADC_Read+0x10>
    206a:	84 b1       	in	r24, 0x04	; 4
    206c:	25 b1       	in	r18, 0x05	; 5
    206e:	23 70       	andi	r18, 0x03	; 3
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	32 2f       	mov	r19, r18
    2074:	22 27       	eor	r18, r18
    2076:	28 2b       	or	r18, r24
    2078:	31 83       	std	Z+1, r19	; 0x01
    207a:	20 83       	st	Z, r18
    207c:	08 95       	ret

0000207e <ADC_Set_Config>:
    207e:	fc 01       	movw	r30, r24
    2080:	85 81       	ldd	r24, Z+5	; 0x05
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	39 f4       	brne	.+14     	; 0x2094 <ADC_Set_Config+0x16>
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <ADC_GP_CallBack+0x1>
    208e:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <ADC_GP_CallBack>
    2092:	04 c0       	rjmp	.+8      	; 0x209c <ADC_Set_Config+0x1e>
    2094:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <ADC_GP_CallBack+0x1>
    2098:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <ADC_GP_CallBack>
    209c:	17 b8       	out	0x07, r1	; 7
    209e:	16 b8       	out	0x06, r1	; 6
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	20 e4       	ldi	r18, 0x40	; 64
    20a4:	82 9f       	mul	r24, r18
    20a6:	c0 01       	movw	r24, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	87 b9       	out	0x07, r24	; 7
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	89 2b       	or	r24, r25
    20b0:	87 b9       	out	0x07, r24	; 7
    20b2:	24 81       	ldd	r18, Z+4	; 0x04
    20b4:	30 e2       	ldi	r19, 0x20	; 32
    20b6:	23 9f       	mul	r18, r19
    20b8:	c0 01       	movw	r24, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	86 b9       	out	0x06, r24	; 6
    20be:	95 81       	ldd	r25, Z+5	; 0x05
    20c0:	29 2f       	mov	r18, r25
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	22 0f       	add	r18, r18
    20ca:	33 1f       	adc	r19, r19
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	28 2b       	or	r18, r24
    20d2:	26 b9       	out	0x06, r18	; 6
    20d4:	86 81       	ldd	r24, Z+6	; 0x06
    20d6:	28 2b       	or	r18, r24
    20d8:	26 b9       	out	0x06, r18	; 6
    20da:	80 b7       	in	r24, 0x30	; 48
    20dc:	38 2f       	mov	r19, r24
    20de:	30 7e       	andi	r19, 0xE0	; 224
    20e0:	30 bf       	out	0x30, r19	; 48
    20e2:	97 81       	ldd	r25, Z+7	; 0x07
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	94 9f       	mul	r25, r20
    20e8:	c0 01       	movw	r24, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	83 2b       	or	r24, r19
    20ee:	80 bf       	out	0x30, r24	; 48
    20f0:	20 68       	ori	r18, 0x80	; 128
    20f2:	26 b9       	out	0x06, r18	; 6
    20f4:	08 95       	ret

000020f6 <DIO_Read_Channel_Direction>:
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <DIO_Read_Channel_Direction+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <DIO_Read_Channel_Direction+0x8>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9c 83       	std	Y+4, r25	; 0x04
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	85 e0       	ldi	r24, 0x05	; 5
    2108:	fa 01       	movw	r30, r20
    210a:	80 83       	st	Z, r24
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	cb 97       	sbiw	r24, 0x3b	; 59
    2112:	61 f0       	breq	.+24     	; 0x212c <DIO_Read_Channel_Direction+0x36>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	c8 97       	sbiw	r24, 0x38	; 56
    211a:	41 f0       	breq	.+16     	; 0x212c <DIO_Read_Channel_Direction+0x36>
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	c5 97       	sbiw	r24, 0x35	; 53
    2122:	21 f0       	breq	.+8      	; 0x212c <DIO_Read_Channel_Direction+0x36>
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	c2 97       	sbiw	r24, 0x32	; 50
    212a:	a9 f5       	brne	.+106    	; 0x2196 <DIO_Read_Channel_Direction+0xa0>
    212c:	68 30       	cpi	r22, 0x08	; 8
    212e:	a8 f5       	brcc	.+106    	; 0x219a <DIO_Read_Channel_Direction+0xa4>
    2130:	1a 82       	std	Y+2, r1	; 0x02
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	85 33       	cpi	r24, 0x35	; 53
    213a:	91 05       	cpc	r25, r1
    213c:	99 f0       	breq	.+38     	; 0x2164 <DIO_Read_Channel_Direction+0x6e>
    213e:	18 f4       	brcc	.+6      	; 0x2146 <DIO_Read_Channel_Direction+0x50>
    2140:	c2 97       	sbiw	r24, 0x32	; 50
    2142:	a9 f0       	breq	.+42     	; 0x216e <DIO_Read_Channel_Direction+0x78>
    2144:	18 c0       	rjmp	.+48     	; 0x2176 <DIO_Read_Channel_Direction+0x80>
    2146:	88 33       	cpi	r24, 0x38	; 56
    2148:	91 05       	cpc	r25, r1
    214a:	39 f0       	breq	.+14     	; 0x215a <DIO_Read_Channel_Direction+0x64>
    214c:	cb 97       	sbiw	r24, 0x3b	; 59
    214e:	99 f4       	brne	.+38     	; 0x2176 <DIO_Read_Channel_Direction+0x80>
    2150:	8a e3       	ldi	r24, 0x3A	; 58
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <DIO_Read_Channel_Direction+0x80>
    215a:	87 e3       	ldi	r24, 0x37	; 55
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <DIO_Read_Channel_Direction+0x80>
    2164:	84 e3       	ldi	r24, 0x34	; 52
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <DIO_Read_Channel_Direction+0x80>
    216e:	81 e3       	ldi	r24, 0x31	; 49
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	e9 81       	ldd	r30, Y+1	; 0x01
    2178:	fa 81       	ldd	r31, Y+2	; 0x02
    217a:	80 81       	ld	r24, Z
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <DIO_Read_Channel_Direction+0x8e>
    2180:	95 95       	asr	r25
    2182:	87 95       	ror	r24
    2184:	6a 95       	dec	r22
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <DIO_Read_Channel_Direction+0x8a>
    2188:	80 ff       	sbrs	r24, 0
    218a:	09 c0       	rjmp	.+18     	; 0x219e <DIO_Read_Channel_Direction+0xa8>
    218c:	86 e0       	ldi	r24, 0x06	; 6
    218e:	fa 01       	movw	r30, r20
    2190:	80 83       	st	Z, r24
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <DIO_Read_Channel_Direction+0xaa>
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <DIO_Read_Channel_Direction+0xaa>
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <DIO_Read_Channel_Direction+0xaa>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <DIO_Write_Channel>:
    21ae:	0f 93       	push	r16
    21b0:	1f 93       	push	r17
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <DIO_Write_Channel+0xa>
    21b8:	1f 92       	push	r1
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	9b 83       	std	Y+3, r25	; 0x03
    21c0:	8a 83       	std	Y+2, r24	; 0x02
    21c2:	16 2f       	mov	r17, r22
    21c4:	04 2f       	mov	r16, r20
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	ae 01       	movw	r20, r28
    21cc:	4f 5f       	subi	r20, 0xFF	; 255
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_Read_Channel_Direction>
    21d4:	81 11       	cpse	r24, r1
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <DIO_Write_Channel+0x30>
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	95 30       	cpi	r25, 0x05	; 5
    21dc:	21 f1       	breq	.+72     	; 0x2226 <DIO_Write_Channel+0x78>
    21de:	81 11       	cpse	r24, r1
    21e0:	25 c0       	rjmp	.+74     	; 0x222c <DIO_Write_Channel+0x7e>
    21e2:	99 81       	ldd	r25, Y+1	; 0x01
    21e4:	96 30       	cpi	r25, 0x06	; 6
    21e6:	11 f5       	brne	.+68     	; 0x222c <DIO_Write_Channel+0x7e>
    21e8:	01 30       	cpi	r16, 0x01	; 1
    21ea:	69 f4       	brne	.+26     	; 0x2206 <DIO_Write_Channel+0x58>
    21ec:	ea 81       	ldd	r30, Y+2	; 0x02
    21ee:	fb 81       	ldd	r31, Y+3	; 0x03
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <DIO_Write_Channel+0x4c>
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	1a 95       	dec	r17
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <DIO_Write_Channel+0x48>
    21fe:	90 81       	ld	r25, Z
    2200:	29 2b       	or	r18, r25
    2202:	20 83       	st	Z, r18
    2204:	13 c0       	rjmp	.+38     	; 0x222c <DIO_Write_Channel+0x7e>
    2206:	01 11       	cpse	r16, r1
    2208:	10 c0       	rjmp	.+32     	; 0x222a <DIO_Write_Channel+0x7c>
    220a:	ea 81       	ldd	r30, Y+2	; 0x02
    220c:	fb 81       	ldd	r31, Y+3	; 0x03
    220e:	21 e0       	ldi	r18, 0x01	; 1
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_Write_Channel+0x6a>
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	1a 95       	dec	r17
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_Write_Channel+0x66>
    221c:	20 95       	com	r18
    221e:	90 81       	ld	r25, Z
    2220:	29 23       	and	r18, r25
    2222:	20 83       	st	Z, r18
    2224:	03 c0       	rjmp	.+6      	; 0x222c <DIO_Write_Channel+0x7e>
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	01 c0       	rjmp	.+2      	; 0x222c <DIO_Write_Channel+0x7e>
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <DIO_Read_Channel>:
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	00 d0       	rcall	.+0      	; 0x2242 <DIO_Read_Channel+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <DIO_Read_Channel+0x8>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	cb 97       	sbiw	r24, 0x3b	; 59
    2252:	61 f0       	breq	.+24     	; 0x226c <DIO_Read_Channel+0x30>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	c8 97       	sbiw	r24, 0x38	; 56
    225a:	41 f0       	breq	.+16     	; 0x226c <DIO_Read_Channel+0x30>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	c5 97       	sbiw	r24, 0x35	; 53
    2262:	21 f0       	breq	.+8      	; 0x226c <DIO_Read_Channel+0x30>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	c2 97       	sbiw	r24, 0x32	; 50
    226a:	99 f5       	brne	.+102    	; 0x22d2 <DIO_Read_Channel+0x96>
    226c:	68 30       	cpi	r22, 0x08	; 8
    226e:	98 f5       	brcc	.+102    	; 0x22d6 <DIO_Read_Channel+0x9a>
    2270:	1a 82       	std	Y+2, r1	; 0x02
    2272:	19 82       	std	Y+1, r1	; 0x01
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	85 33       	cpi	r24, 0x35	; 53
    227a:	91 05       	cpc	r25, r1
    227c:	99 f0       	breq	.+38     	; 0x22a4 <DIO_Read_Channel+0x68>
    227e:	18 f4       	brcc	.+6      	; 0x2286 <DIO_Read_Channel+0x4a>
    2280:	c2 97       	sbiw	r24, 0x32	; 50
    2282:	a9 f0       	breq	.+42     	; 0x22ae <DIO_Read_Channel+0x72>
    2284:	18 c0       	rjmp	.+48     	; 0x22b6 <DIO_Read_Channel+0x7a>
    2286:	88 33       	cpi	r24, 0x38	; 56
    2288:	91 05       	cpc	r25, r1
    228a:	39 f0       	breq	.+14     	; 0x229a <DIO_Read_Channel+0x5e>
    228c:	cb 97       	sbiw	r24, 0x3b	; 59
    228e:	99 f4       	brne	.+38     	; 0x22b6 <DIO_Read_Channel+0x7a>
    2290:	89 e3       	ldi	r24, 0x39	; 57
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <DIO_Read_Channel+0x7a>
    229a:	86 e3       	ldi	r24, 0x36	; 54
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <DIO_Read_Channel+0x7a>
    22a4:	83 e3       	ldi	r24, 0x33	; 51
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <DIO_Read_Channel+0x7a>
    22ae:	80 e3       	ldi	r24, 0x30	; 48
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	e9 81       	ldd	r30, Y+1	; 0x01
    22b8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ba:	80 81       	ld	r24, Z
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <DIO_Read_Channel+0x88>
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	6a 95       	dec	r22
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <DIO_Read_Channel+0x84>
    22c8:	81 70       	andi	r24, 0x01	; 1
    22ca:	fa 01       	movw	r30, r20
    22cc:	80 83       	st	Z, r24
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <DIO_Read_Channel+0x9c>
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <DIO_Read_Channel+0x9c>
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	08 95       	ret

000022e6 <PORT_Init>:
    22e6:	8e ef       	ldi	r24, 0xFE	; 254
    22e8:	8a bb       	out	0x1a, r24	; 26
    22ea:	8f ef       	ldi	r24, 0xFF	; 255
    22ec:	87 bb       	out	0x17, r24	; 23
    22ee:	84 bb       	out	0x14, r24	; 20
    22f0:	81 bb       	out	0x11, r24	; 17
    22f2:	1b ba       	out	0x1b, r1	; 27
    22f4:	18 ba       	out	0x18, r1	; 24
    22f6:	15 ba       	out	0x15, r1	; 21
    22f8:	12 ba       	out	0x12, r1	; 18
    22fa:	08 95       	ret

000022fc <Port_Set_Pin_Direction>:
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	00 d0       	rcall	.+0      	; 0x2302 <Port_Set_Pin_Direction+0x6>
    2302:	00 d0       	rcall	.+0      	; 0x2304 <Port_Set_Pin_Direction+0x8>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	cb 97       	sbiw	r24, 0x3b	; 59
    2312:	69 f0       	breq	.+26     	; 0x232e <Port_Set_Pin_Direction+0x32>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	c8 97       	sbiw	r24, 0x38	; 56
    231a:	49 f0       	breq	.+18     	; 0x232e <Port_Set_Pin_Direction+0x32>
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	c5 97       	sbiw	r24, 0x35	; 53
    2322:	29 f0       	breq	.+10     	; 0x232e <Port_Set_Pin_Direction+0x32>
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	c2 97       	sbiw	r24, 0x32	; 50
    232a:	09 f0       	breq	.+2      	; 0x232e <Port_Set_Pin_Direction+0x32>
    232c:	4c c0       	rjmp	.+152    	; 0x23c6 <Port_Set_Pin_Direction+0xca>
    232e:	68 30       	cpi	r22, 0x08	; 8
    2330:	08 f0       	brcs	.+2      	; 0x2334 <Port_Set_Pin_Direction+0x38>
    2332:	4b c0       	rjmp	.+150    	; 0x23ca <Port_Set_Pin_Direction+0xce>
    2334:	47 30       	cpi	r20, 0x07	; 7
    2336:	08 f0       	brcs	.+2      	; 0x233a <Port_Set_Pin_Direction+0x3e>
    2338:	4a c0       	rjmp	.+148    	; 0x23ce <Port_Set_Pin_Direction+0xd2>
    233a:	1a 82       	std	Y+2, r1	; 0x02
    233c:	19 82       	std	Y+1, r1	; 0x01
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	99 27       	eor	r25, r25
    2344:	85 33       	cpi	r24, 0x35	; 53
    2346:	91 05       	cpc	r25, r1
    2348:	99 f0       	breq	.+38     	; 0x2370 <Port_Set_Pin_Direction+0x74>
    234a:	1c f4       	brge	.+6      	; 0x2352 <Port_Set_Pin_Direction+0x56>
    234c:	c2 97       	sbiw	r24, 0x32	; 50
    234e:	a9 f0       	breq	.+42     	; 0x237a <Port_Set_Pin_Direction+0x7e>
    2350:	18 c0       	rjmp	.+48     	; 0x2382 <Port_Set_Pin_Direction+0x86>
    2352:	88 33       	cpi	r24, 0x38	; 56
    2354:	91 05       	cpc	r25, r1
    2356:	39 f0       	breq	.+14     	; 0x2366 <Port_Set_Pin_Direction+0x6a>
    2358:	cb 97       	sbiw	r24, 0x3b	; 59
    235a:	99 f4       	brne	.+38     	; 0x2382 <Port_Set_Pin_Direction+0x86>
    235c:	8a e3       	ldi	r24, 0x3A	; 58
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	0e c0       	rjmp	.+28     	; 0x2382 <Port_Set_Pin_Direction+0x86>
    2366:	87 e3       	ldi	r24, 0x37	; 55
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <Port_Set_Pin_Direction+0x86>
    2370:	84 e3       	ldi	r24, 0x34	; 52
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <Port_Set_Pin_Direction+0x86>
    237a:	81 e3       	ldi	r24, 0x31	; 49
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	45 30       	cpi	r20, 0x05	; 5
    2384:	19 f0       	breq	.+6      	; 0x238c <Port_Set_Pin_Direction+0x90>
    2386:	46 30       	cpi	r20, 0x06	; 6
    2388:	81 f0       	breq	.+32     	; 0x23aa <Port_Set_Pin_Direction+0xae>
    238a:	23 c0       	rjmp	.+70     	; 0x23d2 <Port_Set_Pin_Direction+0xd6>
    238c:	e9 81       	ldd	r30, Y+1	; 0x01
    238e:	fa 81       	ldd	r31, Y+2	; 0x02
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 c0       	rjmp	.+4      	; 0x239a <Port_Set_Pin_Direction+0x9e>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	6a 95       	dec	r22
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <Port_Set_Pin_Direction+0x9a>
    239e:	80 95       	com	r24
    23a0:	90 81       	ld	r25, Z
    23a2:	89 23       	and	r24, r25
    23a4:	80 83       	st	Z, r24
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	15 c0       	rjmp	.+42     	; 0x23d4 <Port_Set_Pin_Direction+0xd8>
    23aa:	e9 81       	ldd	r30, Y+1	; 0x01
    23ac:	fa 81       	ldd	r31, Y+2	; 0x02
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <Port_Set_Pin_Direction+0xbc>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	6a 95       	dec	r22
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <Port_Set_Pin_Direction+0xb8>
    23bc:	90 81       	ld	r25, Z
    23be:	89 2b       	or	r24, r25
    23c0:	80 83       	st	Z, r24
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	07 c0       	rjmp	.+14     	; 0x23d4 <Port_Set_Pin_Direction+0xd8>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	05 c0       	rjmp	.+10     	; 0x23d4 <Port_Set_Pin_Direction+0xd8>
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <Port_Set_Pin_Direction+0xd8>
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <Port_Set_Pin_Direction+0xd8>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <Port_Set_Pin_Mode>:
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <Port_Set_Pin_Mode+0xa>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	06 2f       	mov	r16, r22
    23f6:	14 2f       	mov	r17, r20
    23f8:	42 30       	cpi	r20, 0x02	; 2
    23fa:	18 f0       	brcs	.+6      	; 0x2402 <Port_Set_Pin_Mode+0x20>
    23fc:	44 30       	cpi	r20, 0x04	; 4
    23fe:	68 f4       	brcc	.+26     	; 0x241a <Port_Set_Pin_Mode+0x38>
    2400:	06 c0       	rjmp	.+12     	; 0x240e <Port_Set_Pin_Mode+0x2c>
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	45 e0       	ldi	r20, 0x05	; 5
    2408:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Port_Set_Pin_Direction>
    240c:	07 c0       	rjmp	.+14     	; 0x241c <Port_Set_Pin_Mode+0x3a>
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	46 e0       	ldi	r20, 0x06	; 6
    2414:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Port_Set_Pin_Direction>
    2418:	01 c0       	rjmp	.+2      	; 0x241c <Port_Set_Pin_Mode+0x3a>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	81 11       	cpse	r24, r1
    241e:	21 c0       	rjmp	.+66     	; 0x2462 <Port_Set_Pin_Mode+0x80>
    2420:	13 30       	cpi	r17, 0x03	; 3
    2422:	18 f4       	brcc	.+6      	; 0x242a <Port_Set_Pin_Mode+0x48>
    2424:	11 30       	cpi	r17, 0x01	; 1
    2426:	18 f0       	brcs	.+6      	; 0x242e <Port_Set_Pin_Mode+0x4c>
    2428:	10 c0       	rjmp	.+32     	; 0x244a <Port_Set_Pin_Mode+0x68>
    242a:	13 30       	cpi	r17, 0x03	; 3
    242c:	d1 f4       	brne	.+52     	; 0x2462 <Port_Set_Pin_Mode+0x80>
    242e:	e9 81       	ldd	r30, Y+1	; 0x01
    2430:	fa 81       	ldd	r31, Y+2	; 0x02
    2432:	21 e0       	ldi	r18, 0x01	; 1
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	02 c0       	rjmp	.+4      	; 0x243c <Port_Set_Pin_Mode+0x5a>
    2438:	22 0f       	add	r18, r18
    243a:	33 1f       	adc	r19, r19
    243c:	0a 95       	dec	r16
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <Port_Set_Pin_Mode+0x56>
    2440:	20 95       	com	r18
    2442:	90 81       	ld	r25, Z
    2444:	29 23       	and	r18, r25
    2446:	20 83       	st	Z, r18
    2448:	0c c0       	rjmp	.+24     	; 0x2462 <Port_Set_Pin_Mode+0x80>
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	21 e0       	ldi	r18, 0x01	; 1
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <Port_Set_Pin_Mode+0x76>
    2454:	22 0f       	add	r18, r18
    2456:	33 1f       	adc	r19, r19
    2458:	0a 95       	dec	r16
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <Port_Set_Pin_Mode+0x72>
    245c:	90 81       	ld	r25, Z
    245e:	29 2b       	or	r18, r25
    2460:	20 83       	st	Z, r18
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	08 95       	ret

00002470 <__divsf3>:
    2470:	0e 94 4c 12 	call	0x2498	; 0x2498 <__divsf3x>
    2474:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_round>
    2478:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_pscB>
    247c:	58 f0       	brcs	.+22     	; 0x2494 <__divsf3+0x24>
    247e:	0e 94 20 13 	call	0x2640	; 0x2640 <__fp_pscA>
    2482:	40 f0       	brcs	.+16     	; 0x2494 <__divsf3+0x24>
    2484:	29 f4       	brne	.+10     	; 0x2490 <__divsf3+0x20>
    2486:	5f 3f       	cpi	r21, 0xFF	; 255
    2488:	29 f0       	breq	.+10     	; 0x2494 <__divsf3+0x24>
    248a:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_inf>
    248e:	51 11       	cpse	r21, r1
    2490:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__fp_szero>
    2494:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__fp_nan>

00002498 <__divsf3x>:
    2498:	0e 94 3f 13 	call	0x267e	; 0x267e <__fp_split3>
    249c:	68 f3       	brcs	.-38     	; 0x2478 <__divsf3+0x8>

0000249e <__divsf3_pse>:
    249e:	99 23       	and	r25, r25
    24a0:	b1 f3       	breq	.-20     	; 0x248e <__divsf3+0x1e>
    24a2:	55 23       	and	r21, r21
    24a4:	91 f3       	breq	.-28     	; 0x248a <__divsf3+0x1a>
    24a6:	95 1b       	sub	r25, r21
    24a8:	55 0b       	sbc	r21, r21
    24aa:	bb 27       	eor	r27, r27
    24ac:	aa 27       	eor	r26, r26
    24ae:	62 17       	cp	r22, r18
    24b0:	73 07       	cpc	r23, r19
    24b2:	84 07       	cpc	r24, r20
    24b4:	38 f0       	brcs	.+14     	; 0x24c4 <__divsf3_pse+0x26>
    24b6:	9f 5f       	subi	r25, 0xFF	; 255
    24b8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ba:	22 0f       	add	r18, r18
    24bc:	33 1f       	adc	r19, r19
    24be:	44 1f       	adc	r20, r20
    24c0:	aa 1f       	adc	r26, r26
    24c2:	a9 f3       	breq	.-22     	; 0x24ae <__divsf3_pse+0x10>
    24c4:	35 d0       	rcall	.+106    	; 0x2530 <__divsf3_pse+0x92>
    24c6:	0e 2e       	mov	r0, r30
    24c8:	3a f0       	brmi	.+14     	; 0x24d8 <__divsf3_pse+0x3a>
    24ca:	e0 e8       	ldi	r30, 0x80	; 128
    24cc:	32 d0       	rcall	.+100    	; 0x2532 <__divsf3_pse+0x94>
    24ce:	91 50       	subi	r25, 0x01	; 1
    24d0:	50 40       	sbci	r21, 0x00	; 0
    24d2:	e6 95       	lsr	r30
    24d4:	00 1c       	adc	r0, r0
    24d6:	ca f7       	brpl	.-14     	; 0x24ca <__divsf3_pse+0x2c>
    24d8:	2b d0       	rcall	.+86     	; 0x2530 <__divsf3_pse+0x92>
    24da:	fe 2f       	mov	r31, r30
    24dc:	29 d0       	rcall	.+82     	; 0x2530 <__divsf3_pse+0x92>
    24de:	66 0f       	add	r22, r22
    24e0:	77 1f       	adc	r23, r23
    24e2:	88 1f       	adc	r24, r24
    24e4:	bb 1f       	adc	r27, r27
    24e6:	26 17       	cp	r18, r22
    24e8:	37 07       	cpc	r19, r23
    24ea:	48 07       	cpc	r20, r24
    24ec:	ab 07       	cpc	r26, r27
    24ee:	b0 e8       	ldi	r27, 0x80	; 128
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <__divsf3_pse+0x56>
    24f2:	bb 0b       	sbc	r27, r27
    24f4:	80 2d       	mov	r24, r0
    24f6:	bf 01       	movw	r22, r30
    24f8:	ff 27       	eor	r31, r31
    24fa:	93 58       	subi	r25, 0x83	; 131
    24fc:	5f 4f       	sbci	r21, 0xFF	; 255
    24fe:	3a f0       	brmi	.+14     	; 0x250e <__divsf3_pse+0x70>
    2500:	9e 3f       	cpi	r25, 0xFE	; 254
    2502:	51 05       	cpc	r21, r1
    2504:	78 f0       	brcs	.+30     	; 0x2524 <__divsf3_pse+0x86>
    2506:	0c 94 17 13 	jmp	0x262e	; 0x262e <__fp_inf>
    250a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__fp_szero>
    250e:	5f 3f       	cpi	r21, 0xFF	; 255
    2510:	e4 f3       	brlt	.-8      	; 0x250a <__divsf3_pse+0x6c>
    2512:	98 3e       	cpi	r25, 0xE8	; 232
    2514:	d4 f3       	brlt	.-12     	; 0x250a <__divsf3_pse+0x6c>
    2516:	86 95       	lsr	r24
    2518:	77 95       	ror	r23
    251a:	67 95       	ror	r22
    251c:	b7 95       	ror	r27
    251e:	f7 95       	ror	r31
    2520:	9f 5f       	subi	r25, 0xFF	; 255
    2522:	c9 f7       	brne	.-14     	; 0x2516 <__divsf3_pse+0x78>
    2524:	88 0f       	add	r24, r24
    2526:	91 1d       	adc	r25, r1
    2528:	96 95       	lsr	r25
    252a:	87 95       	ror	r24
    252c:	97 f9       	bld	r25, 7
    252e:	08 95       	ret
    2530:	e1 e0       	ldi	r30, 0x01	; 1
    2532:	66 0f       	add	r22, r22
    2534:	77 1f       	adc	r23, r23
    2536:	88 1f       	adc	r24, r24
    2538:	bb 1f       	adc	r27, r27
    253a:	62 17       	cp	r22, r18
    253c:	73 07       	cpc	r23, r19
    253e:	84 07       	cpc	r24, r20
    2540:	ba 07       	cpc	r27, r26
    2542:	20 f0       	brcs	.+8      	; 0x254c <__divsf3_pse+0xae>
    2544:	62 1b       	sub	r22, r18
    2546:	73 0b       	sbc	r23, r19
    2548:	84 0b       	sbc	r24, r20
    254a:	ba 0b       	sbc	r27, r26
    254c:	ee 1f       	adc	r30, r30
    254e:	88 f7       	brcc	.-30     	; 0x2532 <__divsf3_pse+0x94>
    2550:	e0 95       	com	r30
    2552:	08 95       	ret

00002554 <__fixunssfsi>:
    2554:	0e 94 47 13 	call	0x268e	; 0x268e <__fp_splitA>
    2558:	88 f0       	brcs	.+34     	; 0x257c <__fixunssfsi+0x28>
    255a:	9f 57       	subi	r25, 0x7F	; 127
    255c:	98 f0       	brcs	.+38     	; 0x2584 <__fixunssfsi+0x30>
    255e:	b9 2f       	mov	r27, r25
    2560:	99 27       	eor	r25, r25
    2562:	b7 51       	subi	r27, 0x17	; 23
    2564:	b0 f0       	brcs	.+44     	; 0x2592 <__fixunssfsi+0x3e>
    2566:	e1 f0       	breq	.+56     	; 0x25a0 <__fixunssfsi+0x4c>
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	1a f0       	brmi	.+6      	; 0x2578 <__fixunssfsi+0x24>
    2572:	ba 95       	dec	r27
    2574:	c9 f7       	brne	.-14     	; 0x2568 <__fixunssfsi+0x14>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <__fixunssfsi+0x4c>
    2578:	b1 30       	cpi	r27, 0x01	; 1
    257a:	91 f0       	breq	.+36     	; 0x25a0 <__fixunssfsi+0x4c>
    257c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__fp_zero>
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	08 95       	ret
    2584:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__fp_zero>
    2588:	67 2f       	mov	r22, r23
    258a:	78 2f       	mov	r23, r24
    258c:	88 27       	eor	r24, r24
    258e:	b8 5f       	subi	r27, 0xF8	; 248
    2590:	39 f0       	breq	.+14     	; 0x25a0 <__fixunssfsi+0x4c>
    2592:	b9 3f       	cpi	r27, 0xF9	; 249
    2594:	cc f3       	brlt	.-14     	; 0x2588 <__fixunssfsi+0x34>
    2596:	86 95       	lsr	r24
    2598:	77 95       	ror	r23
    259a:	67 95       	ror	r22
    259c:	b3 95       	inc	r27
    259e:	d9 f7       	brne	.-10     	; 0x2596 <__fixunssfsi+0x42>
    25a0:	3e f4       	brtc	.+14     	; 0x25b0 <__fixunssfsi+0x5c>
    25a2:	90 95       	com	r25
    25a4:	80 95       	com	r24
    25a6:	70 95       	com	r23
    25a8:	61 95       	neg	r22
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8f 4f       	sbci	r24, 0xFF	; 255
    25ae:	9f 4f       	sbci	r25, 0xFF	; 255
    25b0:	08 95       	ret

000025b2 <__floatundisf>:
    25b2:	e8 94       	clt

000025b4 <__fp_di2sf>:
    25b4:	f9 2f       	mov	r31, r25
    25b6:	96 eb       	ldi	r25, 0xB6	; 182
    25b8:	ff 23       	and	r31, r31
    25ba:	81 f0       	breq	.+32     	; 0x25dc <__fp_di2sf+0x28>
    25bc:	12 16       	cp	r1, r18
    25be:	13 06       	cpc	r1, r19
    25c0:	14 06       	cpc	r1, r20
    25c2:	44 0b       	sbc	r20, r20
    25c4:	93 95       	inc	r25
    25c6:	f6 95       	lsr	r31
    25c8:	87 95       	ror	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	57 95       	ror	r21
    25d0:	40 40       	sbci	r20, 0x00	; 0
    25d2:	ff 23       	and	r31, r31
    25d4:	b9 f7       	brne	.-18     	; 0x25c4 <__fp_di2sf+0x10>
    25d6:	1b c0       	rjmp	.+54     	; 0x260e <__fp_di2sf+0x5a>
    25d8:	99 27       	eor	r25, r25
    25da:	08 95       	ret
    25dc:	88 23       	and	r24, r24
    25de:	51 f4       	brne	.+20     	; 0x25f4 <__fp_di2sf+0x40>
    25e0:	98 50       	subi	r25, 0x08	; 8
    25e2:	d2 f7       	brpl	.-12     	; 0x25d8 <__fp_di2sf+0x24>
    25e4:	87 2b       	or	r24, r23
    25e6:	76 2f       	mov	r23, r22
    25e8:	65 2f       	mov	r22, r21
    25ea:	54 2f       	mov	r21, r20
    25ec:	43 2f       	mov	r20, r19
    25ee:	32 2f       	mov	r19, r18
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	b1 f3       	breq	.-20     	; 0x25e0 <__fp_di2sf+0x2c>
    25f4:	12 16       	cp	r1, r18
    25f6:	13 06       	cpc	r1, r19
    25f8:	14 06       	cpc	r1, r20
    25fa:	44 0b       	sbc	r20, r20
    25fc:	88 23       	and	r24, r24
    25fe:	3a f0       	brmi	.+14     	; 0x260e <__fp_di2sf+0x5a>
    2600:	9a 95       	dec	r25
    2602:	44 0f       	add	r20, r20
    2604:	55 1f       	adc	r21, r21
    2606:	66 1f       	adc	r22, r22
    2608:	77 1f       	adc	r23, r23
    260a:	88 1f       	adc	r24, r24
    260c:	ca f7       	brpl	.-14     	; 0x2600 <__fp_di2sf+0x4c>
    260e:	55 23       	and	r21, r21
    2610:	4a f4       	brpl	.+18     	; 0x2624 <__fp_di2sf+0x70>
    2612:	44 0f       	add	r20, r20
    2614:	55 1f       	adc	r21, r21
    2616:	11 f4       	brne	.+4      	; 0x261c <__fp_di2sf+0x68>
    2618:	60 ff       	sbrs	r22, 0
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <__fp_di2sf+0x70>
    261c:	6f 5f       	subi	r22, 0xFF	; 255
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	8f 4f       	sbci	r24, 0xFF	; 255
    2622:	9f 4f       	sbci	r25, 0xFF	; 255
    2624:	88 0f       	add	r24, r24
    2626:	96 95       	lsr	r25
    2628:	87 95       	ror	r24
    262a:	97 f9       	bld	r25, 7
    262c:	08 95       	ret

0000262e <__fp_inf>:
    262e:	97 f9       	bld	r25, 7
    2630:	9f 67       	ori	r25, 0x7F	; 127
    2632:	80 e8       	ldi	r24, 0x80	; 128
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	08 95       	ret

0000263a <__fp_nan>:
    263a:	9f ef       	ldi	r25, 0xFF	; 255
    263c:	80 ec       	ldi	r24, 0xC0	; 192
    263e:	08 95       	ret

00002640 <__fp_pscA>:
    2640:	00 24       	eor	r0, r0
    2642:	0a 94       	dec	r0
    2644:	16 16       	cp	r1, r22
    2646:	17 06       	cpc	r1, r23
    2648:	18 06       	cpc	r1, r24
    264a:	09 06       	cpc	r0, r25
    264c:	08 95       	ret

0000264e <__fp_pscB>:
    264e:	00 24       	eor	r0, r0
    2650:	0a 94       	dec	r0
    2652:	12 16       	cp	r1, r18
    2654:	13 06       	cpc	r1, r19
    2656:	14 06       	cpc	r1, r20
    2658:	05 06       	cpc	r0, r21
    265a:	08 95       	ret

0000265c <__fp_round>:
    265c:	09 2e       	mov	r0, r25
    265e:	03 94       	inc	r0
    2660:	00 0c       	add	r0, r0
    2662:	11 f4       	brne	.+4      	; 0x2668 <__fp_round+0xc>
    2664:	88 23       	and	r24, r24
    2666:	52 f0       	brmi	.+20     	; 0x267c <__fp_round+0x20>
    2668:	bb 0f       	add	r27, r27
    266a:	40 f4       	brcc	.+16     	; 0x267c <__fp_round+0x20>
    266c:	bf 2b       	or	r27, r31
    266e:	11 f4       	brne	.+4      	; 0x2674 <__fp_round+0x18>
    2670:	60 ff       	sbrs	r22, 0
    2672:	04 c0       	rjmp	.+8      	; 0x267c <__fp_round+0x20>
    2674:	6f 5f       	subi	r22, 0xFF	; 255
    2676:	7f 4f       	sbci	r23, 0xFF	; 255
    2678:	8f 4f       	sbci	r24, 0xFF	; 255
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	08 95       	ret

0000267e <__fp_split3>:
    267e:	57 fd       	sbrc	r21, 7
    2680:	90 58       	subi	r25, 0x80	; 128
    2682:	44 0f       	add	r20, r20
    2684:	55 1f       	adc	r21, r21
    2686:	59 f0       	breq	.+22     	; 0x269e <__fp_splitA+0x10>
    2688:	5f 3f       	cpi	r21, 0xFF	; 255
    268a:	71 f0       	breq	.+28     	; 0x26a8 <__fp_splitA+0x1a>
    268c:	47 95       	ror	r20

0000268e <__fp_splitA>:
    268e:	88 0f       	add	r24, r24
    2690:	97 fb       	bst	r25, 7
    2692:	99 1f       	adc	r25, r25
    2694:	61 f0       	breq	.+24     	; 0x26ae <__fp_splitA+0x20>
    2696:	9f 3f       	cpi	r25, 0xFF	; 255
    2698:	79 f0       	breq	.+30     	; 0x26b8 <__fp_splitA+0x2a>
    269a:	87 95       	ror	r24
    269c:	08 95       	ret
    269e:	12 16       	cp	r1, r18
    26a0:	13 06       	cpc	r1, r19
    26a2:	14 06       	cpc	r1, r20
    26a4:	55 1f       	adc	r21, r21
    26a6:	f2 cf       	rjmp	.-28     	; 0x268c <__fp_split3+0xe>
    26a8:	46 95       	lsr	r20
    26aa:	f1 df       	rcall	.-30     	; 0x268e <__fp_splitA>
    26ac:	08 c0       	rjmp	.+16     	; 0x26be <__fp_splitA+0x30>
    26ae:	16 16       	cp	r1, r22
    26b0:	17 06       	cpc	r1, r23
    26b2:	18 06       	cpc	r1, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	f1 cf       	rjmp	.-30     	; 0x269a <__fp_splitA+0xc>
    26b8:	86 95       	lsr	r24
    26ba:	71 05       	cpc	r23, r1
    26bc:	61 05       	cpc	r22, r1
    26be:	08 94       	sec
    26c0:	08 95       	ret

000026c2 <__fp_zero>:
    26c2:	e8 94       	clt

000026c4 <__fp_szero>:
    26c4:	bb 27       	eor	r27, r27
    26c6:	66 27       	eor	r22, r22
    26c8:	77 27       	eor	r23, r23
    26ca:	cb 01       	movw	r24, r22
    26cc:	97 f9       	bld	r25, 7
    26ce:	08 95       	ret

000026d0 <__udivmodhi4>:
    26d0:	aa 1b       	sub	r26, r26
    26d2:	bb 1b       	sub	r27, r27
    26d4:	51 e1       	ldi	r21, 0x11	; 17
    26d6:	07 c0       	rjmp	.+14     	; 0x26e6 <__udivmodhi4_ep>

000026d8 <__udivmodhi4_loop>:
    26d8:	aa 1f       	adc	r26, r26
    26da:	bb 1f       	adc	r27, r27
    26dc:	a6 17       	cp	r26, r22
    26de:	b7 07       	cpc	r27, r23
    26e0:	10 f0       	brcs	.+4      	; 0x26e6 <__udivmodhi4_ep>
    26e2:	a6 1b       	sub	r26, r22
    26e4:	b7 0b       	sbc	r27, r23

000026e6 <__udivmodhi4_ep>:
    26e6:	88 1f       	adc	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	5a 95       	dec	r21
    26ec:	a9 f7       	brne	.-22     	; 0x26d8 <__udivmodhi4_loop>
    26ee:	80 95       	com	r24
    26f0:	90 95       	com	r25
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	08 95       	ret

000026f8 <__muldi3>:
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	1f 93       	push	r17
    26fe:	0f 93       	push	r16
    2700:	9a 9d       	mul	r25, r10
    2702:	f0 2d       	mov	r31, r0
    2704:	21 9f       	mul	r18, r17
    2706:	f0 0d       	add	r31, r0
    2708:	8b 9d       	mul	r24, r11
    270a:	f0 0d       	add	r31, r0
    270c:	8a 9d       	mul	r24, r10
    270e:	e0 2d       	mov	r30, r0
    2710:	f1 0d       	add	r31, r1
    2712:	03 9f       	mul	r16, r19
    2714:	f0 0d       	add	r31, r0
    2716:	02 9f       	mul	r16, r18
    2718:	e0 0d       	add	r30, r0
    271a:	f1 1d       	adc	r31, r1
    271c:	4e 9d       	mul	r20, r14
    271e:	e0 0d       	add	r30, r0
    2720:	f1 1d       	adc	r31, r1
    2722:	5e 9d       	mul	r21, r14
    2724:	f0 0d       	add	r31, r0
    2726:	4f 9d       	mul	r20, r15
    2728:	f0 0d       	add	r31, r0
    272a:	7f 93       	push	r23
    272c:	6f 93       	push	r22
    272e:	bf 92       	push	r11
    2730:	af 92       	push	r10
    2732:	5f 93       	push	r21
    2734:	4f 93       	push	r20
    2736:	d5 01       	movw	r26, r10
    2738:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    273c:	8b 01       	movw	r16, r22
    273e:	ac 01       	movw	r20, r24
    2740:	d7 01       	movw	r26, r14
    2742:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    2746:	eb 01       	movw	r28, r22
    2748:	e8 0f       	add	r30, r24
    274a:	f9 1f       	adc	r31, r25
    274c:	d6 01       	movw	r26, r12
    274e:	0e 94 cc 13 	call	0x2798	; 0x2798 <__muldi3_6>
    2752:	2f 91       	pop	r18
    2754:	3f 91       	pop	r19
    2756:	d6 01       	movw	r26, r12
    2758:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    275c:	c6 0f       	add	r28, r22
    275e:	d7 1f       	adc	r29, r23
    2760:	e8 1f       	adc	r30, r24
    2762:	f9 1f       	adc	r31, r25
    2764:	af 91       	pop	r26
    2766:	bf 91       	pop	r27
    2768:	0e 94 cc 13 	call	0x2798	; 0x2798 <__muldi3_6>
    276c:	2f 91       	pop	r18
    276e:	3f 91       	pop	r19
    2770:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    2774:	c6 0f       	add	r28, r22
    2776:	d7 1f       	adc	r29, r23
    2778:	e8 1f       	adc	r30, r24
    277a:	f9 1f       	adc	r31, r25
    277c:	d6 01       	movw	r26, r12
    277e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    2782:	e6 0f       	add	r30, r22
    2784:	f7 1f       	adc	r31, r23
    2786:	98 01       	movw	r18, r16
    2788:	be 01       	movw	r22, r28
    278a:	cf 01       	movw	r24, r30
    278c:	11 24       	eor	r1, r1
    278e:	0f 91       	pop	r16
    2790:	1f 91       	pop	r17
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <__muldi3_6>:
    2798:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__umulhisi3>
    279c:	46 0f       	add	r20, r22
    279e:	57 1f       	adc	r21, r23
    27a0:	c8 1f       	adc	r28, r24
    27a2:	d9 1f       	adc	r29, r25
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <__muldi3_6+0x10>
    27a6:	31 96       	adiw	r30, 0x01	; 1
    27a8:	08 95       	ret

000027aa <__umulhisi3>:
    27aa:	a2 9f       	mul	r26, r18
    27ac:	b0 01       	movw	r22, r0
    27ae:	b3 9f       	mul	r27, r19
    27b0:	c0 01       	movw	r24, r0
    27b2:	a3 9f       	mul	r26, r19
    27b4:	70 0d       	add	r23, r0
    27b6:	81 1d       	adc	r24, r1
    27b8:	11 24       	eor	r1, r1
    27ba:	91 1d       	adc	r25, r1
    27bc:	b2 9f       	mul	r27, r18
    27be:	70 0d       	add	r23, r0
    27c0:	81 1d       	adc	r24, r1
    27c2:	11 24       	eor	r1, r1
    27c4:	91 1d       	adc	r25, r1
    27c6:	08 95       	ret

000027c8 <memcpy>:
    27c8:	fb 01       	movw	r30, r22
    27ca:	dc 01       	movw	r26, r24
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <memcpy+0xa>
    27ce:	01 90       	ld	r0, Z+
    27d0:	0d 92       	st	X+, r0
    27d2:	41 50       	subi	r20, 0x01	; 1
    27d4:	50 40       	sbci	r21, 0x00	; 0
    27d6:	d8 f7       	brcc	.-10     	; 0x27ce <memcpy+0x6>
    27d8:	08 95       	ret

000027da <_exit>:
    27da:	f8 94       	cli

000027dc <__stop_program>:
    27dc:	ff cf       	rjmp	.-2      	; 0x27dc <__stop_program>
