
DIAGNOSTIC_TOOL_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc0  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008210  08008210  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008210  08008210  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008210  08008210  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008218  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002194  20000084  0800829c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002218  0800829c  00022218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ce5  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3b  00000000  00000000  00028dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005eb  00000000  00000000  0002b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000385c  00000000  00000000  0002b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007d5c  00000000  00000000  0002f04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00018ae8  00000000  00000000  00036dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001fd8  00000000  00000000  0004f894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0005186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000084 	.word	0x20000084
 800014c:	00000000 	.word	0x00000000
 8000150:	08005238 	.word	0x08005238

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000088 	.word	0x20000088
 800016c:	08005238 	.word	0x08005238

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_frsub>:
 800090c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000910:	e002      	b.n	8000918 <__addsf3>
 8000912:	bf00      	nop

08000914 <__aeabi_fsub>:
 8000914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000918 <__addsf3>:
 8000918:	0042      	lsls	r2, r0, #1
 800091a:	bf1f      	itttt	ne
 800091c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000920:	ea92 0f03 	teqne	r2, r3
 8000924:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000928:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800092c:	d06a      	beq.n	8000a04 <__addsf3+0xec>
 800092e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000932:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000936:	bfc1      	itttt	gt
 8000938:	18d2      	addgt	r2, r2, r3
 800093a:	4041      	eorgt	r1, r0
 800093c:	4048      	eorgt	r0, r1
 800093e:	4041      	eorgt	r1, r0
 8000940:	bfb8      	it	lt
 8000942:	425b      	neglt	r3, r3
 8000944:	2b19      	cmp	r3, #25
 8000946:	bf88      	it	hi
 8000948:	4770      	bxhi	lr
 800094a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800094e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4240      	negne	r0, r0
 800095a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800095e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000962:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4249      	negne	r1, r1
 800096a:	ea92 0f03 	teq	r2, r3
 800096e:	d03f      	beq.n	80009f0 <__addsf3+0xd8>
 8000970:	f1a2 0201 	sub.w	r2, r2, #1
 8000974:	fa41 fc03 	asr.w	ip, r1, r3
 8000978:	eb10 000c 	adds.w	r0, r0, ip
 800097c:	f1c3 0320 	rsb	r3, r3, #32
 8000980:	fa01 f103 	lsl.w	r1, r1, r3
 8000984:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000988:	d502      	bpl.n	8000990 <__addsf3+0x78>
 800098a:	4249      	negs	r1, r1
 800098c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000990:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000994:	d313      	bcc.n	80009be <__addsf3+0xa6>
 8000996:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800099a:	d306      	bcc.n	80009aa <__addsf3+0x92>
 800099c:	0840      	lsrs	r0, r0, #1
 800099e:	ea4f 0131 	mov.w	r1, r1, rrx
 80009a2:	f102 0201 	add.w	r2, r2, #1
 80009a6:	2afe      	cmp	r2, #254	; 0xfe
 80009a8:	d251      	bcs.n	8000a4e <__addsf3+0x136>
 80009aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b2:	bf08      	it	eq
 80009b4:	f020 0001 	biceq.w	r0, r0, #1
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	4770      	bx	lr
 80009be:	0049      	lsls	r1, r1, #1
 80009c0:	eb40 0000 	adc.w	r0, r0, r0
 80009c4:	3a01      	subs	r2, #1
 80009c6:	bf28      	it	cs
 80009c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009cc:	d2ed      	bcs.n	80009aa <__addsf3+0x92>
 80009ce:	fab0 fc80 	clz	ip, r0
 80009d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009d6:	ebb2 020c 	subs.w	r2, r2, ip
 80009da:	fa00 f00c 	lsl.w	r0, r0, ip
 80009de:	bfaa      	itet	ge
 80009e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009e4:	4252      	neglt	r2, r2
 80009e6:	4318      	orrge	r0, r3
 80009e8:	bfbc      	itt	lt
 80009ea:	40d0      	lsrlt	r0, r2
 80009ec:	4318      	orrlt	r0, r3
 80009ee:	4770      	bx	lr
 80009f0:	f092 0f00 	teq	r2, #0
 80009f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009f8:	bf06      	itte	eq
 80009fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009fe:	3201      	addeq	r2, #1
 8000a00:	3b01      	subne	r3, #1
 8000a02:	e7b5      	b.n	8000970 <__addsf3+0x58>
 8000a04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a12:	d021      	beq.n	8000a58 <__addsf3+0x140>
 8000a14:	ea92 0f03 	teq	r2, r3
 8000a18:	d004      	beq.n	8000a24 <__addsf3+0x10c>
 8000a1a:	f092 0f00 	teq	r2, #0
 8000a1e:	bf08      	it	eq
 8000a20:	4608      	moveq	r0, r1
 8000a22:	4770      	bx	lr
 8000a24:	ea90 0f01 	teq	r0, r1
 8000a28:	bf1c      	itt	ne
 8000a2a:	2000      	movne	r0, #0
 8000a2c:	4770      	bxne	lr
 8000a2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a32:	d104      	bne.n	8000a3e <__addsf3+0x126>
 8000a34:	0040      	lsls	r0, r0, #1
 8000a36:	bf28      	it	cs
 8000a38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a3c:	4770      	bx	lr
 8000a3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a42:	bf3c      	itt	cc
 8000a44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bxcc	lr
 8000a4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a56:	4770      	bx	lr
 8000a58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a5c:	bf16      	itet	ne
 8000a5e:	4608      	movne	r0, r1
 8000a60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a64:	4601      	movne	r1, r0
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	bf06      	itte	eq
 8000a6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a6e:	ea90 0f01 	teqeq	r0, r1
 8000a72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_ui2f>:
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e004      	b.n	8000a88 <__aeabi_i2f+0x8>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_i2f>:
 8000a80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a84:	bf48      	it	mi
 8000a86:	4240      	negmi	r0, r0
 8000a88:	ea5f 0c00 	movs.w	ip, r0
 8000a8c:	bf08      	it	eq
 8000a8e:	4770      	bxeq	lr
 8000a90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a94:	4601      	mov	r1, r0
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	e01c      	b.n	8000ad6 <__aeabi_l2f+0x2a>

08000a9c <__aeabi_ul2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e00a      	b.n	8000ac0 <__aeabi_l2f+0x14>
 8000aaa:	bf00      	nop

08000aac <__aeabi_l2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_l2f+0x14>
 8000aba:	4240      	negs	r0, r0
 8000abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac0:	ea5f 0c01 	movs.w	ip, r1
 8000ac4:	bf02      	ittt	eq
 8000ac6:	4684      	moveq	ip, r0
 8000ac8:	4601      	moveq	r1, r0
 8000aca:	2000      	moveq	r0, #0
 8000acc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ada:	fabc f28c 	clz	r2, ip
 8000ade:	3a08      	subs	r2, #8
 8000ae0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ae4:	db10      	blt.n	8000b08 <__aeabi_l2f+0x5c>
 8000ae6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aea:	4463      	add	r3, ip
 8000aec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af0:	f1c2 0220 	rsb	r2, r2, #32
 8000af4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000af8:	fa20 f202 	lsr.w	r2, r0, r2
 8000afc:	eb43 0002 	adc.w	r0, r3, r2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f102 0220 	add.w	r2, r2, #32
 8000b0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b18:	fa21 f202 	lsr.w	r2, r1, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7a:	2afd      	cmp	r2, #253	; 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	; 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	; 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	; 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fb89 	bl	80004e8 <__aeabi_dmul>
 8000dd6:	f000 f815 	bl	8000e04 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fb0a 	bl	80003f4 <__aeabi_ui2d>
 8000de0:	2200      	movs	r2, #0
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de4:	f7ff fb80 	bl	80004e8 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff f9c2 	bl	8000178 <__aeabi_dsub>
 8000df4:	f000 f806 	bl	8000e04 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__aeabi_d2uiz>:
 8000e04:	004a      	lsls	r2, r1, #1
 8000e06:	d211      	bcs.n	8000e2c <__aeabi_d2uiz+0x28>
 8000e08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e0c:	d211      	bcs.n	8000e32 <__aeabi_d2uiz+0x2e>
 8000e0e:	d50d      	bpl.n	8000e2c <__aeabi_d2uiz+0x28>
 8000e10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e18:	d40e      	bmi.n	8000e38 <__aeabi_d2uiz+0x34>
 8000e1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e26:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2a:	4770      	bx	lr
 8000e2c:	f04f 0000 	mov.w	r0, #0
 8000e30:	4770      	bx	lr
 8000e32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e36:	d102      	bne.n	8000e3e <__aeabi_d2uiz+0x3a>
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	4770      	bx	lr
 8000e3e:	f04f 0000 	mov.w	r0, #0
 8000e42:	4770      	bx	lr

08000e44 <KEYPAD_voidInit>:
#include "../Inc/HAL/KEYPAD/KEYPAD.h"

#define ERROR_FREE 9

void KEYPAD_voidInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af02      	add	r7, sp, #8
	GPIO_Port_Enable_clock(GPIO_PORT_B);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f001 f9d2 	bl	80021f4 <GPIO_Port_Enable_clock>

	GPIO_PIN_INIT(KEY_RAW0,KEY_RAW0_PORT,output_push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8000e50:	2301      	movs	r3, #1
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2302      	movs	r3, #2
 8000e56:	2200      	movs	r2, #0
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f001 f8a4 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_RAW1,KEY_RAW1_PORT,output_push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8000e60:	2301      	movs	r3, #1
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2302      	movs	r3, #2
 8000e66:	2200      	movs	r2, #0
 8000e68:	2101      	movs	r1, #1
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 f89c 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_RAW2,KEY_RAW2_PORT,output_push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8000e70:	2301      	movs	r3, #1
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2302      	movs	r3, #2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	f001 f894 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_RAW3,KEY_RAW3_PORT,output_push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2302      	movs	r3, #2
 8000e86:	2200      	movs	r2, #0
 8000e88:	2101      	movs	r1, #1
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f001 f88c 	bl	8001fa8 <GPIO_PIN_INIT>

	GPIO_PIN_INIT(KEY_COL0,KEY_COL0_PORT,Input_pull_up_down,GPIO_INPUT,pull_UP);
 8000e90:	2301      	movs	r3, #1
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	2202      	movs	r2, #2
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f001 f884 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_COL1,KEY_COL1_PORT,Input_pull_up_down,GPIO_INPUT,pull_UP);
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2006      	movs	r0, #6
 8000eac:	f001 f87c 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_COL2,KEY_COL2_PORT,Input_pull_up_down,GPIO_INPUT,pull_UP);
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2007      	movs	r0, #7
 8000ebc:	f001 f874 	bl	8001fa8 <GPIO_PIN_INIT>
	GPIO_PIN_INIT(KEY_COL3,KEY_COL3_PORT,Input_pull_up_down,GPIO_INPUT,pull_UP);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	2101      	movs	r1, #1
 8000eca:	2008      	movs	r0, #8
 8000ecc:	f001 f86c 	bl	8001fa8 <GPIO_PIN_INIT>

}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <KEYPAD_WritrPins>:
void KEYPAD_WritrPins(uint8 value)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
	GPIO_set_PIN_value(KEY_RAW0,KEY_RAW0_PORT,GET_BIT(value,0));
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2101      	movs	r1, #1
 8000eec:	2000      	movs	r0, #0
 8000eee:	f001 f917 	bl	8002120 <GPIO_set_PIN_value>
	GPIO_set_PIN_value(KEY_RAW1,KEY_RAW1_PORT,GET_BIT(value,1));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	2101      	movs	r1, #1
 8000f02:	2001      	movs	r0, #1
 8000f04:	f001 f90c 	bl	8002120 <GPIO_set_PIN_value>
	GPIO_set_PIN_value(KEY_RAW2,KEY_RAW2_PORT,GET_BIT(value,2));
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	2101      	movs	r1, #1
 8000f18:	2009      	movs	r0, #9
 8000f1a:	f001 f901 	bl	8002120 <GPIO_set_PIN_value>
	GPIO_set_PIN_value(KEY_RAW3,KEY_RAW3_PORT,GET_BIT(value,3));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	200a      	movs	r0, #10
 8000f30:	f001 f8f6 	bl	8002120 <GPIO_set_PIN_value>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <KEYPAD_ReadPins>:

void KEYPAD_ReadPins(uint8 *value)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	uint8 loc_read=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
	GPIO_get_PIN_value(KEY_COL0,KEY_COL0_PORT,&loc_read);
 8000f48:	f107 030f 	add.w	r3, r7, #15
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2005      	movs	r0, #5
 8000f52:	f001 f923 	bl	800219c <GPIO_get_PIN_value>
	*value=loc_read;
 8000f56:	7bfa      	ldrb	r2, [r7, #15]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	701a      	strb	r2, [r3, #0]
	GPIO_get_PIN_value(KEY_COL1,KEY_COL1_PORT,&loc_read);
 8000f5c:	f107 030f 	add.w	r3, r7, #15
 8000f60:	461a      	mov	r2, r3
 8000f62:	2101      	movs	r1, #1
 8000f64:	2006      	movs	r0, #6
 8000f66:	f001 f919 	bl	800219c <GPIO_get_PIN_value>
	*value|=(loc_read<<1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25a      	sxtb	r2, r3
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]
	GPIO_get_PIN_value(KEY_COL2,KEY_COL2_PORT,&loc_read);
 8000f80:	f107 030f 	add.w	r3, r7, #15
 8000f84:	461a      	mov	r2, r3
 8000f86:	2101      	movs	r1, #1
 8000f88:	2007      	movs	r0, #7
 8000f8a:	f001 f907 	bl	800219c <GPIO_get_PIN_value>
	*value|=(loc_read<<2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	701a      	strb	r2, [r3, #0]
	GPIO_get_PIN_value(KEY_COL3,KEY_COL3_PORT,&loc_read);
 8000fa4:	f107 030f 	add.w	r3, r7, #15
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2101      	movs	r1, #1
 8000fac:	2008      	movs	r0, #8
 8000fae:	f001 f8f5 	bl	800219c <GPIO_get_PIN_value>
	*value|=(loc_read<<3);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	701a      	strb	r2, [r3, #0]

}	
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <KEYPAD_FindKey>:
ERROR_KEYPAD_STATUS KEYPAD_FindKey(uint8 *Loc_keyPress)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	73fb      	strb	r3, [r7, #15]
	    uint8 temp=0x00;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	733b      	strb	r3, [r7, #12]
	    uint8 reg;
	    for(uint8 i=0;i<RAW_NUM;i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73bb      	strb	r3, [r7, #14]
 8000fe4:	e07c      	b.n	80010e0 <KEYPAD_FindKey+0x110>
	    {
		    reg=0x0F;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	737b      	strb	r3, [r7, #13]
		    KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2201      	movs	r2, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ff8:	4053      	eors	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	737b      	strb	r3, [r7, #13]
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff68 	bl	8000ed6 <KEYPAD_WritrPins>
		    KEYPAD_ReadPins(&temp);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff96 	bl	8000f3c <KEYPAD_ReadPins>
		    switch(temp)
 8001010:	7b3b      	ldrb	r3, [r7, #12]
 8001012:	3b07      	subs	r3, #7
 8001014:	2b07      	cmp	r3, #7
 8001016:	d856      	bhi.n	80010c6 <KEYPAD_FindKey+0xf6>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <KEYPAD_FindKey+0x50>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	080010a5 	.word	0x080010a5
 8001024:	080010c7 	.word	0x080010c7
 8001028:	080010c7 	.word	0x080010c7
 800102c:	080010c7 	.word	0x080010c7
 8001030:	08001083 	.word	0x08001083
 8001034:	080010c7 	.word	0x080010c7
 8001038:	08001061 	.word	0x08001061
 800103c:	08001041 	.word	0x08001041
		    {
			    case 0b1110:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+0];
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <KEYPAD_FindKey+0x128>)
 8001046:	5cd2      	ldrb	r2, [r2, r3]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	701a      	strb	r2, [r3, #0]
				while(temp == 0b1110)
 800104c:	e004      	b.n	8001058 <KEYPAD_FindKey+0x88>
				{
				KEYPAD_ReadPins(&temp);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff72 	bl	8000f3c <KEYPAD_ReadPins>
				while(temp == 0b1110)
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	2b0e      	cmp	r3, #14
 800105c:	d0f7      	beq.n	800104e <KEYPAD_FindKey+0x7e>
				}
			    break;
 800105e:	e038      	b.n	80010d2 <KEYPAD_FindKey+0x102>
			    case 0b1101:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	3301      	adds	r3, #1
 8001066:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <KEYPAD_FindKey+0x128>)
 8001068:	5cd2      	ldrb	r2, [r2, r3]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	701a      	strb	r2, [r3, #0]
				while(temp == 0b1101)				
 800106e:	e004      	b.n	800107a <KEYPAD_FindKey+0xaa>
				{
					KEYPAD_ReadPins(&temp);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff61 	bl	8000f3c <KEYPAD_ReadPins>
				while(temp == 0b1101)				
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	2b0d      	cmp	r3, #13
 800107e:	d0f7      	beq.n	8001070 <KEYPAD_FindKey+0xa0>
				}				
			    break;
 8001080:	e027      	b.n	80010d2 <KEYPAD_FindKey+0x102>
			    case 0b1011:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <KEYPAD_FindKey+0x128>)
 800108a:	5cd2      	ldrb	r2, [r2, r3]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	701a      	strb	r2, [r3, #0]
				while(temp == 0b1011 )
 8001090:	e004      	b.n	800109c <KEYPAD_FindKey+0xcc>
				{
					KEYPAD_ReadPins(&temp);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff50 	bl	8000f3c <KEYPAD_ReadPins>
				while(temp == 0b1011 )
 800109c:	7b3b      	ldrb	r3, [r7, #12]
 800109e:	2b0b      	cmp	r3, #11
 80010a0:	d0f7      	beq.n	8001092 <KEYPAD_FindKey+0xc2>
				}				
			    break;
 80010a2:	e016      	b.n	80010d2 <KEYPAD_FindKey+0x102>
			    case 0b0111:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3303      	adds	r3, #3
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <KEYPAD_FindKey+0x128>)
 80010ac:	5cd2      	ldrb	r2, [r2, r3]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	701a      	strb	r2, [r3, #0]
				while(temp == 0b0111)
 80010b2:	e004      	b.n	80010be <KEYPAD_FindKey+0xee>
				{
					KEYPAD_ReadPins(&temp);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff3f 	bl	8000f3c <KEYPAD_ReadPins>
				while(temp == 0b0111)
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d0f7      	beq.n	80010b4 <KEYPAD_FindKey+0xe4>
				}				
			    break;
 80010c4:	e005      	b.n	80010d2 <KEYPAD_FindKey+0x102>
			    default:
			    ERROR_KEYPAD_RET = NO_KEY_PRESSED;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
			    *Loc_keyPress = KEY_NOT_PRESSED;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	229f      	movs	r2, #159	; 0x9f
 80010ce:	701a      	strb	r2, [r3, #0]
			    break;
 80010d0:	bf00      	nop
		    }
		    if(*Loc_keyPress!=KEY_NOT_PRESSED)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b9f      	cmp	r3, #159	; 0x9f
 80010d8:	d107      	bne.n	80010ea <KEYPAD_FindKey+0x11a>
	    for(uint8 i=0;i<RAW_NUM;i++)
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	3301      	adds	r3, #1
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	f67f af7f 	bls.w	8000fe6 <KEYPAD_FindKey+0x16>
 80010e8:	e000      	b.n	80010ec <KEYPAD_FindKey+0x11c>
		    {
		    	break;
 80010ea:	bf00      	nop
		    }
	    }
	return ERROR_KEYPAD_RET;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]

}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000000 	.word	0x20000000

080010fc <HTFT_voidInitialize>:
uint8 _rowstart;       ///< Some displays need this changed to offset
uint8 _xstart;
uint8 _ystart;

void HTFT_voidInitialize (void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	GPIO_Port_Enable_clock(GPIO_PORT_A);
 8001100:	2000      	movs	r0, #0
 8001102:	f001 f877 	bl	80021f4 <GPIO_Port_Enable_clock>
	/* Reset Pulse */
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_HIGH);
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	2002      	movs	r0, #2
 800110c:	f001 f808 	bl	8002120 <GPIO_set_PIN_value>
	OS_vTaskDelay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f002 faf1 	bl	80036f8 <vTaskDelay>
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_LOW);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2002      	movs	r0, #2
 800111c:	f001 f800 	bl	8002120 <GPIO_set_PIN_value>
	OS_vTaskDelay(1);
 8001120:	2001      	movs	r0, #1
 8001122:	f002 fae9 	bl	80036f8 <vTaskDelay>
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_HIGH);
 8001126:	2201      	movs	r2, #1
 8001128:	2100      	movs	r1, #0
 800112a:	2002      	movs	r0, #2
 800112c:	f000 fff8 	bl	8002120 <GPIO_set_PIN_value>
	OS_vTaskDelay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f002 fae1 	bl	80036f8 <vTaskDelay>
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_LOW);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2002      	movs	r0, #2
 800113c:	f000 fff0 	bl	8002120 <GPIO_set_PIN_value>
	OS_vTaskDelay(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f002 fad9 	bl	80036f8 <vTaskDelay>
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_HIGH);
 8001146:	2201      	movs	r2, #1
 8001148:	2100      	movs	r1, #0
 800114a:	2002      	movs	r0, #2
 800114c:	f000 ffe8 	bl	8002120 <GPIO_set_PIN_value>
	OS_vTaskDelay(120);
 8001150:	2078      	movs	r0, #120	; 0x78
 8001152:	f002 fad1 	bl	80036f8 <vTaskDelay>
	
	/* Sleep Out Command */
	voidWriteCommand(0x11);
 8001156:	2011      	movs	r0, #17
 8001158:	f000 f8d9 	bl	800130e <voidWriteCommand>
	
	/* Wait 150 ms */
	OS_vTaskDelay(150);
 800115c:	2096      	movs	r0, #150	; 0x96
 800115e:	f002 facb 	bl	80036f8 <vTaskDelay>
	
	/* Color Mode Command */
	voidWriteCommand(0x3A);
 8001162:	203a      	movs	r0, #58	; 0x3a
 8001164:	f000 f8d3 	bl	800130e <voidWriteCommand>
	voidWriteData (0x05); /*RGB565 is the parameter for COlor Mode Command */
 8001168:	2005      	movs	r0, #5
 800116a:	f000 f8e5 	bl	8001338 <voidWriteData>
	
	/* Display On Command */
	voidWriteCommand(0x29);
 800116e:	2029      	movs	r0, #41	; 0x29
 8001170:	f000 f8cd 	bl	800130e <voidWriteCommand>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TFT_SPI_CONFIG>:

TFT_SPI_CONFIG(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
Rcc_enuControl_APB2_Peripheral(RCC_APB2_Periph_SPI1,RCC_Periph_ENABLE);
 800117e:	2101      	movs	r1, #1
 8001180:	200c      	movs	r0, #12
 8001182:	f001 f9f1 	bl	8002568 <Rcc_enuControl_APB2_Peripheral>
GPIO_PIN_INIT(GPIO_PIN_1 ,GPIO_PORT_A,output_push_pull,GPIO_max_speed_2_MHz,pull_UP); 	   //A0
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2302      	movs	r3, #2
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2001      	movs	r0, #1
 8001192:	f000 ff09 	bl	8001fa8 <GPIO_PIN_INIT>
GPIO_PIN_INIT(GPIO_PIN_2 ,GPIO_PORT_A,output_push_pull,GPIO_max_speed_2_MHz,pull_UP);	  //RST
 8001196:	2301      	movs	r3, #1
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2302      	movs	r3, #2
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 ff01 	bl	8001fa8 <GPIO_PIN_INIT>
GPIO_PIN_INIT(GPIO_PIN_5 ,GPIO_PORT_A,AF_output_Push_pull,GPIO_max_speed_10_MHz,pull_UP);	  //CLK
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2202      	movs	r2, #2
 80011ae:	2100      	movs	r1, #0
 80011b0:	2005      	movs	r0, #5
 80011b2:	f000 fef9 	bl	8001fa8 <GPIO_PIN_INIT>
GPIO_PIN_INIT(GPIO_PIN_7 ,GPIO_PORT_A,AF_output_Push_pull,GPIO_max_speed_10_MHz,pull_UP);	  //MOSI
 80011b6:	2301      	movs	r3, #1
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2202      	movs	r2, #2
 80011be:	2100      	movs	r1, #0
 80011c0:	2007      	movs	r0, #7
 80011c2:	f000 fef1 	bl	8001fa8 <GPIO_PIN_INIT>

/* SPI Init */
MSPI1_voidInit();
 80011c6:	f001 fa1f 	bl	8002608 <MSPI1_voidInit>
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HTFT_voidFillColor>:
	}


}
void HTFT_voidFillColor (uint16 Copy_uint16Color)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	uint16 counter;
	uint8 Data;

	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 80011da:	202a      	movs	r0, #42	; 0x2a
 80011dc:	f000 f897 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f8a9 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f8a6 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f8a3 	bl	8001338 <voidWriteData>
	voidWriteData(127);
 80011f2:	207f      	movs	r0, #127	; 0x7f
 80011f4:	f000 f8a0 	bl	8001338 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 80011f8:	202b      	movs	r0, #43	; 0x2b
 80011fa:	f000 f888 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f89a 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f897 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f894 	bl	8001338 <voidWriteData>
	voidWriteData(159);
 8001210:	209f      	movs	r0, #159	; 0x9f
 8001212:	f000 f891 	bl	8001338 <voidWriteData>

	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 8001216:	202c      	movs	r0, #44	; 0x2c
 8001218:	f000 f879 	bl	800130e <voidWriteCommand>

	for(counter = 0; counter< 20480;counter++)
 800121c:	2300      	movs	r3, #0
 800121e:	81fb      	strh	r3, [r7, #14]
 8001220:	e010      	b.n	8001244 <HTFT_voidFillColor+0x74>
	{
		Data = Copy_uint16Color >> 8;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	737b      	strb	r3, [r7, #13]

		/* Write the high byte */
		voidWriteData(Data);
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f883 	bl	8001338 <voidWriteData>
		/* Write the low byte */
		Data = Copy_uint16Color & 0x00ff;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	737b      	strb	r3, [r7, #13]
		voidWriteData(Data);
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f87d 	bl	8001338 <voidWriteData>
	for(counter = 0; counter< 20480;counter++)
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	3301      	adds	r3, #1
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800124a:	d3ea      	bcc.n	8001222 <HTFT_voidFillColor+0x52>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HTFT_voidDrawRect>:
void HTFT_voidDrawRect(uint8 x1 ,uint8 x2 ,uint8 y1 ,uint8 y2 ,uint16 Copy_uint16Color)
{
 8001256:	b590      	push	{r4, r7, lr}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	4604      	mov	r4, r0
 800125e:	4608      	mov	r0, r1
 8001260:	4611      	mov	r1, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4623      	mov	r3, r4
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4603      	mov	r3, r0
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	460b      	mov	r3, r1
 800126e:	717b      	strb	r3, [r7, #5]
 8001270:	4613      	mov	r3, r2
 8001272:	713b      	strb	r3, [r7, #4]
	uint16 size =(x2-x1) * (y2-y1);
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	7939      	ldrb	r1, [r7, #4]
 800127e:	797a      	ldrb	r2, [r7, #5]
 8001280:	1a8a      	subs	r2, r1, r2
 8001282:	b292      	uxth	r2, r2
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	81bb      	strh	r3, [r7, #12]
	uint16 counter;
	uint8 Data;

	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 800128a:	202a      	movs	r0, #42	; 0x2a
 800128c:	f000 f83f 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f851 	bl	8001338 <voidWriteData>
	voidWriteData(x1);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f84d 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f84a 	bl	8001338 <voidWriteData>
	voidWriteData(x2);
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f846 	bl	8001338 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 80012ac:	202b      	movs	r0, #43	; 0x2b
 80012ae:	f000 f82e 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f840 	bl	8001338 <voidWriteData>
	voidWriteData(y1);
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f83c 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f000 f839 	bl	8001338 <voidWriteData>
	voidWriteData(y2);
 80012c6:	793b      	ldrb	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f835 	bl	8001338 <voidWriteData>

	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 80012ce:	202c      	movs	r0, #44	; 0x2c
 80012d0:	f000 f81d 	bl	800130e <voidWriteCommand>

	for(counter = 0; counter< size ;counter++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	e010      	b.n	80012fc <HTFT_voidDrawRect+0xa6>
	{
		Data = Copy_uint16Color >> 8;
 80012da:	8c3b      	ldrh	r3, [r7, #32]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b29b      	uxth	r3, r3
 80012e0:	72fb      	strb	r3, [r7, #11]

		/* Write the high byte */
		voidWriteData(Data);
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f827 	bl	8001338 <voidWriteData>
		/* Write the low byte */
		Data = Copy_uint16Color & 0x00ff;
 80012ea:	8c3b      	ldrh	r3, [r7, #32]
 80012ec:	72fb      	strb	r3, [r7, #11]
		voidWriteData(Data);
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f821 	bl	8001338 <voidWriteData>
	for(counter = 0; counter< size ;counter++)
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	3301      	adds	r3, #1
 80012fa:	81fb      	strh	r3, [r7, #14]
 80012fc:	89fa      	ldrh	r2, [r7, #14]
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3ea      	bcc.n	80012da <HTFT_voidDrawRect+0x84>
	}
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}

0800130e <voidWriteCommand>:
void voidWriteCommand(uint8 Copy_uint8Command)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
	uint8 Local_uint8Temp; /* this var has no effect as MISO pin not connected */
	
	/* Set A0 Pin to Low */
	GPIO_set_PIN_value(TFT_A0_PIN,GPIO_LOGIC_LOW);
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	2001      	movs	r0, #1
 800131e:	f000 feff 	bl	8002120 <GPIO_set_PIN_value>
	
	/* Send Command over SPI */
	MSPI1_voidSendReceiveSynch(Copy_uint8Command,&Local_uint8Temp);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 f978 	bl	8002620 <MSPI1_voidSendReceiveSynch>
	
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <voidWriteData>:

void voidWriteData   (uint8 Copy_uint8Data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8 Local_uint8Temp;
	
	/* Set A0 Pin to High */
	GPIO_set_PIN_value(TFT_A0_PIN,GPIO_LOGIC_HIGH);
 8001342:	2201      	movs	r2, #1
 8001344:	2100      	movs	r1, #0
 8001346:	2001      	movs	r0, #1
 8001348:	f000 feea 	bl	8002120 <GPIO_set_PIN_value>
	
	/* Send data over SPI */
	MSPI1_voidSendReceiveSynch(Copy_uint8Data,&Local_uint8Temp);	
 800134c:	f107 020f 	add.w	r2, r7, #15
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f963 	bl	8002620 <MSPI1_voidSendReceiveSynch>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <ST7735_SetAddressWindow>:
	MSTK_voidSetBusyWait(100);
	GPIO_set_PIN_value(TFT_RST_PIN,GPIO_LOGIC_HIGH);
}

void ST7735_SetAddressWindow(uint8 x0, uint8 y0, uint8 x1, uint8 y1)
{
 8001362:	b590      	push	{r4, r7, lr}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	4604      	mov	r4, r0
 800136a:	4608      	mov	r0, r1
 800136c:	4611      	mov	r1, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4623      	mov	r3, r4
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4603      	mov	r3, r0
 8001376:	71bb      	strb	r3, [r7, #6]
 8001378:	460b      	mov	r3, r1
 800137a:	717b      	strb	r3, [r7, #5]
 800137c:	4613      	mov	r3, r2
 800137e:	713b      	strb	r3, [r7, #4]
	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 8001380:	202a      	movs	r0, #42	; 0x2a
 8001382:	f7ff ffc4 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ffd6 	bl	8001338 <voidWriteData>
	voidWriteData(x0);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffd2 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ffcf 	bl	8001338 <voidWriteData>
	voidWriteData(x1);
 800139a:	797b      	ldrb	r3, [r7, #5]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ffcb 	bl	8001338 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 80013a2:	202b      	movs	r0, #43	; 0x2b
 80013a4:	f7ff ffb3 	bl	800130e <voidWriteCommand>
	voidWriteData(0);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffc5 	bl	8001338 <voidWriteData>
	voidWriteData(y0);
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffc1 	bl	8001338 <voidWriteData>
	voidWriteData(0);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ffbe 	bl	8001338 <voidWriteData>
	voidWriteData(y1);
 80013bc:	793b      	ldrb	r3, [r7, #4]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ffba 	bl	8001338 <voidWriteData>
	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 80013c4:	202c      	movs	r0, #44	; 0x2c
 80013c6:	f7ff ffa2 	bl	800130e <voidWriteCommand>
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <ST7735_WriteChar>:
void ST7735_WriteChar(uint16 x, uint16 y, char ch, FontDef font, uint16 color, uint16 bgcolor) {
 80013d2:	b082      	sub	sp, #8
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
 80013dc:	4603      	mov	r3, r0
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	460b      	mov	r3, r1
 80013e2:	80bb      	strh	r3, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	70fb      	strb	r3, [r7, #3]
    uint32 i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013f8:	4413      	add	r3, r2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2dc      	uxtb	r4, r3
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001408:	4413      	add	r3, r2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4622      	mov	r2, r4
 8001412:	f7ff ffa6 	bl	8001362 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e059      	b.n	80014d0 <ST7735_WriteChar+0xfe>
        b = font.data[(ch - 32) * font.height + i];
 800141c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	3b20      	subs	r3, #32
 8001422:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	4619      	mov	r1, r3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	440b      	add	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	e03f      	b.n	80014be <ST7735_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d019      	beq.n	8001482 <ST7735_WriteChar+0xb0>
                uint8 data[] = { color >> 8, color & 0xFF };
 800144e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	b29b      	uxth	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	733b      	strb	r3, [r7, #12]
 8001458:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800145a:	b2db      	uxtb	r3, r3
 800145c:	737b      	strb	r3, [r7, #13]
                for(uint8 i=0;i<sizeof(data);i++)
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
 8001462:	e00a      	b.n	800147a <ST7735_WriteChar+0xa8>
                {
                	voidWriteData(data[i]);
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	3320      	adds	r3, #32
 8001468:	443b      	add	r3, r7
 800146a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff62 	bl	8001338 <voidWriteData>
                for(uint8 i=0;i<sizeof(data);i++)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	3301      	adds	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d9f1      	bls.n	8001464 <ST7735_WriteChar+0x92>
 8001480:	e01a      	b.n	80014b8 <ST7735_WriteChar+0xe6>
                }
               // ST7735_WriteData(data, sizeof(data));
            } else {
                uint8 data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001482:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	723b      	strb	r3, [r7, #8]
 800148e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001492:	b2db      	uxtb	r3, r3
 8001494:	727b      	strb	r3, [r7, #9]
                for(uint8 i=0;i<sizeof(data);i++)
 8001496:	2300      	movs	r3, #0
 8001498:	75bb      	strb	r3, [r7, #22]
 800149a:	e00a      	b.n	80014b2 <ST7735_WriteChar+0xe0>
                {
                	voidWriteData(data[i]);
 800149c:	7dbb      	ldrb	r3, [r7, #22]
 800149e:	3320      	adds	r3, #32
 80014a0:	443b      	add	r3, r7
 80014a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff46 	bl	8001338 <voidWriteData>
                for(uint8 i=0;i<sizeof(data);i++)
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	3301      	adds	r3, #1
 80014b0:	75bb      	strb	r3, [r7, #22]
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d9f1      	bls.n	800149c <ST7735_WriteChar+0xca>
        for(j = 0; j < font.width; j++) {
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	3301      	adds	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80014c2:	461a      	mov	r2, r3
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d3b9      	bcc.n	800143e <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014d4:	461a      	mov	r2, r3
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4293      	cmp	r3, r2
 80014da:	d39f      	bcc.n	800141c <ST7735_WriteChar+0x4a>
                }
                //ST7735_WriteData(data, sizeof(data));
            }
        }
    }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014e8:	b002      	add	sp, #8
 80014ea:	4770      	bx	lr

080014ec <ST7735_WriteString>:

void ST7735_WriteString(uint16 x, uint16 y, const char* str, FontDef font, uint16 color, uint16 bgcolor) {
 80014ec:	b082      	sub	sp, #8
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af04      	add	r7, sp, #16
 80014f4:	603a      	str	r2, [r7, #0]
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	4603      	mov	r3, r0
 80014fa:	80fb      	strh	r3, [r7, #6]
 80014fc:	460b      	mov	r3, r1
 80014fe:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 8001500:	e031      	b.n	8001566 <ST7735_WriteString+0x7a>
        if(x + font.width >= _width) {
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	7d3a      	ldrb	r2, [r7, #20]
 8001506:	4413      	add	r3, r2
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <ST7735_WriteString+0x94>)
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	4293      	cmp	r3, r2
 800150e:	db15      	blt.n	800153c <ST7735_WriteString+0x50>
            x = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001514:	7d7b      	ldrb	r3, [r7, #21]
 8001516:	b29a      	uxth	r2, r3
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	7d7a      	ldrb	r2, [r7, #21]
 8001522:	4413      	add	r3, r2
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <ST7735_WriteString+0x98>)
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	4293      	cmp	r3, r2
 800152a:	da21      	bge.n	8001570 <ST7735_WriteString+0x84>
                break;
            }

            if(*str == ' ') {
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d103      	bne.n	800153c <ST7735_WriteString+0x50>
                // skip spaces in the beginning of the new line
                str++;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	603b      	str	r3, [r7, #0]
                continue;
 800153a:	e014      	b.n	8001566 <ST7735_WriteString+0x7a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	88b9      	ldrh	r1, [r7, #4]
 8001542:	88f8      	ldrh	r0, [r7, #6]
 8001544:	8c3b      	ldrh	r3, [r7, #32]
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	8bbb      	ldrh	r3, [r7, #28]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f7ff ff3e 	bl	80013d2 <ST7735_WriteChar>
        x += font.width;
 8001556:	7d3b      	ldrb	r3, [r7, #20]
 8001558:	b29a      	uxth	r2, r3
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4413      	add	r3, r2
 800155e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1c9      	bne.n	8001502 <ST7735_WriteString+0x16>
    }

}
 800156e:	e000      	b.n	8001572 <ST7735_WriteString+0x86>
                break;
 8001570:	bf00      	nop
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800157c:	b002      	add	sp, #8
 800157e:	4770      	bx	lr
 8001580:	20000010 	.word	0x20000010
 8001584:	20000012 	.word	0x20000012

08001588 <drawPixel>:

void drawPixel(uint16 x, uint16 y, uint16 color) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
 8001592:	460b      	mov	r3, r1
 8001594:	80bb      	strh	r3, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <drawPixel+0x80>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d22c      	bcs.n	80015fe <drawPixel+0x76>
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <drawPixel+0x84>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d227      	bcs.n	80015fe <drawPixel+0x76>
        return;
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2d8      	uxtb	r0, r3
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f7ff fecc 	bl	8001362 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	733b      	strb	r3, [r7, #12]
 80015d4:	887b      	ldrh	r3, [r7, #2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	737b      	strb	r3, [r7, #13]
    for(uint8 i=0;i<sizeof(data);i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e00a      	b.n	80015f6 <drawPixel+0x6e>
    {
    	voidWriteData(data[i]);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3310      	adds	r3, #16
 80015e4:	443b      	add	r3, r7
 80015e6:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fea4 	bl	8001338 <voidWriteData>
    for(uint8 i=0;i<sizeof(data);i++)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d9f1      	bls.n	80015e0 <drawPixel+0x58>
 80015fc:	e000      	b.n	8001600 <drawPixel+0x78>
        return;
 80015fe:	bf00      	nop
    }
}
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000010 	.word	0x20000010
 800160c:	20000012 	.word	0x20000012

08001610 <writePixel>:

void writePixel(uint16 x, uint16 y, uint16 color)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
 800161a:	460b      	mov	r3, r1
 800161c:	80bb      	strh	r3, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	88b9      	ldrh	r1, [r7, #4]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffad 	bl	8001588 <drawPixel>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <writeLine>:

void writeLine(uint16 x0, uint16 y0, uint16 x1, uint16 y1, uint16 color)
{
 8001636:	b590      	push	{r4, r7, lr}
 8001638:	b089      	sub	sp, #36	; 0x24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4604      	mov	r4, r0
 800163e:	4608      	mov	r0, r1
 8001640:	4611      	mov	r1, r2
 8001642:	461a      	mov	r2, r3
 8001644:	4623      	mov	r3, r4
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	4603      	mov	r3, r0
 800164a:	80bb      	strh	r3, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	803b      	strh	r3, [r7, #0]
    uint16 steep = abs(y1 - y0) > abs(x1 - x0);
 8001654:	883a      	ldrh	r2, [r7, #0]
 8001656:	88bb      	ldrh	r3, [r7, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800165e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001662:	8879      	ldrh	r1, [r7, #2]
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	1acb      	subs	r3, r1, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfb8      	it	lt
 800166c:	425b      	neglt	r3, r3
 800166e:	429a      	cmp	r2, r3
 8001670:	bfcc      	ite	gt
 8001672:	2301      	movgt	r3, #1
 8001674:	2300      	movle	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	83bb      	strh	r3, [r7, #28]
    if (steep) {
 800167a:	8bbb      	ldrh	r3, [r7, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <writeLine+0x62>
        _swap_int16_t(x0, y0);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	837b      	strh	r3, [r7, #26]
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	8b7b      	ldrh	r3, [r7, #26]
 800168a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	833b      	strh	r3, [r7, #24]
 8001690:	883b      	ldrh	r3, [r7, #0]
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	8b3b      	ldrh	r3, [r7, #24]
 8001696:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	429a      	cmp	r2, r3
 800169e:	d90b      	bls.n	80016b8 <writeLine+0x82>
        _swap_int16_t(x0, x1);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	82fb      	strh	r3, [r7, #22]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	82bb      	strh	r3, [r7, #20]
 80016b0:	883b      	ldrh	r3, [r7, #0]
 80016b2:	80bb      	strh	r3, [r7, #4]
 80016b4:	8abb      	ldrh	r3, [r7, #20]
 80016b6:	803b      	strh	r3, [r7, #0]
    }

    uint16 dx, dy;
    dx = x1 - x0;
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	827b      	strh	r3, [r7, #18]
    dy = abs(y1 - y0);
 80016c0:	883a      	ldrh	r2, [r7, #0]
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bfb8      	it	lt
 80016ca:	425b      	neglt	r3, r3
 80016cc:	823b      	strh	r3, [r7, #16]

    uint16 err = dx / 2;
 80016ce:	8a7b      	ldrh	r3, [r7, #18]
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	83fb      	strh	r3, [r7, #30]
    uint16 ystep;

    if (y0 < y1) {
 80016d4:	88ba      	ldrh	r2, [r7, #4]
 80016d6:	883b      	ldrh	r3, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d202      	bcs.n	80016e2 <writeLine+0xac>
        ystep = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	81fb      	strh	r3, [r7, #14]
 80016e0:	e01a      	b.n	8001718 <writeLine+0xe2>
    } else {
        ystep = -1;
 80016e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e6:	81fb      	strh	r3, [r7, #14]
    }

    for (; x0<=x1; x0++) {
 80016e8:	e016      	b.n	8001718 <writeLine+0xe2>
        if (steep) {
 80016ea:	8bbb      	ldrh	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <writeLine+0xc8>
            writePixel(y0, x0, color);
 80016f0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016f2:	88f9      	ldrh	r1, [r7, #6]
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff8a 	bl	8001610 <writePixel>
 80016fc:	e005      	b.n	800170a <writeLine+0xd4>
        } else {
            writePixel(x0, y0, color);
 80016fe:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001700:	88b9      	ldrh	r1, [r7, #4]
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff83 	bl	8001610 <writePixel>
        }
        err -= dy;
 800170a:	8bfa      	ldrh	r2, [r7, #30]
 800170c:	8a3b      	ldrh	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3301      	adds	r3, #1
 8001716:	80fb      	strh	r3, [r7, #6]
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	429a      	cmp	r2, r3
 800171e:	d9e4      	bls.n	80016ea <writeLine+0xb4>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}

0800172a <drawFastVLine>:

void  drawFastVLine(uint16 x, uint16 y, uint16 h, uint16 color)
{
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b085      	sub	sp, #20
 800172e:	af02      	add	r7, sp, #8
 8001730:	4604      	mov	r4, r0
 8001732:	4608      	mov	r0, r1
 8001734:	4611      	mov	r1, r2
 8001736:	461a      	mov	r2, r3
 8001738:	4623      	mov	r3, r4
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	4603      	mov	r3, r0
 800173e:	80bb      	strh	r3, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8001748:	88ba      	ldrh	r2, [r7, #4]
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	4413      	add	r3, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b01      	subs	r3, #1
 8001752:	b29c      	uxth	r4, r3
 8001754:	88fa      	ldrh	r2, [r7, #6]
 8001756:	88b9      	ldrh	r1, [r7, #4]
 8001758:	88f8      	ldrh	r0, [r7, #6]
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4623      	mov	r3, r4
 8001760:	f7ff ff69 	bl	8001636 <writeLine>
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}

0800176c <drawFastHLine>:
void  drawFastHLine(uint16 x, uint16 y, uint16 w, uint16 color)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af02      	add	r7, sp, #8
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	88bc      	ldrh	r4, [r7, #4]
 8001798:	88b9      	ldrh	r1, [r7, #4]
 800179a:	88f8      	ldrh	r0, [r7, #6]
 800179c:	883b      	ldrh	r3, [r7, #0]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4623      	mov	r3, r4
 80017a2:	f7ff ff48 	bl	8001636 <writeLine>
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}

080017ae <drawRect>:
void drawRect(uint16 x, uint16 y, uint16 w, uint16 h, uint16 color)
{
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4604      	mov	r4, r0
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4603      	mov	r3, r0
 80017c2:	80bb      	strh	r3, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 80017cc:	8b3b      	ldrh	r3, [r7, #24]
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	88b9      	ldrh	r1, [r7, #4]
 80017d2:	88f8      	ldrh	r0, [r7, #6]
 80017d4:	f7ff ffca 	bl	800176c <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 80017d8:	88ba      	ldrh	r2, [r7, #4]
 80017da:	883b      	ldrh	r3, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b299      	uxth	r1, r3
 80017e4:	8b3b      	ldrh	r3, [r7, #24]
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	88f8      	ldrh	r0, [r7, #6]
 80017ea:	f7ff ffbf 	bl	800176c <drawFastHLine>
    drawFastVLine(x, y, h, color);
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	883a      	ldrh	r2, [r7, #0]
 80017f2:	88b9      	ldrh	r1, [r7, #4]
 80017f4:	88f8      	ldrh	r0, [r7, #6]
 80017f6:	f7ff ff98 	bl	800172a <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	b298      	uxth	r0, r3
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	883a      	ldrh	r2, [r7, #0]
 800180a:	88b9      	ldrh	r1, [r7, #4]
 800180c:	f7ff ff8d 	bl	800172a <drawFastVLine>
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <ST7735_SetRotation+0xd8>)
 8001830:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <ST7735_SetRotation+0xd8>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d84e      	bhi.n	80018d8 <ST7735_SetRotation+0xc0>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <ST7735_SetRotation+0x28>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001851 	.word	0x08001851
 8001844:	08001873 	.word	0x08001873
 8001848:	08001895 	.word	0x08001895
 800184c:	080018b7 	.word	0x080018b7
  {
  case 0:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <ST7735_SetRotation+0xdc>)
 8001856:	22a0      	movs	r2, #160	; 0xa0
 8001858:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800185a:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <ST7735_SetRotation+0xe0>)
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <ST7735_SetRotation+0xe4>)
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <ST7735_SetRotation+0xe8>)
 8001866:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <ST7735_SetRotation+0xec>)
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b26      	ldr	r3, [pc, #152]	; (8001908 <ST7735_SetRotation+0xf0>)
 800186e:	701a      	strb	r2, [r3, #0]
    break;
 8001870:	e032      	b.n	80018d8 <ST7735_SetRotation+0xc0>
  case 1:
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001872:	23a0      	movs	r3, #160	; 0xa0
 8001874:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <ST7735_SetRotation+0xe0>)
 8001878:	22a0      	movs	r2, #160	; 0xa0
 800187a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <ST7735_SetRotation+0xdc>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <ST7735_SetRotation+0xe4>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <ST7735_SetRotation+0xf0>)
 8001888:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <ST7735_SetRotation+0xec>)
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <ST7735_SetRotation+0xe8>)
 8001890:	701a      	strb	r2, [r3, #0]
    break;
 8001892:	e021      	b.n	80018d8 <ST7735_SetRotation+0xc0>
  case 2:
      madctl = ST7735_MADCTL_RGB;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <ST7735_SetRotation+0xdc>)
 800189a:	22a0      	movs	r2, #160	; 0xa0
 800189c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <ST7735_SetRotation+0xe0>)
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <ST7735_SetRotation+0xe4>)
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <ST7735_SetRotation+0xe8>)
 80018aa:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <ST7735_SetRotation+0xec>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <ST7735_SetRotation+0xf0>)
 80018b2:	701a      	strb	r2, [r3, #0]
    break;
 80018b4:	e010      	b.n	80018d8 <ST7735_SetRotation+0xc0>
  case 3:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80018b6:	2360      	movs	r3, #96	; 0x60
 80018b8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <ST7735_SetRotation+0xe0>)
 80018bc:	22a0      	movs	r2, #160	; 0xa0
 80018be:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <ST7735_SetRotation+0xdc>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <ST7735_SetRotation+0xe4>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <ST7735_SetRotation+0xf0>)
 80018cc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <ST7735_SetRotation+0xec>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <ST7735_SetRotation+0xe8>)
 80018d4:	701a      	strb	r2, [r3, #0]
    break;
 80018d6:	bf00      	nop
  }
  voidWriteCommand(0x36);//ST7735_MADCTL
 80018d8:	2036      	movs	r0, #54	; 0x36
 80018da:	f7ff fd18 	bl	800130e <voidWriteCommand>
//  ST7735_WriteData(&madctl,1);
	voidWriteData(madctl);
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fd29 	bl	8001338 <voidWriteData>

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000a0 	.word	0x200000a0
 80018f4:	20000012 	.word	0x20000012
 80018f8:	20000010 	.word	0x20000010
 80018fc:	200000a1 	.word	0x200000a1
 8001900:	200000a3 	.word	0x200000a3
 8001904:	200000a2 	.word	0x200000a2
 8001908:	200000a4 	.word	0x200000a4

0800190c <UDS_VoidInit>:
extern uint8 APP_CURRENT_SECURITY_LEVEL ;
extern uint8 APP_CURRENT_SESSION        ;
extern const uint16 LED_Feature;

void UDS_VoidInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0


	Can_ConfigType can1 ={
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <UDS_VoidInit+0x2c>)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	ca07      	ldmia	r2, {r0, r1, r2}
 8001918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    	     		.can_select_time_trigger_communcation_mode = CAN_SELECT_TIME_TRIGGER_COMMUNICATION_MODE_DISABLED,
		    	     		.can_select_tx_fifo_priority = CAN_SELECT_TX_FIFO_BY_THE_REQUEST_ORDER,
		    	     		.can_select_wakeup_automatic = CAN_SELECT_WAKEUP_AUTOMATIC_DURING_SLEEP,
		    	     		.can_bit_time_calculation = 0x001c0003  // http://www.bittiming.can-wiki.info/
		    	     };
	 Can_enuInit(&can1);
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f864 	bl	80019ec <Can_enuInit>
	 Can_enuEnableRxInterruptFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001924:	2000      	movs	r0, #0
 8001926:	f000 fa03 	bl	8001d30 <Can_enuEnableRxInterruptFifox>
	 Nvic_enuEnableInterrupt(NVIC_USB_LP_CAN_RX0);
 800192a:	2014      	movs	r0, #20
 800192c:	f000 fc7c 	bl	8002228 <Nvic_enuEnableInterrupt>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	08005250 	.word	0x08005250

0800193c <UDS_Request>:

void UDS_Request(uint8 Copy_SID, uint8 Copy_SUBfn, uint8 Copy_DID, uint32 Copy_Data)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	460b      	mov	r3, r1
 800194a:	71bb      	strb	r3, [r7, #6]
 800194c:	4613      	mov	r3, r2
 800194e:	717b      	strb	r3, [r7, #5]
    // uint64 uint64RequestFrame = 0;
    // uint64RequestFrame = ((uint64)Copy_SID << 48) + ((uint64)Copy_SUBfn << 40) + ((uint64)Copy_DID << 32) + Copy_Data;
    // return uint64RequestFrame;
	Can_MessageType message1={
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <UDS_Request+0x50>)
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	ca07      	ldmia	r2, {r0, r1, r2}
 8001958:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	     		.can_select_rtr_mode = CAN_SELECT_RTR_DATA_FRAME,
	     		.can_standard_id_11_bit = 0x100
	     };

    uint8 frame[7];
    frame[0] = Copy_SID;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	733b      	strb	r3, [r7, #12]
    frame[1] = Copy_SUBfn;
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	737b      	strb	r3, [r7, #13]
    frame[2] = Copy_DID;
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	73bb      	strb	r3, [r7, #14]
    *((uint32*)(frame+3)) = Copy_Data;
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	3303      	adds	r3, #3
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	601a      	str	r2, [r3, #0]

    Can_enuTransmitMessage_MustSend(&message1, frame);
 8001972:	f107 020c 	add.w	r2, r7, #12
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f8e9 	bl	8001b54 <Can_enuTransmitMessage_MustSend>
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	0800525c 	.word	0x0800525c

08001990 <UDS_voidSetCallBack>:
}



void UDS_voidSetCallBack( void (*callback)(Can_MessageType* Address_Message,uint8 _ArrMessageData[EIGHT_VALUE],uint8 Copy_uint8FilterIndex))
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	Can_enuSetCallbackRxFunctionFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0, callback);
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f9ea 	bl	8001d74 <Can_enuSetCallbackRxFunctionFifox>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <custom_hash_function>:
    }else {
       UDS_GenerateNegativeResponse(NRC_SUB_FUNCTION_NOT_SUPPORTED);
    }
}

uint32 custom_hash_function(uint32 input) {
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    // Custom hash function using multiplication and bitwise operations
    unsigned int hash = input;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	617b      	str	r3, [r7, #20]

    // Some arbitrary constants for mixing
    unsigned int constant1 = 31;
 80019b4:	231f      	movs	r3, #31
 80019b6:	613b      	str	r3, [r7, #16]
    unsigned int constant2 = 17;
 80019b8:	2311      	movs	r3, #17
 80019ba:	60fb      	str	r3, [r7, #12]

    // Mix the bits using bitwise XOR and left shift operations
    hash = (hash ^ (hash << constant1)) + constant2;
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	409a      	lsls	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4053      	eors	r3, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
    hash = (hash ^ (hash >> constant2)) * constant1;
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	40da      	lsrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	405a      	eors	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]

    return hash;
 80019de:	697b      	ldr	r3, [r7, #20]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
	...

080019ec <Can_enuInit>:




/******************************* Software Interfaces Implementation *******************/
Can_StatusErrorType Can_enuInit(const Can_ConfigType* Address_Can){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	6078      	str	r0, [r7, #4]


	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
	if(NULL == Address_Can){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <Can_enuInit+0x18>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 80019fe:	2309      	movs	r3, #9
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e0a0      	b.n	8001b46 <Can_enuInit+0x15a>
	}
	else{
		/* Enable CAN1 Rcc Clock */
		Rcc_enuControl_APB1_Peripheral(RCC_APB1_Periph_CAN,RCC_Periph_ENABLE);
 8001a04:	2101      	movs	r1, #1
 8001a06:	2019      	movs	r0, #25
 8001a08:	f000 fd5e 	bl	80024c8 <Rcc_enuControl_APB1_Peripheral>

		Rcc_enuControl_APB2_Peripheral(RCC_APB2_Periph_IOPA, RCC_Periph_ENABLE);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f000 fdaa 	bl	8002568 <Rcc_enuControl_APB2_Peripheral>

		/* CAN TX */
			GPIO_PIN_INIT(GPIO_PIN_12,GPIO_PORT_A,AF_output_Push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8001a14:	2301      	movs	r3, #1
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200c      	movs	r0, #12
 8001a20:	f000 fac2 	bl	8001fa8 <GPIO_PIN_INIT>

		/* CAN RX */
			GPIO_PIN_INIT(GPIO_PIN_11,GPIO_PORT_A,InputFloating,GPIO_INPUT,FLOATING);
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	200b      	movs	r0, #11
 8001a30:	f000 faba 	bl	8001fa8 <GPIO_PIN_INIT>

		/* exit from sleep mode and enable init mode */
		Can_GoToInitMode();
 8001a34:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <Can_enuInit+0x164>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <Can_enuInit+0x164>)
 8001a3a:	f023 0302 	bic.w	r3, r3, #2
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <Can_enuInit+0x164>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f9      	bne.n	8001a40 <Can_enuInit+0x54>
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <Can_enuInit+0x164>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <Can_enuInit+0x164>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <Can_enuInit+0x164>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d1f9      	bne.n	8001a58 <Can_enuInit+0x6c>

		/* Choose Tx Fifo Priority */
		Can_SelectTxFifoPriority(Address_Can->can_select_tx_fifo_priority);
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <Can_enuInit+0x164>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4a36      	ldr	r2, [pc, #216]	; (8001b50 <Can_enuInit+0x164>)
 8001a76:	430b      	orrs	r3, r1
 8001a78:	6013      	str	r3, [r2, #0]


		/* Choose Rx Lock Mode */
		Can_SelectRxFifoLockMode(Address_Can->can_select_rx_lock_mode);
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <Can_enuInit+0x164>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0308 	bic.w	r3, r3, #8
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	7852      	ldrb	r2, [r2, #1]
 8001a86:	00d2      	lsls	r2, r2, #3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <Can_enuInit+0x164>)
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6013      	str	r3, [r2, #0]

		/* enable/disable Retransmission Mode */
		Can_SelectRetransmissionAutomatic(Address_Can->can_select_retransmission_automatic);
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <Can_enuInit+0x164>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 0310 	bic.w	r3, r3, #16
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	7892      	ldrb	r2, [r2, #2]
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <Can_enuInit+0x164>)
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6013      	str	r3, [r2, #0]

		/* enable/disable WakeUp During Sleep Mode */
		Can_SelectWakeupAutomatic(Address_Can->can_select_wakeup_automatic);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <Can_enuInit+0x164>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 0320 	bic.w	r3, r3, #32
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	78d2      	ldrb	r2, [r2, #3]
 8001ab2:	0152      	lsls	r2, r2, #5
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <Can_enuInit+0x164>)
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6013      	str	r3, [r2, #0]

		/* enable/disable Bus Off Left Automatically Mode */
		Can_SelectBackFromBusOffStateAutomatic(Address_Can->can_select_back_from_bus_off_state_automatic);
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <Can_enuInit+0x164>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	7912      	ldrb	r2, [r2, #4]
 8001ac8:	0192      	lsls	r2, r2, #6
 8001aca:	4611      	mov	r1, r2
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <Can_enuInit+0x164>)
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6013      	str	r3, [r2, #0]

		/* enable/disable Time Trigger Communciation Mode */
		Can_SelectTimeTriggerCommunicationMode(Address_Can->can_select_time_trigger_communcation_mode);
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <Can_enuInit+0x164>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	7952      	ldrb	r2, [r2, #5]
 8001ade:	01d2      	lsls	r2, r2, #7
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <Can_enuInit+0x164>)
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6013      	str	r3, [r2, #0]


		/* enable/disable CAN during Debugging Mode */
		Can_SelectDuringDebugModeCanWorking(Address_Can->can_select_during_debug_mode_can_working);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <Can_enuInit+0x164>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	7992      	ldrb	r2, [r2, #6]
 8001af4:	0412      	lsls	r2, r2, #16
 8001af6:	4611      	mov	r1, r2
 8001af8:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <Can_enuInit+0x164>)
 8001afa:	430b      	orrs	r3, r1
 8001afc:	6013      	str	r3, [r2, #0]

		/* Select Node Mode */
		Can_SelectNodeMode(Address_Can->can_select_node_mode);
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <Can_enuInit+0x164>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	79d2      	ldrb	r2, [r2, #7]
 8001b0a:	0792      	lsls	r2, r2, #30
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <Can_enuInit+0x164>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	61d3      	str	r3, [r2, #28]

		/* Set Bit Time Calculation,, http://www.bittiming.can-wiki.info/ */
		Can_SetBitTimeCalulation(Address_Can->can_bit_time_calculation);
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <Can_enuInit+0x164>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b24:	490a      	ldr	r1, [pc, #40]	; (8001b50 <Can_enuInit+0x164>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61cb      	str	r3, [r1, #28]

		/* Exit From Init Mode */
		Can_GoOutFromInitMode();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <Can_enuInit+0x164>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <Can_enuInit+0x164>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <Can_enuInit+0x164>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <Can_enuInit+0x14a>

//		/* It's Used for Filters Configuration */
//		GlobalStatic_uint8NumberOfCan1Fitlers = Address_Can->can_number_of_can1_filters_1_to_28;

		/* Filter Init */
		(void)enuFiltersInit();
 8001b42:	f000 f933 	bl	8001dac <enuFiltersInit>

//		while( READ_BIT(CAN_1->CAN_MSR,ZERO_VALUE) ==ONE_VALUE );

	}

	return Loc_enuCanStatusError;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40006400 	.word	0x40006400

08001b54 <Can_enuTransmitMessage_MustSend>:
	return Loc_enuCanStatusError;


}

Can_StatusErrorType Can_enuTransmitMessage_MustSend(const Can_MessageType* Address_Message,uint8 _ArrMessageData[]){
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]

	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
	uint8 Loc_uint8BestMailBoxIndex = Can_GetBestMailBoxIndex();
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0e1b      	lsrs	r3, r3, #24
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	73bb      	strb	r3, [r7, #14]
	if(NULL == Address_Message){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <Can_enuTransmitMessage_MustSend+0x28>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8001b76:	2309      	movs	r3, #9
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e0cc      	b.n	8001d16 <Can_enuTransmitMessage_MustSend+0x1c2>
	}

	else{

		/* check is any mail box is empty */
			while(Can_IsMailBox_x_Empty(Loc_uint8BestMailBoxIndex) == STD_FALSE);
 8001b7c:	bf00      	nop
 8001b7e:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	7bbb      	ldrb	r3, [r7, #14]
 8001b84:	331a      	adds	r3, #26
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d1f5      	bne.n	8001b7e <Can_enuTransmitMessage_MustSend+0x2a>

			/* Set DLC */
			Can_SetDLCinTxMailBox_x(Loc_uint8BestMailBoxIndex, (Address_Message->can_DLC_FROM_0_TO_8 ));
 8001b92:	4a64      	ldr	r2, [pc, #400]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	3318      	adds	r3, #24
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 010f 	bic.w	r1, r3, #15
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	485d      	ldr	r0, [pc, #372]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	3318      	adds	r3, #24
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4403      	add	r3, r0
 8001bb8:	3304      	adds	r3, #4
 8001bba:	601a      	str	r2, [r3, #0]

			/* SET extended ID */
			Can_SetExtendedIDinTxMailBox_x(Loc_uint8BestMailBoxIndex, (Address_Message->can_extended_id_remaining_18_bit));
 8001bbc:	4a59      	ldr	r2, [pc, #356]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <Can_enuTransmitMessage_MustSend+0x1d4>)
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	00d9      	lsls	r1, r3, #3
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <Can_enuTransmitMessage_MustSend+0x1d8>)
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	4853      	ldr	r0, [pc, #332]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001bd8:	7bb9      	ldrb	r1, [r7, #14]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	f101 0318 	add.w	r3, r1, #24
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4403      	add	r3, r0
 8001be4:	601a      	str	r2, [r3, #0]

			/* SET  IDE */
			Can_SetIDEinTxMailBox_x(Loc_uint8BestMailBoxIndex,Address_Message->can_select_ide_mode);
 8001be6:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	3318      	adds	r3, #24
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0204 	bic.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7a1b      	ldrb	r3, [r3, #8]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4949      	ldr	r1, [pc, #292]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	4302      	orrs	r2, r0
 8001c04:	3318      	adds	r3, #24
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	440b      	add	r3, r1
 8001c0a:	601a      	str	r2, [r3, #0]

			/* SET  RTR */
			Can_SetRTRinTxMailBox_x(Loc_uint8BestMailBoxIndex,Address_Message->can_select_rtr_mode);
 8001c0c:	4a45      	ldr	r2, [pc, #276]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	3318      	adds	r3, #24
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0202 	bic.w	r2, r3, #2
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7a5b      	ldrb	r3, [r3, #9]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	493f      	ldr	r1, [pc, #252]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	4302      	orrs	r2, r0
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	440b      	add	r3, r1
 8001c30:	601a      	str	r2, [r3, #0]

			/* SET Standard IDE */
			Can_SetStandardIDinTxMailBox_x(Loc_uint8BestMailBoxIndex,Address_Message->can_standard_id_11_bit);
 8001c32:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	3318      	adds	r3, #24
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	4413      	add	r3, r2
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 0214 	ubfx	r2, r3, #0, #21
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	885b      	ldrh	r3, [r3, #2]
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	4302      	orrs	r2, r0
 8001c50:	3318      	adds	r3, #24
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	440b      	add	r3, r1
 8001c56:	601a      	str	r2, [r3, #0]

			/* SET  Message Data  */
			Can_SetDataMessaginMailBox_x(Loc_uint8BestMailBoxIndex,_ArrMessageData);
 8001c58:	4932      	ldr	r1, [pc, #200]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c5a:	7bbb      	ldrb	r3, [r7, #14]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	440b      	add	r3, r1
 8001c64:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	492e      	ldr	r1, [pc, #184]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	6852      	ldr	r2, [r2, #4]
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	440b      	add	r3, r1
 8001c76:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c7a:	601a      	str	r2, [r3, #0]

			/* Request For Transmit */
			Can_StartTransmit(Loc_uint8BestMailBoxIndex);
 8001c7c:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	3318      	adds	r3, #24
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4926      	ldr	r1, [pc, #152]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c8a:	7bbb      	ldrb	r3, [r7, #14]
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	3318      	adds	r3, #24
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	601a      	str	r2, [r3, #0]

		//	while( Can_IsRequestCompletedMailBox_x(Loc_uint8BestMailBoxIndex) != STD_TRUE);


			// Request here's Done
			while(Can_IsMailBox_x_Empty(Loc_uint8BestMailBoxIndex) == STD_FALSE);
 8001c98:	bf00      	nop
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	331a      	adds	r3, #26
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d1f5      	bne.n	8001c9a <Can_enuTransmitMessage_MustSend+0x146>

			if(	Can_IsTransmissionCompletedMailBox_x(Loc_uint8BestMailBoxIndex) != STD_TRUE){
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d028      	beq.n	8001d16 <Can_enuTransmitMessage_MustSend+0x1c2>
				// Error Happenes
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_uint8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	7bbb      	ldrb	r3, [r7, #14]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	3302      	adds	r3, #2
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <Can_enuTransmitMessage_MustSend+0x18a>
 8001cda:	220c      	movs	r2, #12
 8001cdc:	e000      	b.n	8001ce0 <Can_enuTransmitMessage_MustSend+0x18c>
 8001cde:	2200      	movs	r2, #0
												Can_IsTransmissionErrorHappenedMailBox_x(Loc_uint8BestMailBoxIndex)*Can_GetLastErrorCode();
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	3303      	adds	r3, #3
 8001cea:	fa21 f303 	lsr.w	r3, r1, r3
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_uint8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 8001cfc:	b2db      	uxtb	r3, r3
												Can_IsTransmissionErrorHappenedMailBox_x(Loc_uint8BestMailBoxIndex)*Can_GetLastErrorCode();
 8001cfe:	4909      	ldr	r1, [pc, #36]	; (8001d24 <Can_enuTransmitMessage_MustSend+0x1d0>)
 8001d00:	6989      	ldr	r1, [r1, #24]
 8001d02:	0909      	lsrs	r1, r1, #4
				Loc_enuCanStatusError = Can_IsArbitrationLostHappenedMailBox_x(Loc_uint8BestMailBoxIndex)*CAN_STATUS_FAIL_ARBITRATION_LOST +
 8001d04:	b2c9      	uxtb	r1, r1
 8001d06:	f001 0103 	and.w	r1, r1, #3
 8001d0a:	b2c9      	uxtb	r1, r1
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	73fb      	strb	r3, [r7, #15]



	}

	return Loc_enuCanStatusError;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40006400 	.word	0x40006400
 8001d28:	ffe00007 	.word	0xffe00007
 8001d2c:	001ffff8 	.word	0x001ffff8

08001d30 <Can_enuEnableRxInterruptFifox>:

	return Loc_enuCanStatusError;
}

/* Interrupt Part */
Can_StatusErrorType Can_enuEnableRxInterruptFifox(Can_RxFifoMailBoxIndexType Copy_enuFifoIndex){
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	Can_StatusErrorType Loc_enuCanStatusError= CAN_STATUS_OK;;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]

	/* Enable Interrupt */
	Can_EnableRxInterruptFifoMailBox_x(Copy_enuFifoIndex);
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <Can_enuEnableRxInterruptFifox+0x40>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2201      	moveq	r2, #1
 8001d4a:	2200      	movne	r2, #0
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	440a      	add	r2, r1
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <Can_enuEnableRxInterruptFifox+0x40>)
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6153      	str	r3, [r2, #20]

	return Loc_enuCanStatusError;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40006400 	.word	0x40006400

08001d74 <Can_enuSetCallbackRxFunctionFifox>:
	Can_DisableRxInterruptFifoMailBox_x(Copy_enuFifoIndex);

	return Loc_enuCanStatusError;
}

Can_StatusErrorType Can_enuSetCallbackRxFunctionFifox(Can_RxFifoMailBoxIndexType Copy_enuFifoIndex,void (*callback)(Can_MessageType* Address_Message,uint8 _ArrMessageData[EIGHT_VALUE],uint8 Copy_uint8FilterIndex)){
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]

	Can_StatusErrorType Loc_enuCanStatusError= CAN_STATUS_OK;;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]

	if( NULL == callback ){
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <Can_enuSetCallbackRxFunctionFifox+0x1c>
		Loc_enuCanStatusError = CAN_STATUS_NULL_POINTER_ADDRESS;
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e004      	b.n	8001d9a <Can_enuSetCallbackRxFunctionFifox+0x26>
		}
		else{
			Can_RxInterruptHandler[Copy_enuFifoIndex] =callback;
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4905      	ldr	r1, [pc, #20]	; (8001da8 <Can_enuSetCallbackRxFunctionFifox+0x34>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	return Loc_enuCanStatusError;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]

}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200000a8 	.word	0x200000a8

08001dac <enuFiltersInit>:



/**************************** Private Software Interface Implementation **************/

static Can_StatusErrorType enuFiltersInit(void){
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
	Can_StatusErrorType Loc_enuCanStatusError =CAN_STATUS_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]

	/* Start Filter Init Mode	 */
	Can_GoToFilterInitMode();
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <enuFiltersInit+0x154>)
 8001db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dbc:	4a50      	ldr	r2, [pc, #320]	; (8001f00 <enuFiltersInit+0x154>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/* Set Number Of Can1 Filters */
	Can_SetNumberOfCan1Filters(NUMBER_OF_CAN1_FILTERS);
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <enuFiltersInit+0x154>)
 8001dc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001dd0:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <enuFiltersInit+0x154>)
 8001dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dd6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	 * 2- scale
	 * 3- reg1 value
	 * 4- reg2 value
	 * 5- Which Fifo Index
	 */
	Filter_concat(FILTER13_CONFG, FILTER12_CONFG, FILTER11_CONFG, FILTER10_CONFG,
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <enuFiltersInit+0x154>)
 8001ddc:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <enuFiltersInit+0x154>)
 8001de6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001dea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <enuFiltersInit+0x154>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <enuFiltersInit+0x154>)
 8001df8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dfc:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <enuFiltersInit+0x154>)
 8001e02:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e06:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <enuFiltersInit+0x154>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <enuFiltersInit+0x154>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <enuFiltersInit+0x154>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <enuFiltersInit+0x154>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <enuFiltersInit+0x154>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <enuFiltersInit+0x154>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <enuFiltersInit+0x154>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8001e42:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <enuFiltersInit+0x154>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <enuFiltersInit+0x154>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <enuFiltersInit+0x154>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <enuFiltersInit+0x154>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <enuFiltersInit+0x154>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <enuFiltersInit+0x154>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <enuFiltersInit+0x154>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <enuFiltersInit+0x154>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <enuFiltersInit+0x154>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <enuFiltersInit+0x154>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <enuFiltersInit+0x154>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <enuFiltersInit+0x154>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <enuFiltersInit+0x154>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <enuFiltersInit+0x154>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <enuFiltersInit+0x154>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <enuFiltersInit+0x154>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <enuFiltersInit+0x154>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <enuFiltersInit+0x154>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <enuFiltersInit+0x154>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <enuFiltersInit+0x154>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			FILTER3_CONFG, FILTER2_CONFG, FILTER1_CONFG, FILTER0_CONFG
						);


	/* Go to Normal Mode */
	Can_GoOutFromFilterInitMode();
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <enuFiltersInit+0x154>)
 8001ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <enuFiltersInit+0x154>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200


	return Loc_enuCanStatusError;
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40006400 	.word	0x40006400

08001f04 <USB_LP_CAN_RX0_IRQHandler>:




void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
	Can_MessageType Loc_ReceivedMessage;
	uint8 Loc_ReceivedDataArr[EIGHT_VALUE];
	uint8 Loc_u8FilterIndex;

	/* Get DLC of Message */
	Loc_ReceivedMessage.can_DLC_FROM_0_TO_8 = Can_GetDLCinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f0c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	723b      	strb	r3, [r7, #8]


	/* Get EXID of Message */
	Loc_ReceivedMessage.can_extended_id_remaining_18_bit = Can_GetExtendedIDinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f1c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001f26:	60fb      	str	r3, [r7, #12]


	/* Get IDE of Message */
	Loc_ReceivedMessage.can_select_ide_mode = Can_GetIDEinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f2a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	743b      	strb	r3, [r7, #16]

	/* Get RTR of Message */
	Loc_ReceivedMessage.can_select_rtr_mode = Can_GetRTRinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f3c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	747b      	strb	r3, [r7, #17]

	/* Get Standard ID of Message */
	Loc_ReceivedMessage.can_standard_id_11_bit = Can_GetStandardIDinRxFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f4e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001f52:	0d5b      	lsrs	r3, r3, #21
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	817b      	strh	r3, [r7, #10]


	/* Get The Data */
	Can_GetDataMessaginFifoMailBox_x(CAN_RX_FIFO_MAIL_BOX_INDEX_0,Loc_ReceivedDataArr);
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f60:	463b      	mov	r3, r7
 8001f62:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001f72:	601a      	str	r2, [r3, #0]

	/* Get Filter Index*/
	Loc_u8FilterIndex = Can_GetFilterIndexFifox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f76:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	75fb      	strb	r3, [r7, #23]

	Can_RxInterruptHandler[CAN_RX_FIFO_MAIL_BOX_INDEX_0](&Loc_ReceivedMessage,Loc_ReceivedDataArr,Loc_u8FilterIndex);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <USB_LP_CAN_RX0_IRQHandler+0xa0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	7dfa      	ldrb	r2, [r7, #23]
 8001f84:	4639      	mov	r1, r7
 8001f86:	f107 0008 	add.w	r0, r7, #8
 8001f8a:	4798      	blx	r3

	/* Relase/Clear The flag The Message */
	Can_RelaseFIFOxMailBox(CAN_RX_FIFO_MAIL_BOX_INDEX_0);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <USB_LP_CAN_RX0_IRQHandler+0x9c>)
 8001f92:	f043 0320 	orr.w	r3, r3, #32
 8001f96:	60d3      	str	r3, [r2, #12]

}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40006400 	.word	0x40006400
 8001fa4:	200000a8 	.word	0x200000a8

08001fa8 <GPIO_PIN_INIT>:
 *     		          pull_UP
 *    		          pull_Down
 *
 * */
GPIO_tenuErrorStatus GPIO_PIN_INIT(GPIO_enuPIN_NO_t Locpin,GPIO_enuPORT_NO_t port,uint8 mode,GPIO_enuSpeed_t speed,GPIO_enuPULL_cfg_t pull)
{
 8001fa8:	b490      	push	{r4, r7}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4604      	mov	r4, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71bb      	strb	r3, [r7, #6]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	717b      	strb	r3, [r7, #5]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	713b      	strb	r3, [r7, #4]
  GPIO_tenuErrorStatus Locerrorstatus=Gpio_enuOk;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  if((0<=Locpin)&&(Locpin<=7))
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d832      	bhi.n	8002036 <GPIO_PIN_INIT+0x8e>
   {
      //set clock speed or config the pin as input
      (portARR[port]->GPIOx_CRL)=((portARR[port]->GPIOx_CRL)&(~(CLEAR_2BITMask<<(Locpin*4))))|(speed<<(Locpin*4));
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	4a52      	ldr	r2, [pc, #328]	; (800211c <GPIO_PIN_INIT+0x174>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	2103      	movs	r1, #3
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	7939      	ldrb	r1, [r7, #4]
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	4949      	ldr	r1, [pc, #292]	; (800211c <GPIO_PIN_INIT+0x174>)
 8001ff8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	601a      	str	r2, [r3, #0]

      //set the mode configuration if input or output don't care
      (portARR[port]->GPIOx_CRL)=((portARR[port]->GPIOx_CRL)&(~(CLEAR_2BITMask<<(Locpin*4+2))))|(mode<<(Locpin*4+2));
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	4a46      	ldr	r2, [pc, #280]	; (800211c <GPIO_PIN_INIT+0x174>)
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	3202      	adds	r2, #2
 8002010:	2103      	movs	r1, #3
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	43d2      	mvns	r2, r2
 8002018:	401a      	ands	r2, r3
 800201a:	7979      	ldrb	r1, [r7, #5]
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	4618      	mov	r0, r3
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	493c      	ldr	r1, [pc, #240]	; (800211c <GPIO_PIN_INIT+0x174>)
 800202c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002030:	4302      	orrs	r2, r0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e040      	b.n	80020b8 <GPIO_PIN_INIT+0x110>
   }
  else if((8<=Locpin)&&(Locpin<=15))
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b07      	cmp	r3, #7
 800203a:	d93b      	bls.n	80020b4 <GPIO_PIN_INIT+0x10c>
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	d838      	bhi.n	80020b4 <GPIO_PIN_INIT+0x10c>
    {
      Locpin-=8;
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	3b08      	subs	r3, #8
 8002046:	71fb      	strb	r3, [r7, #7]
       //set clock speed or config the pin as input
       (portARR[port]->GPIOx_CRH)=((portARR[port]->GPIOx_CRH)&(~(CLEAR_2BITMask<<(Locpin*4))))|(speed<<(Locpin*4));
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <GPIO_PIN_INIT+0x174>)
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	2103      	movs	r1, #3
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	7939      	ldrb	r1, [r7, #4]
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	4618      	mov	r0, r3
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	492b      	ldr	r1, [pc, #172]	; (800211c <GPIO_PIN_INIT+0x174>)
 8002070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002074:	4302      	orrs	r2, r0
 8002076:	605a      	str	r2, [r3, #4]

       //set the mode configuration if input or output don't care
       (portARR[port]->GPIOx_CRH)=((portARR[port]->GPIOx_CRH)&(~(CLEAR_2BITMask<<(Locpin*4+2))))|(mode<<(Locpin*4+2));
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <GPIO_PIN_INIT+0x174>)
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	3202      	adds	r2, #2
 8002088:	2103      	movs	r1, #3
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	43d2      	mvns	r2, r2
 8002090:	401a      	ands	r2, r3
 8002092:	7979      	ldrb	r1, [r7, #5]
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	491e      	ldr	r1, [pc, #120]	; (800211c <GPIO_PIN_INIT+0x174>)
 80020a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020a8:	4302      	orrs	r2, r0
 80020aa:	605a      	str	r2, [r3, #4]
       Locpin+=8;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	3308      	adds	r3, #8
 80020b0:	71fb      	strb	r3, [r7, #7]
 80020b2:	e001      	b.n	80020b8 <GPIO_PIN_INIT+0x110>
    }
  else
    {
      Locerrorstatus=Gpio_enuINVALID_PIN;
 80020b4:	2304      	movs	r3, #4
 80020b6:	73fb      	strb	r3, [r7, #15]

    }
  if(pull==pull_Down)
 80020b8:	7e3b      	ldrb	r3, [r7, #24]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d111      	bne.n	80020e2 <GPIO_PIN_INIT+0x13a>
    {
      CLR_BIT(portARR[port]->GPIOx_ODR,Locpin);
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <GPIO_PIN_INIT+0x174>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	4911      	ldr	r1, [pc, #68]	; (800211c <GPIO_PIN_INIT+0x174>)
 80020d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020dc:	4002      	ands	r2, r0
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e015      	b.n	800210e <GPIO_PIN_INIT+0x166>
    }
  else if(pull==pull_UP)
 80020e2:	7e3b      	ldrb	r3, [r7, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d110      	bne.n	800210a <GPIO_PIN_INIT+0x162>
    {
      SET_BIT(portARR[port]->GPIOx_ODR,Locpin);
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <GPIO_PIN_INIT+0x174>)
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	4907      	ldr	r1, [pc, #28]	; (800211c <GPIO_PIN_INIT+0x174>)
 8002100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002104:	4302      	orrs	r2, r0
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	e001      	b.n	800210e <GPIO_PIN_INIT+0x166>
    }
  else
    {
      Locerrorstatus=Gpio_enuINVALID_Action;
 800210a:	2305      	movs	r3, #5
 800210c:	73fb      	strb	r3, [r7, #15]

    }
  return Locerrorstatus;
 800210e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bc90      	pop	{r4, r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	080081f4 	.word	0x080081f4

08002120 <GPIO_set_PIN_value>:
 * @PARM2	: port no
 * @PARM3	: value
 *
 * */
GPIO_tenuErrorStatus GPIO_set_PIN_value(GPIO_enuPIN_NO_t Locpin,GPIO_enuPORT_NO_t port,GPIO_enuLogic_t action)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
 800212a:	460b      	mov	r3, r1
 800212c:	71bb      	strb	r3, [r7, #6]
 800212e:	4613      	mov	r3, r2
 8002130:	717b      	strb	r3, [r7, #5]
  GPIO_tenuErrorStatus Locerrorstatus=Gpio_enuOk;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  if(action==GPIO_LOGIC_LOW)
 8002136:	797b      	ldrb	r3, [r7, #5]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <GPIO_set_PIN_value+0x40>
    {
      CLR_BIT((portARR[port]->GPIOx_ODR),Locpin);
 800213c:	79bb      	ldrb	r3, [r7, #6]
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <GPIO_set_PIN_value+0x78>)
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	79bb      	ldrb	r3, [r7, #6]
 8002154:	4910      	ldr	r1, [pc, #64]	; (8002198 <GPIO_set_PIN_value+0x78>)
 8002156:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800215a:	4002      	ands	r2, r0
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e015      	b.n	800218c <GPIO_set_PIN_value+0x6c>
    }
  else if(action==GPIO_LOGIC_HIGH)
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d110      	bne.n	8002188 <GPIO_set_PIN_value+0x68>
    {
      SET_BIT((portARR[port]->GPIOx_ODR),Locpin);
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <GPIO_set_PIN_value+0x78>)
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	4618      	mov	r0, r3
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	4906      	ldr	r1, [pc, #24]	; (8002198 <GPIO_set_PIN_value+0x78>)
 800217e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002182:	4302      	orrs	r2, r0
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e001      	b.n	800218c <GPIO_set_PIN_value+0x6c>
    }
  else
    {
      Locerrorstatus=Gpio_enuINVALID_Action;
 8002188:	2305      	movs	r3, #5
 800218a:	73fb      	strb	r3, [r7, #15]

    }
  return Locerrorstatus;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	080081f4 	.word	0x080081f4

0800219c <GPIO_get_PIN_value>:
 * @PARM2	: port no
 * @PARM3	: pointer to receive the pin value
 *
 * */
GPIO_tenuErrorStatus GPIO_get_PIN_value(GPIO_enuPIN_NO_t Locpin,GPIO_enuPORT_NO_t port,uint8* Locpuint8value)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	603a      	str	r2, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
 80021a8:	460b      	mov	r3, r1
 80021aa:	71bb      	strb	r3, [r7, #6]
    GPIO_tenuErrorStatus Locerrorstatus=Gpio_enuOk;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
    uint16 localuint16_temp=0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	81bb      	strh	r3, [r7, #12]
    if(NULL==Locpuint8value)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <GPIO_get_PIN_value+0x24>
    {
        Locerrorstatus=Gpio_enuNULL_PTR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e011      	b.n	80021e4 <GPIO_get_PIN_value+0x48>
    }
    else
    {
	localuint16_temp=portARR[port]->GPIOx_IDR;
 80021c0:	79bb      	ldrb	r3, [r7, #6]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <GPIO_get_PIN_value+0x54>)
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	81bb      	strh	r3, [r7, #12]
        *Locpuint8value=(localuint16_temp&(1<<(Locpin)))>>(Locpin);
 80021cc:	89ba      	ldrh	r2, [r7, #12]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	fa42 f303 	asr.w	r3, r2, r3
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
    }
    return Locerrorstatus;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	080081f4 	.word	0x080081f4

080021f4 <GPIO_Port_Enable_clock>:
 * @Brief   	: enable clock for gpio port
 * @PARM1	: port no
 *
 * */
GPIO_tenuErrorStatus GPIO_Port_Enable_clock(GPIO_enuPORT_NO_t port)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  GPIO_tenuErrorStatus Locerrorstatus=Gpio_enuOk;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  switch(port)
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d807      	bhi.n	8002218 <GPIO_Port_Enable_clock+0x24>
    case GPIO_PORT_E:
    case GPIO_PORT_F:
    case GPIO_PORT_G:
      //+2 used because in RCC_APB2ENR ports bits started from 2
      //@ref: RCC_APB2Periph_TypeDef in RCC.h file
      Rcc_enuControl_APB2_Peripheral(((RCC_APB2Periph_TypeDef)(port+2)),RCC_Periph_ENABLE);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	3302      	adds	r3, #2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f9a9 	bl	8002568 <Rcc_enuControl_APB2_Peripheral>
      break;
 8002216:	e002      	b.n	800221e <GPIO_Port_Enable_clock+0x2a>
    default:
      Locerrorstatus=Gpio_enuINVALID_PORT;
 8002218:	2303      	movs	r3, #3
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	bf00      	nop
  }
  return Locerrorstatus;
 800221e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <Nvic_enuEnableInterrupt>:



/******************************* Software Interfaces Implementation *******************/

Nvic_ErrorStatusType Nvic_enuEnableInterrupt(Nvic_IndexPeripheralType Copy_NvicIndex){
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	Nvic_ErrorStatusType Loc_NvicErrorStatus = NVIC_STATUS_OK;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
	uint8 Loc_uint8RegNumber = Copy_NvicIndex/THIRTYTWO_VALUE;
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	73bb      	strb	r3, [r7, #14]
	uint8 Loc_uint8BitNumber = Copy_NvicIndex%THIRTYTWO_VALUE;
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	737b      	strb	r3, [r7, #13]

	SET_BIT(*GlobalStatic_NvicIsrEnableArr[Loc_uint8RegNumber], Loc_uint8BitNumber);
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <Nvic_enuEnableInterrupt+0x48>)
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	7b7b      	ldrb	r3, [r7, #13]
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	4618      	mov	r0, r3
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	4905      	ldr	r1, [pc, #20]	; (8002270 <Nvic_enuEnableInterrupt+0x48>)
 800225c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002260:	4302      	orrs	r2, r0
 8002262:	601a      	str	r2, [r3, #0]


	return Loc_NvicErrorStatus;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	2000002c 	.word	0x2000002c

08002274 <Rcc_enuSelectSysCLk>:
 *				RCC_STATE_NOTPRESERVE
 *
 * */

Rcc_tenuErrorStatus Rcc_enuSelectSysCLk(uint8 Copy_uint8SysClk , RCC_enuOLD_CLOCK_STATE_t Copy_enuOldSysClk)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
    Rcc_tenuErrorStatus Locerrorstatus=Rcc_enuOk;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
    uint32 loc_counter=Delay_value;// used to get out from checking the flag in the simulation
 8002288:	f242 7310 	movw	r3, #10000	; 0x2710
 800228c:	613b      	str	r3, [r7, #16]
    uint32 old_clock=((RCC->RCC_CFGR)&0x03);// get the old system clock
 800228e:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	60fb      	str	r3, [r7, #12]
    switch (Copy_uint8SysClk)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d055      	beq.n	800234a <Rcc_enuSelectSysCLk+0xd6>
 800229e:	2b02      	cmp	r3, #2
 80022a0:	f300 8081 	bgt.w	80023a6 <Rcc_enuSelectSysCLk+0x132>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <Rcc_enuSelectSysCLk+0x3a>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d026      	beq.n	80022fa <Rcc_enuSelectSysCLk+0x86>
 80022ac:	e07b      	b.n	80023a6 <Rcc_enuSelectSysCLk+0x132>
    {
    case RCC_CLK_HSI:
        SET_BIT(RCC->RCC_CR,REGISTER_BIT_0);
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
        // wait untill clock source be ready
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_1)))
 80022ba:	e005      	b.n	80022c8 <Rcc_enuSelectSysCLk+0x54>
        {
           if(loc_counter==0)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <Rcc_enuSelectSysCLk+0x62>
           {
            break;
           }
           loc_counter--;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_1)))
 80022c8:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f3      	beq.n	80022bc <Rcc_enuSelectSysCLk+0x48>
 80022d4:	e000      	b.n	80022d8 <Rcc_enuSelectSysCLk+0x64>
            break;
 80022d6:	bf00      	nop
        }
        // switch to the desired clock
        RCC->RCC_CFGR&=HSI_SLECT_MASK;
 80022d8:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	6053      	str	r3, [r2, #4]
        STM_SYS_FREQ*= HSI_RC;
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4949      	ldr	r1, [pc, #292]	; (8002410 <Rcc_enuSelectSysCLk+0x19c>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fc1c 	bl	8000b28 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 80022f6:	601a      	str	r2, [r3, #0]
        break;
 80022f8:	e058      	b.n	80023ac <Rcc_enuSelectSysCLk+0x138>
    case RCC_CLK_HSE:
        SET_BIT(RCC->RCC_CR,REGISTER_BIT_16);
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a42      	ldr	r2, [pc, #264]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
         // wait untill clock source be ready
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_17)))
 8002306:	e005      	b.n	8002314 <Rcc_enuSelectSysCLk+0xa0>
        {
           if(loc_counter==0)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <Rcc_enuSelectSysCLk+0xae>
           {
            break;
           }
           loc_counter--;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3b01      	subs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_17)))
 8002314:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f3      	beq.n	8002308 <Rcc_enuSelectSysCLk+0x94>
 8002320:	e000      	b.n	8002324 <Rcc_enuSelectSysCLk+0xb0>
            break;
 8002322:	bf00      	nop
        }
        // switch to the desired clock
        RCC->RCC_CFGR=((RCC->RCC_CFGR)&HSI_SLECT_MASK)|RCC_CLK_HSE;
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 0303 	bic.w	r3, r3, #3
 800232c:	4a36      	ldr	r2, [pc, #216]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6053      	str	r3, [r2, #4]
        STM_SYS_FREQ*= EXTERNAL_FREQ;
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4935      	ldr	r1, [pc, #212]	; (8002410 <Rcc_enuSelectSysCLk+0x19c>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fbf4 	bl	8000b28 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 8002346:	601a      	str	r2, [r3, #0]
        break;
 8002348:	e030      	b.n	80023ac <Rcc_enuSelectSysCLk+0x138>
    case RCC_CLK_PLL:
            SET_BIT(RCC->RCC_CR,REGISTER_BIT_24);
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_25)))
 8002356:	e005      	b.n	8002364 <Rcc_enuSelectSysCLk+0xf0>
        {
           if(loc_counter==0)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <Rcc_enuSelectSysCLk+0xfe>
           {
            break;
           }
           loc_counter--;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3b01      	subs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
        while(!(GET_BIT(RCC->RCC_CR,REGISTER_BIT_25)))
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f3      	beq.n	8002358 <Rcc_enuSelectSysCLk+0xe4>
 8002370:	e000      	b.n	8002374 <Rcc_enuSelectSysCLk+0x100>
            break;
 8002372:	bf00      	nop
        }
        // switch to the desired clock
        RCC->RCC_CFGR=((RCC->RCC_CFGR)&HSI_SLECT_MASK)|RCC_CLK_PLL;
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 0303 	bic.w	r3, r3, #3
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	6053      	str	r3, [r2, #4]
        STM_SYS_FREQ*=PLL_OUTPUT;
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <Rcc_enuSelectSysCLk+0x1a0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fb75 	bl	8000a78 <__aeabi_ui2f>
 800238e:	4602      	mov	r2, r0
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7fe fbc6 	bl	8000b28 <__aeabi_fmul>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <Rcc_enuSelectSysCLk+0x198>)
 80023a2:	601a      	str	r2, [r3, #0]
        break;
 80023a4:	e002      	b.n	80023ac <Rcc_enuSelectSysCLk+0x138>
    default:
        Locerrorstatus=RCC_enuUnLogicActionError;
 80023a6:	2302      	movs	r3, #2
 80023a8:	75fb      	strb	r3, [r7, #23]
        break;
 80023aa:	bf00      	nop
    }
    if(Copy_enuOldSysClk==RCC_STATE_NOTPRESERVE)
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d124      	bne.n	80023fc <Rcc_enuSelectSysCLk+0x188>
    {
      switch(old_clock)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d017      	beq.n	80023e8 <Rcc_enuSelectSysCLk+0x174>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d81b      	bhi.n	80023f6 <Rcc_enuSelectSysCLk+0x182>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <Rcc_enuSelectSysCLk+0x158>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d007      	beq.n	80023da <Rcc_enuSelectSysCLk+0x166>
 80023ca:	e014      	b.n	80023f6 <Rcc_enuSelectSysCLk+0x182>
      {
        case RCC_CLK_HSI:
           CLR_BIT(RCC->RCC_CR,REGISTER_BIT_0);
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6013      	str	r3, [r2, #0]
           break;
 80023d8:	e010      	b.n	80023fc <Rcc_enuSelectSysCLk+0x188>
        case RCC_CLK_HSE:
            CLR_BIT(RCC->RCC_CR,REGISTER_BIT_16);
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
            break;
 80023e6:	e009      	b.n	80023fc <Rcc_enuSelectSysCLk+0x188>
        case RCC_CLK_PLL:
            CLR_BIT(RCC->RCC_CR,REGISTER_BIT_26);
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <Rcc_enuSelectSysCLk+0x194>)
 80023ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023f2:	6013      	str	r3, [r2, #0]
            break;
 80023f4:	e002      	b.n	80023fc <Rcc_enuSelectSysCLk+0x188>
        default:
            Locerrorstatus=RCC_enuUnLogicActionError;
 80023f6:	2302      	movs	r3, #2
 80023f8:	75fb      	strb	r3, [r7, #23]
            break;
 80023fa:	bf00      	nop
     }
    }

    return Locerrorstatus;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	2000004c 	.word	0x2000004c
 8002410:	4af42400 	.word	0x4af42400
 8002414:	200000b0 	.word	0x200000b0

08002418 <Rcc_enuControlCLk>:
 *	    	RCC_CNTROL_PLLON
 *		RCC_CNTROL_PLLOFF
 *
 * */
Rcc_tenuErrorStatus Rcc_enuControlCLk(uint8 Copy_uint8ControlHSI  ,uint8 Copy_uint8ControlHSE ,uint8 Copy_uint8ControlPLL)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	460b      	mov	r3, r1
 8002424:	71bb      	strb	r3, [r7, #6]
 8002426:	4613      	mov	r3, r2
 8002428:	717b      	strb	r3, [r7, #5]
    Rcc_tenuErrorStatus Locerrorstatus=Rcc_enuOk;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
    switch(Copy_uint8ControlHSI)
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d002      	beq.n	800243a <Rcc_enuControlCLk+0x22>
 8002434:	2b04      	cmp	r3, #4
 8002436:	d007      	beq.n	8002448 <Rcc_enuControlCLk+0x30>
 8002438:	e00d      	b.n	8002456 <Rcc_enuControlCLk+0x3e>
    {
        case RCC_CNTROL_HSION:
            SET_BIT(RCC->RCC_CR,REGISTER_BIT_0);
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]
            break;
 8002446:	e009      	b.n	800245c <Rcc_enuControlCLk+0x44>
        case RCC_CNTROL_HSIOFF:
            CLR_BIT(RCC->RCC_CR,REGISTER_BIT_0);
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
            break;
 8002454:	e002      	b.n	800245c <Rcc_enuControlCLk+0x44>
        default:
            Locerrorstatus=RCC_enuUnLogicActionError;
 8002456:	2302      	movs	r3, #2
 8002458:	73fb      	strb	r3, [r7, #15]
            break;
 800245a:	bf00      	nop
    }
    switch(Copy_uint8ControlHSE)
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d002      	beq.n	8002468 <Rcc_enuControlCLk+0x50>
 8002462:	2b06      	cmp	r3, #6
 8002464:	d007      	beq.n	8002476 <Rcc_enuControlCLk+0x5e>
 8002466:	e00d      	b.n	8002484 <Rcc_enuControlCLk+0x6c>
    {
        case RCC_CNTROL_HSEON:
            SET_BIT(RCC->RCC_CR,REGISTER_BIT_16);
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
            break;
 8002474:	e009      	b.n	800248a <Rcc_enuControlCLk+0x72>
        case RCC_CNTROL_HSEOFF:
            CLR_BIT(RCC->RCC_CR,REGISTER_BIT_16);
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
            break;
 8002482:	e002      	b.n	800248a <Rcc_enuControlCLk+0x72>
        default:
            Locerrorstatus=RCC_enuUnLogicActionError;
 8002484:	2302      	movs	r3, #2
 8002486:	73fb      	strb	r3, [r7, #15]
            break;
 8002488:	bf00      	nop
    }
    switch(Copy_uint8ControlPLL)
 800248a:	797b      	ldrb	r3, [r7, #5]
 800248c:	2b07      	cmp	r3, #7
 800248e:	d002      	beq.n	8002496 <Rcc_enuControlCLk+0x7e>
 8002490:	2b08      	cmp	r3, #8
 8002492:	d007      	beq.n	80024a4 <Rcc_enuControlCLk+0x8c>
 8002494:	e00d      	b.n	80024b2 <Rcc_enuControlCLk+0x9a>
    {
        case RCC_CNTROL_PLLON:
            SET_BIT(RCC->RCC_CR,REGISTER_BIT_24);
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 800249c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a0:	6013      	str	r3, [r2, #0]
            break;
 80024a2:	e009      	b.n	80024b8 <Rcc_enuControlCLk+0xa0>
        case RCC_CNTROL_PLLOFF:
            CLR_BIT(RCC->RCC_CR,REGISTER_BIT_24);
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <Rcc_enuControlCLk+0xac>)
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]
            break;
 80024b0:	e002      	b.n	80024b8 <Rcc_enuControlCLk+0xa0>
        default:
            Locerrorstatus=RCC_enuUnLogicActionError;
 80024b2:	2302      	movs	r3, #2
 80024b4:	73fb      	strb	r3, [r7, #15]
            break;
 80024b6:	bf00      	nop
    }
    return Locerrorstatus;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000

080024c8 <Rcc_enuControl_APB1_Peripheral>:

/*
* @Brief   : enable  or disable Peripheral on APB1 bus
*/
Rcc_tenuErrorStatus Rcc_enuControl_APB1_Peripheral(RCC_APB1Periph_TypeDef Peripheral,RCC_Periph_CFG_TypeDef action)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	460a      	mov	r2, r1
 80024d2:	71fb      	strb	r3, [r7, #7]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71bb      	strb	r3, [r7, #6]
    Rcc_tenuErrorStatus Locerrorstatus=Rcc_enuOk;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
    uint32 bitMASK=0;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
        switch (Peripheral)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	2b1d      	cmp	r3, #29
 80024e4:	bf8c      	ite	hi
 80024e6:	2201      	movhi	r2, #1
 80024e8:	2200      	movls	r2, #0
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d12d      	bne.n	800254c <Rcc_enuControl_APB1_Peripheral+0x84>
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <Rcc_enuControl_APB1_Peripheral+0x98>)
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d021      	beq.n	800254c <Rcc_enuControl_APB1_Peripheral+0x84>
		case RCC_APB1_Periph_CAN   :
		case RCC_APB1_Periph_BKP   :
		case RCC_APB1_Periph_PWR   :
		case RCC_APB1_Periph_DAC   :
                // Valid peripheral, proceed with enabling or disabling
                if(action==RCC_Periph_ENABLE)
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10b      	bne.n	8002526 <Rcc_enuControl_APB1_Peripheral+0x5e>
                {
                    bitMASK=1<<Peripheral;
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2201      	movs	r2, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	60bb      	str	r3, [r7, #8]
                    RCC->RCC_APB1ENR|=bitMASK;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <Rcc_enuControl_APB1_Peripheral+0x9c>)
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	4911      	ldr	r1, [pc, #68]	; (8002564 <Rcc_enuControl_APB1_Peripheral+0x9c>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	61cb      	str	r3, [r1, #28]
                else
                {
                    Locerrorstatus=RCC_enuUnLogicActionError;
                }

                break;
 8002524:	e015      	b.n	8002552 <Rcc_enuControl_APB1_Peripheral+0x8a>
                else if(action==RCC_Periph_DISABLE)
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <Rcc_enuControl_APB1_Peripheral+0x7e>
                    bitMASK=1<<Peripheral;
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2201      	movs	r2, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	60bb      	str	r3, [r7, #8]
                    RCC->RCC_APB1ENR&=~bitMASK;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <Rcc_enuControl_APB1_Peripheral+0x9c>)
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	43db      	mvns	r3, r3
 800253e:	4909      	ldr	r1, [pc, #36]	; (8002564 <Rcc_enuControl_APB1_Peripheral+0x9c>)
 8002540:	4013      	ands	r3, r2
 8002542:	61cb      	str	r3, [r1, #28]
                break;
 8002544:	e005      	b.n	8002552 <Rcc_enuControl_APB1_Peripheral+0x8a>
                    Locerrorstatus=RCC_enuUnLogicActionError;
 8002546:	2302      	movs	r3, #2
 8002548:	73fb      	strb	r3, [r7, #15]
                break;
 800254a:	e002      	b.n	8002552 <Rcc_enuControl_APB1_Peripheral+0x8a>
            default:
                // Invalid peripheral
                Locerrorstatus=Rcc_enuWrongAPB1_WRONG_PERIPHERAL;
 800254c:	230a      	movs	r3, #10
 800254e:	73fb      	strb	r3, [r7, #15]
                break;
 8002550:	bf00      	nop
    }
    return Locerrorstatus;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	3afec9ff 	.word	0x3afec9ff
 8002564:	40021000 	.word	0x40021000

08002568 <Rcc_enuControl_APB2_Peripheral>:

/*
* @Brief   : enable or disable Peripheral on APB2 bus
*/
Rcc_tenuErrorStatus Rcc_enuControl_APB2_Peripheral(RCC_APB2Periph_TypeDef Peripheral,RCC_Periph_CFG_TypeDef action)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	460a      	mov	r2, r1
 8002572:	71fb      	strb	r3, [r7, #7]
 8002574:	4613      	mov	r3, r2
 8002576:	71bb      	strb	r3, [r7, #6]
    Rcc_tenuErrorStatus Locerrorstatus=Rcc_enuOk;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
    uint32 bitMASK=0;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
    switch (Peripheral)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b15      	cmp	r3, #21
 8002584:	bf8c      	ite	hi
 8002586:	2201      	movhi	r2, #1
 8002588:	2200      	movls	r2, #0
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	2a00      	cmp	r2, #0
 800258e:	d12d      	bne.n	80025ec <Rcc_enuControl_APB2_Peripheral+0x84>
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <Rcc_enuControl_APB2_Peripheral+0x98>)
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d021      	beq.n	80025ec <Rcc_enuControl_APB2_Peripheral+0x84>
	case RCC_APB2_Periph_ADC3:
	case RCC_APB2_Periph_TIM9:
	case RCC_APB2_Periph_TIM10:
	case RCC_APB2_Periph_TIM11:
                // Valid peripheral, proceed with enabling or disabling
                if(action==RCC_Periph_ENABLE)
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10b      	bne.n	80025c6 <Rcc_enuControl_APB2_Peripheral+0x5e>
                {
                    bitMASK=1<<Peripheral;
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	60bb      	str	r3, [r7, #8]
                    RCC->RCC_APB2ENR|=bitMASK;
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <Rcc_enuControl_APB2_Peripheral+0x9c>)
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	4911      	ldr	r1, [pc, #68]	; (8002604 <Rcc_enuControl_APB2_Peripheral+0x9c>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	618b      	str	r3, [r1, #24]
                else
                {
                    Locerrorstatus=RCC_enuUnLogicActionError;
                }

                break;
 80025c4:	e015      	b.n	80025f2 <Rcc_enuControl_APB2_Peripheral+0x8a>
                else if(action==RCC_Periph_DISABLE)
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <Rcc_enuControl_APB2_Peripheral+0x7e>
                    bitMASK=1<<Peripheral;
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2201      	movs	r2, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	60bb      	str	r3, [r7, #8]
                    RCC->RCC_APB2ENR&=~bitMASK;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <Rcc_enuControl_APB2_Peripheral+0x9c>)
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	43db      	mvns	r3, r3
 80025de:	4909      	ldr	r1, [pc, #36]	; (8002604 <Rcc_enuControl_APB2_Peripheral+0x9c>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	618b      	str	r3, [r1, #24]
                break;
 80025e4:	e005      	b.n	80025f2 <Rcc_enuControl_APB2_Peripheral+0x8a>
                    Locerrorstatus=RCC_enuUnLogicActionError;
 80025e6:	2302      	movs	r3, #2
 80025e8:	73fb      	strb	r3, [r7, #15]
                break;
 80025ea:	e002      	b.n	80025f2 <Rcc_enuControl_APB2_Peripheral+0x8a>
            default:
                // Invalid peripheral
                Locerrorstatus=Rcc_enuWrongAPB2_WRONG_PERIPHERAL;
 80025ec:	230b      	movs	r3, #11
 80025ee:	73fb      	strb	r3, [r7, #15]
                break;
 80025f0:	bf00      	nop
    }
    return Locerrorstatus;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	0038fffd 	.word	0x0038fffd
 8002604:	40021000 	.word	0x40021000

08002608 <MSPI1_voidInit>:
#include "../Inc/MCAL/SPI/SPI_interface.h"

void (*CallBack)(uint8);

void MSPI1_voidInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
	MSPI1->CR1 = 0x0347;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <MSPI1_voidInit+0x14>)
 800260e:	f240 3247 	movw	r2, #839	; 0x347
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	40013000 	.word	0x40013000

08002620 <MSPI1_voidSendReceiveSynch>:

void MSPI1_voidSendReceiveSynch(uint8 Copy_uint8DataToTransmit, uint8 *Copy_DataToReceive)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
	/* Clear For Slave Select Pin */
	GPIO_set_PIN_value(MSPI1_SLAVE_PIN,GPIO_LOGIC_LOW);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fd75 	bl	8002120 <GPIO_set_PIN_value>
	
	/* Send Data */
	MSPI1 -> DR = Copy_uint8DataToTransmit;
 8002636:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <MSPI1_voidSendReceiveSynch+0x48>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	60d3      	str	r3, [r2, #12]
	
	/* Wait Busy Flag to finish */
																																				while (GET_BIT(MSPI1 -> SR, 7) == 1);
 800263c:	bf00      	nop
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <MSPI1_voidSendReceiveSynch+0x48>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	09db      	lsrs	r3, r3, #7
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d0f8      	beq.n	800263e <MSPI1_voidSendReceiveSynch+0x1e>

 	/* Return to the received data */
	*Copy_DataToReceive = MSPI1 -> DR;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <MSPI1_voidSendReceiveSynch+0x48>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	701a      	strb	r2, [r3, #0]
	
	/* Set Salve Select Pin */
	GPIO_set_PIN_value(MSPI1_SLAVE_PIN,GPIO_LOGIC_HIGH);
 8002656:	2201      	movs	r2, #1
 8002658:	2100      	movs	r1, #0
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fd60 	bl	8002120 <GPIO_set_PIN_value>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013000 	.word	0x40013000
 800266c:	00000000 	.word	0x00000000

08002670 <Usart_enuSetBaudrate>:


static volatile USARTx_Type* uartArr[] = {USART1,USART2,USART3};

/********************************** Software Interfaces Declarations *******************/
static Usart_StatusErrorType Usart_enuSetBaudrate(const Usart_ConfigType* Address_Usart){
 8002670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002674:	b08c      	sub	sp, #48	; 0x30
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	float64 Loc_float64Brr ;
	uint64 Loc_uint64Fraction ;
	uint64 Loc_uint64IntPart ;
	uint8 Loc_uint8OverRun;
	if(Address_Usart == NULL){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <Usart_enuSetBaudrate+0x1e>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002686:	2302      	movs	r3, #2
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800268c:	e13b      	b.n	8002906 <Usart_enuSetBaudrate+0x296>
	}
	else if(Address_Usart->select_sync_mode == USART_SELECT_ASYNCHRONOUS_MODE){
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	789b      	ldrb	r3, [r3, #2]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 8134 	bne.w	8002900 <Usart_enuSetBaudrate+0x290>
		Loc_uint8OverRun = Address_Usart->select_oversample & 0b10;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	795b      	ldrb	r3, [r3, #5]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]

		switch(Address_Usart->select_channel_number){
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <Usart_enuSetBaudrate+0x4a>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f2c0 8124 	blt.w	80028f8 <Usart_enuSetBaudrate+0x288>
 80026b0:	3b01      	subs	r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	f200 8120 	bhi.w	80028f8 <Usart_enuSetBaudrate+0x288>
 80026b8:	e08f      	b.n	80027da <Usart_enuSetBaudrate+0x16a>

		case USART_SELECT_CHANNEL_1:

//			Loc_float64Brr = (float64)Global_uint64ABP2Freq/(Address_Usart->baude_rate)/(8*(2-Loc_uint8OverRun));
			Loc_float64Brr = (float64)8000000/(Address_Usart->baude_rate)/(8*(2-Loc_uint8OverRun));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fd feda 	bl	800047c <__aeabi_ul2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	a192      	add	r1, pc, #584	; (adr r1, 8002918 <Usart_enuSetBaudrate+0x2a8>)
 80026ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026d2:	f7fe f833 	bl	800073c <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	461d      	mov	r5, r3
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	f1c3 0302 	rsb	r3, r3, #2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe94 	bl	8000414 <__aeabi_i2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fe f822 	bl	800073c <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	e9c7 2302 	strd	r2, r3, [r7, #8]

			Loc_uint64IntPart = (uint64)Loc_float64Brr;
 8002700:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002704:	f7fe fb60 	bl	8000dc8 <__aeabi_d2ulz>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_uint64Fraction =(Loc_float64Brr-Loc_uint64IntPart)*16+0.5;
 8002710:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002714:	f7fd feb2 	bl	800047c <__aeabi_ul2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002720:	f7fd fd2a 	bl	8000178 <__aeabi_dsub>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <Usart_enuSetBaudrate+0x2b0>)
 8002732:	f7fd fed9 	bl	80004e8 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <Usart_enuSetBaudrate+0x2b4>)
 8002744:	f7fd fd1a 	bl	800017c <__adddf3>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f7fe fb3a 	bl	8000dc8 <__aeabi_d2ulz>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_uint64Fraction ==16){
 800275c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002760:	f1a2 0110 	sub.w	r1, r2, #16
 8002764:	430b      	orrs	r3, r1
 8002766:	d10d      	bne.n	8002784 <Usart_enuSetBaudrate+0x114>
				Loc_uint64Fraction = 0;
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_uint64IntPart++;
 8002774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002778:	f112 0801 	adds.w	r8, r2, #1
 800277c:	f143 0900 	adc.w	r9, r3, #0
 8002780:	e9c7 8906 	strd	r8, r9, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_uint64IntPart);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b291      	uxth	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	4610      	mov	r0, r2
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80027a8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_uint64Fraction);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 010f 	bic.w	r1, r3, #15
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	4b56      	ldr	r3, [pc, #344]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80027d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]

			break;
 80027d8:	e095      	b.n	8002906 <Usart_enuSetBaudrate+0x296>

		case USART_SELECT_CHANNEL_2:
		case USART_SELECT_CHANNEL_3:


			Loc_float64Brr = (float64)8000000/(Address_Usart->baude_rate)/(8*(2-Loc_uint8OverRun));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fd fe4a 	bl	800047c <__aeabi_ul2d>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	a14a      	add	r1, pc, #296	; (adr r1, 8002918 <Usart_enuSetBaudrate+0x2a8>)
 80027ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027f2:	f7fd ffa3 	bl	800073c <__aeabi_ddiv>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	f1c3 0302 	rsb	r3, r3, #2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe04 	bl	8000414 <__aeabi_i2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4640      	mov	r0, r8
 8002812:	4649      	mov	r1, r9
 8002814:	f7fd ff92 	bl	800073c <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	e9c7 2302 	strd	r2, r3, [r7, #8]
			Loc_uint64IntPart = (uint64)Loc_float64Brr;
 8002820:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002824:	f7fe fad0 	bl	8000dc8 <__aeabi_d2ulz>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			Loc_uint64Fraction =(Loc_float64Brr-Loc_uint64IntPart)*16+0.5;
 8002830:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002834:	f7fd fe22 	bl	800047c <__aeabi_ul2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002840:	f7fd fc9a 	bl	8000178 <__aeabi_dsub>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b33      	ldr	r3, [pc, #204]	; (8002920 <Usart_enuSetBaudrate+0x2b0>)
 8002852:	f7fd fe49 	bl	80004e8 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <Usart_enuSetBaudrate+0x2b4>)
 8002864:	f7fd fc8a 	bl	800017c <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe faaa 	bl	8000dc8 <__aeabi_d2ulz>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if(Loc_uint64Fraction ==16){
 800287c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002880:	f1a2 0110 	sub.w	r1, r2, #16
 8002884:	430b      	orrs	r3, r1
 8002886:	d10c      	bne.n	80028a2 <Usart_enuSetBaudrate+0x232>
				Loc_uint64Fraction = 0;
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9c7 2308 	strd	r2, r3, [r7, #32]
				Loc_uint64IntPart++;
 8002894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002898:	1c54      	adds	r4, r2, #1
 800289a:	f143 0500 	adc.w	r5, r3, #0
 800289e:	e9c7 4506 	strd	r4, r5, [r7, #24]
			}
			Usart_SetBaudrateIntPart(Address_Usart->select_channel_number,Loc_uint64IntPart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80028aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b291      	uxth	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	7812      	ldrb	r2, [r2, #0]
 80028c2:	4610      	mov	r0, r2
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80028c6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6093      	str	r3, [r2, #8]
			Usart_SetBaudrateFractionPart(Address_Usart->select_channel_number,Loc_uint64IntPart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 010f 	bic.w	r1, r3, #15
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 020f 	and.w	r2, r3, #15
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <Usart_enuSetBaudrate+0x2b8>)
 80028ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]

			break;
 80028f6:	e006      	b.n	8002906 <Usart_enuSetBaudrate+0x296>


		default :
			Loc_UsartStatusError = USART_STATUS_FAIL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80028fe:	e002      	b.n	8002906 <Usart_enuSetBaudrate+0x296>

		}
	}
	else{
		/* Sync Mode */
		Loc_UsartStatusError = USART_STATUS_FAIL;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return Loc_UsartStatusError;
 8002906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	.word	0x00000000
 800291c:	415e8480 	.word	0x415e8480
 8002920:	40300000 	.word	0x40300000
 8002924:	3fe00000 	.word	0x3fe00000
 8002928:	20000050 	.word	0x20000050

0800292c <Usart_enuEnableRccClock>:


static Usart_StatusErrorType Usart_enuEnableRccClock(const Usart_ConfigType* Address_Usart){
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]

		if(Address_Usart == NULL){
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <Usart_enuEnableRccClock+0x18>
			Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 800293e:	2302      	movs	r3, #2
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e01b      	b.n	800297c <Usart_enuEnableRccClock+0x50>
		}
		else {
			switch(Address_Usart->select_channel_number){
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d010      	beq.n	800296e <Usart_enuEnableRccClock+0x42>
 800294c:	2b02      	cmp	r3, #2
 800294e:	dc13      	bgt.n	8002978 <Usart_enuEnableRccClock+0x4c>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <Usart_enuEnableRccClock+0x2e>
 8002954:	2b01      	cmp	r3, #1
 8002956:	d005      	beq.n	8002964 <Usart_enuEnableRccClock+0x38>
 8002958:	e00e      	b.n	8002978 <Usart_enuEnableRccClock+0x4c>
			case USART_SELECT_CHANNEL_1:
				Rcc_enuControl_APB2_Peripheral(RCC_APB2_Periph_USART1,RCC_Periph_ENABLE);
 800295a:	2101      	movs	r1, #1
 800295c:	200e      	movs	r0, #14
 800295e:	f7ff fe03 	bl	8002568 <Rcc_enuControl_APB2_Peripheral>
				break;
 8002962:	e00b      	b.n	800297c <Usart_enuEnableRccClock+0x50>


			case USART_SELECT_CHANNEL_2:
				Rcc_enuControl_APB1_Peripheral(RCC_APB1_Periph_USART2,RCC_Periph_ENABLE);
 8002964:	2101      	movs	r1, #1
 8002966:	2011      	movs	r0, #17
 8002968:	f7ff fdae 	bl	80024c8 <Rcc_enuControl_APB1_Peripheral>
				break;
 800296c:	e006      	b.n	800297c <Usart_enuEnableRccClock+0x50>

			case USART_SELECT_CHANNEL_3:
				Rcc_enuControl_APB1_Peripheral(RCC_APB1_Periph_USART3,RCC_Periph_ENABLE);
 800296e:	2101      	movs	r1, #1
 8002970:	2012      	movs	r0, #18
 8002972:	f7ff fda9 	bl	80024c8 <Rcc_enuControl_APB1_Peripheral>
				break;
 8002976:	e001      	b.n	800297c <Usart_enuEnableRccClock+0x50>


			default :
					Loc_UsartStatusError = USART_STATUS_FAIL;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]

			}
		}

		return Loc_UsartStatusError;
 800297c:	7bfb      	ldrb	r3, [r7, #15]

}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <Usart_enuInit>:



/******************************* Software Interfaces Implementation *******************/

Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <Usart_enuInit+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 800299a:	2302      	movs	r3, #2
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	e10a      	b.n	8002bb6 <Usart_enuInit+0x22e>
	}
	else{
			/* Enable Usartx Rcc Clock */
			Loc_UsartStatusError = Usart_enuEnableRccClock(Address_Usart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffc3 	bl	800292c <Usart_enuEnableRccClock>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]

			/* Set Baudrate */
			Loc_UsartStatusError = Usart_enuSetBaudrate(Address_Usart);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fe60 	bl	8002670 <Usart_enuSetBaudrate>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]

			/* Set Data Size */
			Usart_SetDataSize((Address_Usart->select_channel_number),(Address_Usart->select_character_size));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <Usart_enuInit+0x238>)
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	031b      	lsls	r3, r3, #12
 80029cc:	4619      	mov	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <Usart_enuInit+0x238>)
 80029d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029da:	430a      	orrs	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]

			/* Set Clock Phase if Sync */
			Usart_SetClockPhase((Address_Usart->select_channel_number),(Address_Usart->select_clock_phase));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <Usart_enuInit+0x238>)
 80029e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	79db      	ldrb	r3, [r3, #7]
 80029f4:	025b      	lsls	r3, r3, #9
 80029f6:	4619      	mov	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	611a      	str	r2, [r3, #16]

			/* Set Clock Polarity if Sync */
			Usart_SetClockPolarity((Address_Usart->select_channel_number),(Address_Usart->select_clock_polarity));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	799b      	ldrb	r3, [r3, #6]
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	4619      	mov	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	611a      	str	r2, [r3, #16]

			/* enable or disable DMA */
			Usart_SetDmaMode((Address_Usart->select_channel_number),(Address_Usart->select_dma_tx_enable_rx_enable));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7a1b      	ldrb	r3, [r3, #8]
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	615a      	str	r2, [r3, #20]

			/* enable or disable FULL-Duplex */
			Usart_SetDuplexMode((Address_Usart->select_channel_number),(Address_Usart->select_full_duplex_half_duplex));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f023 0208 	bic.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7a5b      	ldrb	r3, [r3, #9]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4619      	mov	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	615a      	str	r2, [r3, #20]

			/* Select OverSample mode  */
			Usart_SelectOversampleMode((Address_Usart->select_channel_number),(Address_Usart->select_oversample));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <Usart_enuInit+0x238>)
 8002a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	795b      	ldrb	r3, [r3, #5]
 8002a9c:	02db      	lsls	r3, r3, #11
 8002a9e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <Usart_enuInit+0x238>)
 8002aaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <Usart_enuInit+0x238>)
 8002aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	03db      	lsls	r3, r3, #15
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <Usart_enuInit+0x238>)
 8002ad8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]


			/* Select Parity bit mode  */
			Usart_SelectParityBitMode((Address_Usart->select_channel_number),(Address_Usart->select_parity_bits));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <Usart_enuInit+0x238>)
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 61c0 	bic.w	r1, r3, #1536	; 0x600
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	025b      	lsls	r3, r3, #9
 8002af8:	f403 62c0 	and.w	r2, r3, #1536	; 0x600
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]


			/* Select Stop bits  */
			Usart_SelectStopBits((Address_Usart->select_channel_number),(Address_Usart->select_stop_bits));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b2a:	611a      	str	r2, [r3, #16]

			/* Enable Clk if Sync  */
			Usart_SetClkInSyncMode((Address_Usart->select_channel_number),(Address_Usart->select_sync_mode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	789b      	ldrb	r3, [r3, #2]
 8002b42:	02db      	lsls	r3, r3, #11
 8002b44:	4619      	mov	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]


			/* Enable Tx, Rx , UART */
			Usart_Enable(Address_Usart->select_channel_number);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b74:	60da      	str	r2, [r3, #12]
			Usart_EnableTx(Address_Usart->select_channel_number);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b90:	f042 0208 	orr.w	r2, r2, #8
 8002b94:	60da      	str	r2, [r3, #12]
			Usart_EnableRx(Address_Usart->select_channel_number);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <Usart_enuInit+0x238>)
 8002b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <Usart_enuInit+0x238>)
 8002bac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bb0:	f042 0204 	orr.w	r2, r2, #4
 8002bb4:	60da      	str	r2, [r3, #12]


	}
	return Loc_UsartStatusError;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]

}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000050 	.word	0x20000050

08002bc4 <Usart_enuTransmitCharBlocking>:
}




Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, uint16 Copy_uint16Data){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
	if(Address_Usart == NULL){
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <Usart_enuTransmitCharBlocking+0x1c>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e014      	b.n	8002c0a <Usart_enuTransmitCharBlocking+0x46>
	}
	else{

		while( ( Usart_IsTransmitDataRegisterEmpty( Address_Usart->select_channel_number)  == ZERO_VALUE) );
 8002be0:	bf00      	nop
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <Usart_enuTransmitCharBlocking+0x54>)
 8002bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d1f3      	bne.n	8002be2 <Usart_enuTransmitCharBlocking+0x1e>
		Usart_SetDataReg((Address_Usart->select_channel_number) , Copy_uint16Data);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <Usart_enuTransmitCharBlocking+0x54>)
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	605a      	str	r2, [r3, #4]
	}
	return Loc_UsartStatusError;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000050 	.word	0x20000050

08002c1c <Usart_enuTransmitStringBlocking>:
Usart_StatusErrorType Usart_enuTransmitStringBlocking(const Usart_ConfigType* Address_Usart, uint8* Address_Data){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
	uint8 Loc_uint8Counter = ZERO_VALUE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73bb      	strb	r3, [r7, #14]
	if(Address_Usart == NULL || Address_Data == NULL){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <Usart_enuTransmitStringBlocking+0x1e>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d110      	bne.n	8002c5c <Usart_enuTransmitStringBlocking+0x40>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e01e      	b.n	8002c7e <Usart_enuTransmitStringBlocking+0x62>
	}
	else{
		while(Address_Data[Loc_uint8Counter] ){
		Loc_UsartStatusError = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_uint8Counter++]);
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	73ba      	strb	r2, [r7, #14]
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffb6 	bl	8002bc4 <Usart_enuTransmitCharBlocking>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
		while(Address_Data[Loc_uint8Counter] ){
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1eb      	bne.n	8002c40 <Usart_enuTransmitStringBlocking+0x24>
		}

		Loc_UsartStatusError = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_uint8Counter]);
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ffa5 	bl	8002bc4 <Usart_enuTransmitCharBlocking>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]
	}
	return Loc_UsartStatusError;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <Usart_enuEnableRxInterrupt>:
/////////////////////////////// Interrupt Part ////////////////////////////////////////////

/*
 * Look At Page 1006
 */
Usart_StatusErrorType Usart_enuEnableRxInterrupt(const Usart_ConfigType* Address_Usart){
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL ){
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <Usart_enuEnableRxInterrupt+0x18>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	73fb      	strb	r3, [r7, #15]
 8002c9e:	e00f      	b.n	8002cc0 <Usart_enuEnableRxInterrupt+0x38>
	}
	else{


		Usart_EnableRxCompleteInterrupt(( Address_Usart->select_channel_number));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <Usart_enuEnableRxInterrupt+0x44>)
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <Usart_enuEnableRxInterrupt+0x44>)
 8002cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	60da      	str	r2, [r3, #12]
	}
	return Loc_UsartStatusError;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000050 	.word	0x20000050

08002cd0 <Usart_enuSetCallbackRxFunction>:

	}
	return Loc_UsartStatusError;
}

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(const Usart_ConfigType* Address_Usart,void (*callback)(uint16 Copy_uint16Result)){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	Usart_StatusErrorType Loc_UsartStatusError = USART_STATUS_OK;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]

	if(Address_Usart == NULL || NULL == callback ){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <Usart_enuSetCallbackRxFunction+0x1a>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <Usart_enuSetCallbackRxFunction+0x20>
		Loc_UsartStatusError = USART_STATUS_NULL_POINTER_ADDRESS;
 8002cea:	2302      	movs	r3, #2
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e006      	b.n	8002cfe <Usart_enuSetCallbackRxFunction+0x2e>
	}
	else{
		Usart_RxInterruptHandler[( Address_Usart->select_channel_number)] =callback;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <Usart_enuSetCallbackRxFunction+0x3c>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
	return Loc_UsartStatusError;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	200000b4 	.word	0x200000b4

08002d10 <USART1_IRQHandler>:



/**************************** Private Software Interface Implementation **************/

void USART1_IRQHandler(void){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0

	uint16 Loc_uint16Result;

	if(Usart_GetRxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsRxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d118      	bne.n	8002d58 <USART1_IRQHandler+0x48>
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d110      	bne.n	8002d58 <USART1_IRQHandler+0x48>

		Loc_uint16Result = Usart_GetDataReg(USART_SELECT_CHANNEL_1);
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	80fb      	strh	r3, [r7, #6]
		Usart_RxInterruptHandler[USART_SELECT_CHANNEL_1](Loc_uint16Result);
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <USART1_IRQHandler+0x8c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	4610      	mov	r0, r2
 8002d46:	4798      	blx	r3

		Usart_ClearRxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0220 	bic.w	r2, r2, #32
 8002d56:	601a      	str	r2, [r3, #0]
	}

	if(Usart_GetTxCompleteFlag(USART_SELECT_CHANNEL_1) == ONE_VALUE && Usart_IsTxCompleteInterruptEnabled(USART_SELECT_CHANNEL_1) == ONE_VALUE ){
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d112      	bne.n	8002d8e <USART1_IRQHandler+0x7e>
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10a      	bne.n	8002d8e <USART1_IRQHandler+0x7e>

		Usart_TxCompleteInterruptHandler[USART_SELECT_CHANNEL_1]();
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <USART1_IRQHandler+0x90>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4798      	blx	r3
		Usart_ClearTxCompleteFlag(USART_SELECT_CHANNEL_1);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <USART1_IRQHandler+0x88>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8c:	601a      	str	r2, [r3, #0]
	}

}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000050 	.word	0x20000050
 8002d9c:	200000b4 	.word	0x200000b4
 8002da0:	200000c0 	.word	0x200000c0

08002da4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002db0:	f000 fd02 	bl	80037b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <pvPortMalloc+0x144>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002dbc:	f000 f8e0 	bl	8002f80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002dc0:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <pvPortMalloc+0x148>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 8086 	bne.w	8002eda <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01e      	beq.n	8002e12 <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d218      	bcs.n	8002e12 <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8002de0:	2208      	movs	r2, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d011      	beq.n	8002e16 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f023 0307 	bic.w	r3, r3, #7
 8002df8:	3308      	adds	r3, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d205      	bcs.n	8002e0c <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	3308      	adds	r3, #8
 8002e08:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e0a:	e004      	b.n	8002e16 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e10:	e001      	b.n	8002e16 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05e      	beq.n	8002eda <pvPortMalloc+0x136>
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <pvPortMalloc+0x14c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d859      	bhi.n	8002eda <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <pvPortMalloc+0x150>)
 8002e28:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8002e2a:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <pvPortMalloc+0x150>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e30:	e004      	b.n	8002e3c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d903      	bls.n	8002e4e <pvPortMalloc+0xaa>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f1      	bne.n	8002e32 <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <pvPortMalloc+0x144>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d040      	beq.n	8002eda <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	2308      	movs	r3, #8
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90f      	bls.n	8002e9a <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e94:	68b8      	ldr	r0, [r7, #8]
 8002e96:	f000 f8d5 	bl	8003044 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <pvPortMalloc+0x14c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <pvPortMalloc+0x14c>)
 8002ea6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <pvPortMalloc+0x14c>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <pvPortMalloc+0x154>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d203      	bcs.n	8002ebc <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <pvPortMalloc+0x14c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <pvPortMalloc+0x154>)
 8002eba:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <pvPortMalloc+0x148>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <pvPortMalloc+0x158>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <pvPortMalloc+0x158>)
 8002ed8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002eda:	f000 fc7b 	bl	80037d4 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200020d4 	.word	0x200020d4
 8002eec:	200020e8 	.word	0x200020e8
 8002ef0:	200020d8 	.word	0x200020d8
 8002ef4:	200020cc 	.word	0x200020cc
 8002ef8:	200020dc 	.word	0x200020dc
 8002efc:	200020e0 	.word	0x200020e0

08002f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02c      	beq.n	8002f6c <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002f12:	2308      	movs	r3, #8
 8002f14:	425b      	negs	r3, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <vPortFree+0x74>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01e      	beq.n	8002f6c <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d11a      	bne.n	8002f6c <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <vPortFree+0x74>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	401a      	ands	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002f46:	f000 fc37 	bl	80037b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <vPortFree+0x78>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <vPortFree+0x78>)
 8002f56:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	f000 f873 	bl	8003044 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <vPortFree+0x7c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <vPortFree+0x7c>)
 8002f66:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f68:	f000 fc34 	bl	80037d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200020e8 	.word	0x200020e8
 8002f78:	200020d8 	.word	0x200020d8
 8002f7c:	200020e4 	.word	0x200020e4

08002f80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <prvHeapInit+0xac>)
 8002f8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3307      	adds	r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0307 	bic.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <prvHeapInit+0xac>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <prvHeapInit+0xb0>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <prvHeapInit+0xb0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002fcc:	2208      	movs	r2, #8
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0307 	bic.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a15      	ldr	r2, [pc, #84]	; (8003034 <prvHeapInit+0xb4>)
 8002fe0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <prvHeapInit+0xb4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <prvHeapInit+0xb4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	1ad2      	subs	r2, r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <prvHeapInit+0xb4>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <prvHeapInit+0xb8>)
 800300e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a09      	ldr	r2, [pc, #36]	; (800303c <prvHeapInit+0xbc>)
 8003016:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <prvHeapInit+0xc0>)
 800301a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	200000cc 	.word	0x200000cc
 8003030:	200020cc 	.word	0x200020cc
 8003034:	200020d4 	.word	0x200020d4
 8003038:	200020dc 	.word	0x200020dc
 800303c:	200020d8 	.word	0x200020d8
 8003040:	200020e8 	.word	0x200020e8

08003044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <prvInsertBlockIntoFreeList+0xa8>)
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e002      	b.n	8003058 <prvInsertBlockIntoFreeList+0x14>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d8f7      	bhi.n	8003052 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d108      	bne.n	8003086 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	441a      	add	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d118      	bne.n	80030cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <prvInsertBlockIntoFreeList+0xac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d00d      	beq.n	80030c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e008      	b.n	80030d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <prvInsertBlockIntoFreeList+0xac>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e003      	b.n	80030d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d002      	beq.n	80030e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	200020cc 	.word	0x200020cc
 80030f0:	200020d4 	.word	0x200020d4

080030f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f103 0208 	add.w	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f103 0208 	add.w	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f103 0208 	add.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d103      	bne.n	800316a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e00c      	b.n	8003184 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3308      	adds	r3, #8
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e002      	b.n	8003178 <vListInsert+0x2e>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d2f6      	bcs.n	8003172 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6892      	ldr	r2, [r2, #8]
 80031d0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6852      	ldr	r2, [r2, #4]
 80031da:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d103      	bne.n	80031ee <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b04      	subs	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3b04      	subs	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b04      	subs	r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <pxPortInitialiseStack+0x54>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b14      	subs	r3, #20
 8003246:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3b20      	subs	r3, #32
 8003252:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003254:	68fb      	ldr	r3, [r7, #12]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	08003265 	.word	0x08003265

08003264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800326a:	2300      	movs	r3, #0
 800326c:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800326e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003280:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003282:	bf00      	nop
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0fc      	beq.n	8003284 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

080032a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <pxCurrentTCBConst2>)
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	6808      	ldr	r0, [r1, #0]
 80032a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032aa:	f380 8809 	msr	PSP, r0
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f380 8811 	msr	BASEPRI, r0
 80032ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80032be:	4770      	bx	lr

080032c0 <pxCurrentTCBConst2>:
 80032c0:	200020ec 	.word	0x200020ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop

080032c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80032c8:	4806      	ldr	r0, [pc, #24]	; (80032e4 <prvPortStartFirstTask+0x1c>)
 80032ca:	6800      	ldr	r0, [r0, #0]
 80032cc:	6800      	ldr	r0, [r0, #0]
 80032ce:	f380 8808 	msr	MSP, r0
 80032d2:	b662      	cpsie	i
 80032d4:	b661      	cpsie	f
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	df00      	svc	0
 80032e0:	bf00      	nop
 80032e2:	0000      	.short	0x0000
 80032e4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop

080032ec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <xPortStartScheduler+0x38>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <xPortStartScheduler+0x38>)
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <xPortStartScheduler+0x38>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <xPortStartScheduler+0x38>)
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003308:	f000 f890 	bl	800342c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <xPortStartScheduler+0x3c>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003312:	f7ff ffd9 	bl	80032c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003316:	f000 fc4f 	bl	8003bb8 <vTaskSwitchContext>
    prvTaskExitError();
 800331a:	f7ff ffa3 	bl	8003264 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	e000ed20 	.word	0xe000ed20
 8003328:	20000078 	.word	0x20000078

0800332c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
        __asm volatile
 8003332:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
    }
 8003344:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <vPortEnterCritical+0x30>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a03      	ldr	r2, [pc, #12]	; (800335c <vPortEnterCritical+0x30>)
 800334e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000078 	.word	0x20000078

08003360 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <vPortExitCritical+0x30>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3b01      	subs	r3, #1
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <vPortExitCritical+0x30>)
 800336e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <vPortExitCritical+0x30>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <vPortExitCritical+0x24>
 8003378:	2300      	movs	r3, #0
 800337a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003382:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000078 	.word	0x20000078
	...

080033a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80033a0:	f3ef 8009 	mrs	r0, PSP
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <pxCurrentTCBConst>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033b0:	6010      	str	r0, [r2, #0]
 80033b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033b6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80033ba:	f380 8811 	msr	BASEPRI, r0
 80033be:	f000 fbfb 	bl	8003bb8 <vTaskSwitchContext>
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	6808      	ldr	r0, [r1, #0]
 80033d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033d6:	f380 8809 	msr	PSP, r0
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	4770      	bx	lr

080033e0 <pxCurrentTCBConst>:
 80033e0:	200020ec 	.word	0x200020ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop

080033e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
        __asm volatile
 80033ee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	607b      	str	r3, [r7, #4]
    }
 8003400:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003402:	f000 fad3 	bl	80039ac <xTaskIncrementTick>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SysTick_Handler+0x40>)
 800340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f383 8811 	msr	BASEPRI, r3
    }
 800341e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <vPortSetupTimerInterrupt+0x28>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <vPortSetupTimerInterrupt+0x2c>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800343c:	4b07      	ldr	r3, [pc, #28]	; (800345c <vPortSetupTimerInterrupt+0x30>)
 800343e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003442:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <vPortSetupTimerInterrupt+0x28>)
 8003446:	2207      	movs	r2, #7
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010
 8003458:	e000e018 	.word	0xe000e018
 800345c:	e000e014 	.word	0xe000e014

08003460 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af04      	add	r7, sp, #16
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fc95 	bl	8002da4 <pvPortMalloc>
 800347a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003482:	204c      	movs	r0, #76	; 0x4c
 8003484:	f7ff fc8e 	bl	8002da4 <pvPortMalloc>
 8003488:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
 8003496:	e005      	b.n	80034a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003498:	6978      	ldr	r0, [r7, #20]
 800349a:	f7ff fd31 	bl	8002f00 <vPortFree>
 800349e:	e001      	b.n	80034a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d013      	beq.n	80034d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9303      	str	r3, [sp, #12]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f80e 	bl	80034e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034c6:	69f8      	ldr	r0, [r7, #28]
 80034c8:	f000 f884 	bl	80035d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034cc:	2301      	movs	r3, #1
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e002      	b.n	80034d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034d8:	69bb      	ldr	r3, [r7, #24]
    }
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034fa:	3b01      	subs	r3, #1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f023 0307 	bic.w	r3, r3, #7
 8003508:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01f      	beq.n	8003550 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e012      	b.n	800353c <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	4413      	add	r3, r2
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4413      	add	r3, r2
 8003524:	3334      	adds	r3, #52	; 0x34
 8003526:	460a      	mov	r2, r1
 8003528:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d9e9      	bls.n	8003516 <prvInitialiseNewTask+0x34>
 8003542:	e000      	b.n	8003546 <prvInitialiseNewTask+0x64>
            {
                break;
 8003544:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354e:	e003      	b.n	8003558 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	2b04      	cmp	r3, #4
 800355c:	d901      	bls.n	8003562 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800355e:	2304      	movs	r3, #4
 8003560:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	3304      	adds	r3, #4
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fde0 	bl	8003132 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	3318      	adds	r3, #24
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fddb 	bl	8003132 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003580:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f1c3 0205 	rsb	r2, r3, #5
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	3344      	adds	r3, #68	; 0x44
 8003596:	2204      	movs	r2, #4
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fe1f 	bl	80051de <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	2201      	movs	r2, #1
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fe18 	bl	80051de <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	6938      	ldr	r0, [r7, #16]
 80035b4:	f7ff fe2a 	bl	800320c <pxPortInitialiseStack>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80035dc:	f7ff fea6 	bl	800332c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <prvAddNewTaskToReadyList+0x108>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <prvAddNewTaskToReadyList+0x108>)
 80035e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <prvAddNewTaskToReadyList+0x10c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <prvAddNewTaskToReadyList+0x10c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035f8:	4b38      	ldr	r3, [pc, #224]	; (80036dc <prvAddNewTaskToReadyList+0x108>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d110      	bne.n	8003622 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003600:	f000 fb38 	bl	8003c74 <prvInitialiseTaskLists>
 8003604:	e00d      	b.n	8003622 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <prvAddNewTaskToReadyList+0x110>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <prvAddNewTaskToReadyList+0x10c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d802      	bhi.n	8003622 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800361c:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <prvAddNewTaskToReadyList+0x10c>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <prvAddNewTaskToReadyList+0x114>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a2f      	ldr	r2, [pc, #188]	; (80036e8 <prvAddNewTaskToReadyList+0x114>)
 800362a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <prvAddNewTaskToReadyList+0x118>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <prvAddNewTaskToReadyList+0x118>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	492b      	ldr	r1, [pc, #172]	; (80036f0 <prvAddNewTaskToReadyList+0x11c>)
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3304      	adds	r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	3204      	adds	r2, #4
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4a1b      	ldr	r2, [pc, #108]	; (80036f0 <prvAddNewTaskToReadyList+0x11c>)
 8003682:	441a      	add	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	615a      	str	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	4918      	ldr	r1, [pc, #96]	; (80036f0 <prvAddNewTaskToReadyList+0x11c>)
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1c59      	adds	r1, r3, #1
 800369c:	4814      	ldr	r0, [pc, #80]	; (80036f0 <prvAddNewTaskToReadyList+0x11c>)
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4403      	add	r3, r0
 80036a8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80036aa:	f7ff fe59 	bl	8003360 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <prvAddNewTaskToReadyList+0x110>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <prvAddNewTaskToReadyList+0x10c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d207      	bcs.n	80036d4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <prvAddNewTaskToReadyList+0x120>)
 80036c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200021c4 	.word	0x200021c4
 80036e0:	200020ec 	.word	0x200020ec
 80036e4:	200021d0 	.word	0x200021d0
 80036e8:	200021e0 	.word	0x200021e0
 80036ec:	200021cc 	.word	0x200021cc
 80036f0:	200020f0 	.word	0x200020f0
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800370a:	f000 f855 	bl	80037b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800370e:	2100      	movs	r1, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb47 	bl	8003da4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003716:	f000 f85d 	bl	80037d4 <xTaskResumeAll>
 800371a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <vTaskDelay+0x44>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <vTaskStartScheduler+0x5c>)
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2300      	movs	r3, #0
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	4913      	ldr	r1, [pc, #76]	; (80037a0 <vTaskStartScheduler+0x60>)
 8003754:	4813      	ldr	r0, [pc, #76]	; (80037a4 <vTaskStartScheduler+0x64>)
 8003756:	f7ff fe83 	bl	8003460 <xTaskCreate>
 800375a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d115      	bne.n	800378e <vTaskStartScheduler+0x4e>
        __asm volatile
 8003762:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	603b      	str	r3, [r7, #0]
    }
 8003774:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <vTaskStartScheduler+0x68>)
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <vTaskStartScheduler+0x6c>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <vTaskStartScheduler+0x70>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800378a:	f7ff fdaf 	bl	80032ec <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <vTaskStartScheduler+0x74>)
 8003790:	681b      	ldr	r3, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200021e8 	.word	0x200021e8
 80037a0:	08005268 	.word	0x08005268
 80037a4:	08003c45 	.word	0x08003c45
 80037a8:	200021e4 	.word	0x200021e4
 80037ac:	200021d0 	.word	0x200021d0
 80037b0:	200021c8 	.word	0x200021c8
 80037b4:	2000007c 	.word	0x2000007c

080037b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <vTaskSuspendAll+0x18>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <vTaskSuspendAll+0x18>)
 80037c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80037c6:	bf00      	nop
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200021ec 	.word	0x200021ec

080037d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80037e2:	f7ff fda3 	bl	800332c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80037e6:	4b68      	ldr	r3, [pc, #416]	; (8003988 <xTaskResumeAll+0x1b4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a66      	ldr	r2, [pc, #408]	; (8003988 <xTaskResumeAll+0x1b4>)
 80037ee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f0:	4b65      	ldr	r3, [pc, #404]	; (8003988 <xTaskResumeAll+0x1b4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 80c0 	bne.w	800397a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037fa:	4b64      	ldr	r3, [pc, #400]	; (800398c <xTaskResumeAll+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80bb 	beq.w	800397a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003804:	e08a      	b.n	800391c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003806:	4b62      	ldr	r3, [pc, #392]	; (8003990 <xTaskResumeAll+0x1bc>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6a12      	ldr	r2, [r2, #32]
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	69d2      	ldr	r2, [r2, #28]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3318      	adds	r3, #24
 8003830:	429a      	cmp	r2, r3
 8003832:	d103      	bne.n	800383c <xTaskResumeAll+0x68>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	68d2      	ldr	r2, [r2, #12]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6892      	ldr	r2, [r2, #8]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3304      	adds	r3, #4
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <xTaskResumeAll+0xa6>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	2201      	movs	r2, #1
 8003890:	409a      	lsls	r2, r3
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <xTaskResumeAll+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	4a3e      	ldr	r2, [pc, #248]	; (8003994 <xTaskResumeAll+0x1c0>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	493d      	ldr	r1, [pc, #244]	; (8003998 <xTaskResumeAll+0x1c4>)
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3304      	adds	r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	3204      	adds	r2, #4
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a2e      	ldr	r2, [pc, #184]	; (8003998 <xTaskResumeAll+0x1c4>)
 80038e0:	441a      	add	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	492b      	ldr	r1, [pc, #172]	; (8003998 <xTaskResumeAll+0x1c4>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c59      	adds	r1, r3, #1
 80038fa:	4827      	ldr	r0, [pc, #156]	; (8003998 <xTaskResumeAll+0x1c4>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4403      	add	r3, r0
 8003906:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4b23      	ldr	r3, [pc, #140]	; (800399c <xTaskResumeAll+0x1c8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <xTaskResumeAll+0x1cc>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <xTaskResumeAll+0x1bc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f af70 	bne.w	8003806 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800392c:	f000 fa20 	bl	8003d70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <xTaskResumeAll+0x1d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800393c:	f000 f836 	bl	80039ac <xTaskIncrementTick>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <xTaskResumeAll+0x1cc>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3b01      	subs	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f1      	bne.n	800393c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <xTaskResumeAll+0x1d0>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <xTaskResumeAll+0x1cc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <xTaskResumeAll+0x1d4>)
 800396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800397a:	f7ff fcf1 	bl	8003360 <vPortExitCritical>

    return xAlreadyYielded;
 800397e:	693b      	ldr	r3, [r7, #16]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200021ec 	.word	0x200021ec
 800398c:	200021c4 	.word	0x200021c4
 8003990:	20002184 	.word	0x20002184
 8003994:	200021cc 	.word	0x200021cc
 8003998:	200020f0 	.word	0x200020f0
 800399c:	200020ec 	.word	0x200020ec
 80039a0:	200021d8 	.word	0x200021d8
 80039a4:	200021d4 	.word	0x200021d4
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b6:	4b75      	ldr	r3, [pc, #468]	; (8003b8c <xTaskIncrementTick+0x1e0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 80dc 	bne.w	8003b78 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039c0:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <xTaskIncrementTick+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80039c8:	4a71      	ldr	r2, [pc, #452]	; (8003b90 <xTaskIncrementTick+0x1e4>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d110      	bne.n	80039f6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <xTaskIncrementTick+0x1e8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <xTaskIncrementTick+0x1ec>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6d      	ldr	r2, [pc, #436]	; (8003b94 <xTaskIncrementTick+0x1e8>)
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4a6d      	ldr	r2, [pc, #436]	; (8003b98 <xTaskIncrementTick+0x1ec>)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <xTaskIncrementTick+0x1f0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a6b      	ldr	r2, [pc, #428]	; (8003b9c <xTaskIncrementTick+0x1f0>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	f000 f9bd 	bl	8003d70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <xTaskIncrementTick+0x1f4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f0c0 80a6 	bcc.w	8003b4e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <xTaskIncrementTick+0x1e8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0c:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <xTaskIncrementTick+0x1f4>)
 8003a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a12:	601a      	str	r2, [r3, #0]
                    break;
 8003a14:	e09b      	b.n	8003b4e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a16:	4b5f      	ldr	r3, [pc, #380]	; (8003b94 <xTaskIncrementTick+0x1e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d203      	bcs.n	8003a36 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ba0 <xTaskIncrementTick+0x1f4>)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003a34:	e08b      	b.n	8003b4e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68d2      	ldr	r2, [r2, #12]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	6892      	ldr	r2, [r2, #8]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3304      	adds	r3, #4
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <xTaskIncrementTick+0xb8>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2200      	movs	r2, #0
 8003a68:	615a      	str	r2, [r3, #20]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01e      	beq.n	8003aba <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	6a12      	ldr	r2, [r2, #32]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	69d2      	ldr	r2, [r2, #28]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d103      	bne.n	8003aaa <xTaskIncrementTick+0xfe>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2200      	movs	r2, #0
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <xTaskIncrementTick+0x1f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	4a36      	ldr	r2, [pc, #216]	; (8003ba4 <xTaskIncrementTick+0x1f8>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4935      	ldr	r1, [pc, #212]	; (8003ba8 <xTaskIncrementTick+0x1fc>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	3204      	adds	r2, #4
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1d1a      	adds	r2, r3, #4
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <xTaskIncrementTick+0x1fc>)
 8003b10:	441a      	add	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	615a      	str	r2, [r3, #20]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4923      	ldr	r1, [pc, #140]	; (8003ba8 <xTaskIncrementTick+0x1fc>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	481f      	ldr	r0, [pc, #124]	; (8003ba8 <xTaskIncrementTick+0x1fc>)
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4403      	add	r3, r0
 8003b36:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <xTaskIncrementTick+0x200>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	f4ff af5d 	bcc.w	8003a02 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	e759      	b.n	8003a02 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <xTaskIncrementTick+0x200>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <xTaskIncrementTick+0x1fc>)
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d901      	bls.n	8003b6a <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <xTaskIncrementTick+0x204>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e004      	b.n	8003b82 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <xTaskIncrementTick+0x208>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <xTaskIncrementTick+0x208>)
 8003b80:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200021ec 	.word	0x200021ec
 8003b90:	200021c8 	.word	0x200021c8
 8003b94:	2000217c 	.word	0x2000217c
 8003b98:	20002180 	.word	0x20002180
 8003b9c:	200021dc 	.word	0x200021dc
 8003ba0:	200021e4 	.word	0x200021e4
 8003ba4:	200021cc 	.word	0x200021cc
 8003ba8:	200020f0 	.word	0x200020f0
 8003bac:	200020ec 	.word	0x200020ec
 8003bb0:	200021d8 	.word	0x200021d8
 8003bb4:	200021d4 	.word	0x200021d4

08003bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <vTaskSwitchContext+0x78>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <vTaskSwitchContext+0x7c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003bcc:	e02a      	b.n	8003c24 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <vTaskSwitchContext+0x7c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <vTaskSwitchContext+0x80>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f1c3 031f 	rsb	r3, r3, #31
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <vTaskSwitchContext+0x84>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d104      	bne.n	8003c1a <vTaskSwitchContext+0x62>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <vTaskSwitchContext+0x88>)
 8003c22:	6013      	str	r3, [r2, #0]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	200021ec 	.word	0x200021ec
 8003c34:	200021d8 	.word	0x200021d8
 8003c38:	200021cc 	.word	0x200021cc
 8003c3c:	200020f0 	.word	0x200020f0
 8003c40:	200020ec 	.word	0x200020ec

08003c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003c4c:	f000 f852 	bl	8003cf4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <prvIdleTask+0x28>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d9f9      	bls.n	8003c4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <prvIdleTask+0x2c>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c68:	e7f0      	b.n	8003c4c <prvIdleTask+0x8>
 8003c6a:	bf00      	nop
 8003c6c:	200020f0 	.word	0x200020f0
 8003c70:	e000ed04 	.word	0xe000ed04

08003c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	e00c      	b.n	8003c9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <prvInitialiseTaskLists+0x60>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fa30 	bl	80030f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3301      	adds	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d9ef      	bls.n	8003c80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ca0:	480d      	ldr	r0, [pc, #52]	; (8003cd8 <prvInitialiseTaskLists+0x64>)
 8003ca2:	f7ff fa27 	bl	80030f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ca6:	480d      	ldr	r0, [pc, #52]	; (8003cdc <prvInitialiseTaskLists+0x68>)
 8003ca8:	f7ff fa24 	bl	80030f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003cac:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <prvInitialiseTaskLists+0x6c>)
 8003cae:	f7ff fa21 	bl	80030f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003cb2:	480c      	ldr	r0, [pc, #48]	; (8003ce4 <prvInitialiseTaskLists+0x70>)
 8003cb4:	f7ff fa1e 	bl	80030f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003cb8:	480b      	ldr	r0, [pc, #44]	; (8003ce8 <prvInitialiseTaskLists+0x74>)
 8003cba:	f7ff fa1b 	bl	80030f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <prvInitialiseTaskLists+0x78>)
 8003cc0:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <prvInitialiseTaskLists+0x64>)
 8003cc2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <prvInitialiseTaskLists+0x7c>)
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <prvInitialiseTaskLists+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200020f0 	.word	0x200020f0
 8003cd8:	20002154 	.word	0x20002154
 8003cdc:	20002168 	.word	0x20002168
 8003ce0:	20002184 	.word	0x20002184
 8003ce4:	20002198 	.word	0x20002198
 8003ce8:	200021b0 	.word	0x200021b0
 8003cec:	2000217c 	.word	0x2000217c
 8003cf0:	20002180 	.word	0x20002180

08003cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cfa:	e019      	b.n	8003d30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003cfc:	f7ff fb16 	bl	800332c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <prvCheckTasksWaitingTermination+0x50>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fa54 	bl	80031ba <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <prvCheckTasksWaitingTermination+0x54>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <prvCheckTasksWaitingTermination+0x54>)
 8003d1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <prvCheckTasksWaitingTermination+0x58>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <prvCheckTasksWaitingTermination+0x58>)
 8003d24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003d26:	f7ff fb1b 	bl	8003360 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f810 	bl	8003d50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <prvCheckTasksWaitingTermination+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e1      	bne.n	8003cfc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20002198 	.word	0x20002198
 8003d48:	200021c4 	.word	0x200021c4
 8003d4c:	200021ac 	.word	0x200021ac

08003d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f8cf 	bl	8002f00 <vPortFree>
                vPortFree( pxTCB );
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff f8cc 	bl	8002f00 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <prvResetNextTaskUnblockTime+0x2c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <prvResetNextTaskUnblockTime+0x30>)
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d86:	e005      	b.n	8003d94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <prvResetNextTaskUnblockTime+0x2c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <prvResetNextTaskUnblockTime+0x30>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	2000217c 	.word	0x2000217c
 8003da0:	200021e4 	.word	0x200021e4

08003da4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f9fd 	bl	80031ba <uxListRemove>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2201      	movs	r2, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ddc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d124      	bne.n	8003e30 <prvAddCurrentTaskToDelayedList+0x8c>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d021      	beq.n	8003e30 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	60da      	str	r2, [r3, #12]
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	3204      	adds	r2, #4
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e20:	615a      	str	r2, [r3, #20]
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e2e:	e026      	b.n	8003e7e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d209      	bcs.n	8003e5c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7ff f978 	bl	800314a <vListInsert>
}
 8003e5a:	e010      	b.n	8003e7e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7ff f96e 	bl	800314a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d202      	bcs.n	8003e7e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6013      	str	r3, [r2, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200021c8 	.word	0x200021c8
 8003e8c:	200020ec 	.word	0x200020ec
 8003e90:	200021cc 	.word	0x200021cc
 8003e94:	200021b0 	.word	0x200021b0
 8003e98:	20002180 	.word	0x20002180
 8003e9c:	2000217c 	.word	0x2000217c
 8003ea0:	200021e4 	.word	0x200021e4

08003ea4 <main>:
//Includes
//======================================================================
#include "main.h"

int main(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	Tool_Init();
 8003ea8:	f000 f806 	bl	8003eb8 <Tool_Init>
	OS_vTaskStartScheduler();
 8003eac:	f7ff fc48 	bl	8003740 <vTaskStartScheduler>

	return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <Tool_Init>:

void Tool_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af02      	add	r7, sp, #8
	//enable HSE and select it as the system clock for higher accuracy and disable the HSI to save power
	Rcc_enuControlCLk(RCC_CNTROL_HSION, RCC_CNTROL_HSEON, RCC_CNTROL_PLLOFF);
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	2003      	movs	r0, #3
 8003ec4:	f7fe faa8 	bl	8002418 <Rcc_enuControlCLk>
	Rcc_enuSelectSysCLk(RCC_CLK_HSE, RCC_STATE_NOTPRESERVE);
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7fe f9d2 	bl	8002274 <Rcc_enuSelectSysCLk>
	//should be done inside the HAL
	GPIO_Port_Enable_clock(GPIO_PORT_A);
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7fe f98f 	bl	80021f4 <GPIO_Port_Enable_clock>
	GPIO_Port_Enable_clock(GPIO_PORT_B);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7fe f98c 	bl	80021f4 <GPIO_Port_Enable_clock>

	TFT_SPI_CONFIG();
 8003edc:	f7fd f94c 	bl	8001178 <TFT_SPI_CONFIG>
	/*KEYPAD INIT*/
	KEYPAD_voidInit();
 8003ee0:	f7fc ffb0 	bl	8000e44 <KEYPAD_voidInit>
	HTFT_voidFillColor(BLACK);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fd f973 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7fd fc94 	bl	8001818 <ST7735_SetRotation>

	UDS_VoidInit();
 8003ef0:	f7fd fd0c 	bl	800190c <UDS_VoidInit>
	UDS_voidSetCallBack(UDS_Isr_CallBack);
 8003ef4:	4816      	ldr	r0, [pc, #88]	; (8003f50 <Tool_Init+0x98>)
 8003ef6:	f7fd fd4b 	bl	8001990 <UDS_voidSetCallBack>

	/********************* Start of Uart *****************************************************/


	/* Usart Tx PA9 */
	GPIO_PIN_INIT(GPIO_PIN_9,GPIO_PORT_A,AF_output_Push_pull,GPIO_max_speed_2_MHz,pull_UP);
 8003efa:	2301      	movs	r3, #1
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2302      	movs	r3, #2
 8003f00:	2202      	movs	r2, #2
 8003f02:	2100      	movs	r1, #0
 8003f04:	2009      	movs	r0, #9
 8003f06:	f7fe f84f 	bl	8001fa8 <GPIO_PIN_INIT>

	/* USART RX PA10*/
	GPIO_PIN_INIT(GPIO_PIN_10,GPIO_PORT_A,InputFloating,GPIO_INPUT,FLOATING);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2201      	movs	r2, #1
 8003f12:	2100      	movs	r1, #0
 8003f14:	200a      	movs	r0, #10
 8003f16:	f7fe f847 	bl	8001fa8 <GPIO_PIN_INIT>

	Usart_enuSetCallbackRxFunction(&Usart1, Usart_Isr);
 8003f1a:	490e      	ldr	r1, [pc, #56]	; (8003f54 <Tool_Init+0x9c>)
 8003f1c:	480e      	ldr	r0, [pc, #56]	; (8003f58 <Tool_Init+0xa0>)
 8003f1e:	f7fe fed7 	bl	8002cd0 <Usart_enuSetCallbackRxFunction>
	Usart_enuInit(&Usart1);
 8003f22:	480d      	ldr	r0, [pc, #52]	; (8003f58 <Tool_Init+0xa0>)
 8003f24:	f7fe fd30 	bl	8002988 <Usart_enuInit>
	Usart_enuEnableRxInterrupt(&Usart1);
 8003f28:	480b      	ldr	r0, [pc, #44]	; (8003f58 <Tool_Init+0xa0>)
 8003f2a:	f7fe fead 	bl	8002c88 <Usart_enuEnableRxInterrupt>
	Nvic_enuEnableInterrupt(NVIC_USART1);
 8003f2e:	2025      	movs	r0, #37	; 0x25
 8003f30:	f7fe f97a 	bl	8002228 <Nvic_enuEnableInterrupt>




	/*Tasks creation*/
	OS_xTaskCreate(Tool_Control_Task,"TFT_Task",512,NULL,Tool_TFT_Task_Priority,&Tool_TFT_Handle);
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <Tool_Init+0xa4>)
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2304      	movs	r3, #4
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f42:	4907      	ldr	r1, [pc, #28]	; (8003f60 <Tool_Init+0xa8>)
 8003f44:	4807      	ldr	r0, [pc, #28]	; (8003f64 <Tool_Init+0xac>)
 8003f46:	f7ff fa8b 	bl	8003460 <xTaskCreate>
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	080048f9 	.word	0x080048f9
 8003f54:	08004991 	.word	0x08004991
 8003f58:	20000060 	.word	0x20000060
 8003f5c:	20002210 	.word	0x20002210
 8003f60:	08005270 	.word	0x08005270
 8003f64:	08003f69 	.word	0x08003f69

08003f68 <Tool_Control_Task>:

void Tool_Control_Task(void* Param)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	/* TFT Init */
	HTFT_voidInitialize();
 8003f70:	f7fd f8c4 	bl	80010fc <HTFT_voidInitialize>


	while(1)
	{
		switch(Tool_Current_State)
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <Tool_Control_Task+0x54>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d8fb      	bhi.n	8003f74 <Tool_Control_Task+0xc>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <Tool_Control_Task+0x1c>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	08003fa5 	.word	0x08003fa5
 8003f90:	08003fb1 	.word	0x08003fb1
 8003f94:	08003fab 	.word	0x08003fab
		{
		case ST_Tool_Start_Window:
			Tool_Start_Window();
 8003f98:	f000 f812 	bl	8003fc0 <Tool_Start_Window>
			break;
 8003f9c:	e00c      	b.n	8003fb8 <Tool_Control_Task+0x50>
		case ST_Tool_Security_level_Window:
			Tool_Security_level_Window();
 8003f9e:	f000 f889 	bl	80040b4 <Tool_Security_level_Window>
			break;
 8003fa2:	e009      	b.n	8003fb8 <Tool_Control_Task+0x50>

		case ST_Tool_Car_Options_Window:
			Tool_Car_Options_Window();
 8003fa4:	f000 f8fa 	bl	800419c <Tool_Car_Options_Window>
			break;
 8003fa8:	e006      	b.n	8003fb8 <Tool_Control_Task+0x50>

		case ST_Tool_UDS_Send_Req:
			Tool_UDS_Send_Req();
 8003faa:	f000 f97f 	bl	80042ac <Tool_UDS_Send_Req>
			break;
 8003fae:	e003      	b.n	8003fb8 <Tool_Control_Task+0x50>

		case ST_Tool_Display_Response:
			Tool_Display_Response();
 8003fb0:	f000 faea 	bl	8004588 <Tool_Display_Response>
			break;
 8003fb4:	bf00      	nop
 8003fb6:	e7dd      	b.n	8003f74 <Tool_Control_Task+0xc>
		switch(Tool_Current_State)
 8003fb8:	e7dc      	b.n	8003f74 <Tool_Control_Task+0xc>
 8003fba:	bf00      	nop
 8003fbc:	20002214 	.word	0x20002214

08003fc0 <Tool_Start_Window>:
	}
}


void Tool_Start_Window(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af04      	add	r7, sp, #16

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZB                  GROUP 1-A\n");
 8003fc6:	492f      	ldr	r1, [pc, #188]	; (8004084 <Tool_Start_Window+0xc4>)
 8003fc8:	482f      	ldr	r0, [pc, #188]	; (8004088 <Tool_Start_Window+0xc8>)
 8003fca:	f7fe fe27 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("                Diagnostic Tool\n\n\n"));
 8003fce:	492f      	ldr	r1, [pc, #188]	; (800408c <Tool_Start_Window+0xcc>)
 8003fd0:	482d      	ldr	r0, [pc, #180]	; (8004088 <Tool_Start_Window+0xc8>)
 8003fd2:	f7fe fe23 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("1)Unlock Security LVL\n"));
 8003fd6:	492e      	ldr	r1, [pc, #184]	; (8004090 <Tool_Start_Window+0xd0>)
 8003fd8:	482b      	ldr	r0, [pc, #172]	; (8004088 <Tool_Start_Window+0xc8>)
 8003fda:	f7fe fe1f 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("2)Show Car Options\n"));
 8003fde:	492d      	ldr	r1, [pc, #180]	; (8004094 <Tool_Start_Window+0xd4>)
 8003fe0:	4829      	ldr	r0, [pc, #164]	; (8004088 <Tool_Start_Window+0xc8>)
 8003fe2:	f7fe fe1b 	bl	8002c1c <Usart_enuTransmitStringBlocking>
#endif

	ST7735_SetRotation(0);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f7fd fc16 	bl	8001818 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fd f8ef 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fd fc10 	bl	8001818 <ST7735_SetRotation>
	ST7735_WriteString(10,5, "GROUP1A", Font_16x26, RED,BLACK);
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <Tool_Start_Window+0xd8>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	9202      	str	r2, [sp, #8]
 8003ffe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004002:	9201      	str	r2, [sp, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	9200      	str	r2, [sp, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a24      	ldr	r2, [pc, #144]	; (800409c <Tool_Start_Window+0xdc>)
 800400c:	2105      	movs	r1, #5
 800400e:	200a      	movs	r0, #10
 8004010:	f7fd fa6c 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(10, 30, "Diagnostic tool", Font_7x10, BLUE,BLACK);
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <Tool_Start_Window+0xe0>)
 8004016:	2200      	movs	r2, #0
 8004018:	9202      	str	r2, [sp, #8]
 800401a:	221f      	movs	r2, #31
 800401c:	9201      	str	r2, [sp, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	9200      	str	r2, [sp, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <Tool_Start_Window+0xe4>)
 8004026:	211e      	movs	r1, #30
 8004028:	200a      	movs	r0, #10
 800402a:	f7fd fa5f 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 50, "1)Unlock Security LVL", Font_7x10, BLUE,BLACK);
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <Tool_Start_Window+0xe0>)
 8004030:	2200      	movs	r2, #0
 8004032:	9202      	str	r2, [sp, #8]
 8004034:	221f      	movs	r2, #31
 8004036:	9201      	str	r2, [sp, #4]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	9200      	str	r2, [sp, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <Tool_Start_Window+0xe8>)
 8004040:	2132      	movs	r1, #50	; 0x32
 8004042:	2000      	movs	r0, #0
 8004044:	f7fd fa52 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 70, "2)Show Car Options", Font_7x10, BLUE,BLACK);
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <Tool_Start_Window+0xe0>)
 800404a:	2200      	movs	r2, #0
 800404c:	9202      	str	r2, [sp, #8]
 800404e:	221f      	movs	r2, #31
 8004050:	9201      	str	r2, [sp, #4]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <Tool_Start_Window+0xec>)
 800405a:	2146      	movs	r1, #70	; 0x46
 800405c:	2000      	movs	r0, #0
 800405e:	f7fd fa45 	bl	80014ec <ST7735_WriteString>
	while(entered_key == KEY_NOT_PRESSED || entered_key == 0)
 8004062:	e001      	b.n	8004068 <Tool_Start_Window+0xa8>
	{
		Tool_Keypad_Read();
 8004064:	f000 fb88 	bl	8004778 <Tool_Keypad_Read>
	while(entered_key == KEY_NOT_PRESSED || entered_key == 0)
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <Tool_Start_Window+0xf0>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b9f      	cmp	r3, #159	; 0x9f
 800406e:	d0f9      	beq.n	8004064 <Tool_Start_Window+0xa4>
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <Tool_Start_Window+0xf0>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f5      	beq.n	8004064 <Tool_Start_Window+0xa4>
	}
	entered_key = KEY_NOT_PRESSED;
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <Tool_Start_Window+0xf0>)
 800407a:	229f      	movs	r2, #159	; 0x9f
 800407c:	701a      	strb	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800527c 	.word	0x0800527c
 8004088:	20000060 	.word	0x20000060
 800408c:	0800529c 	.word	0x0800529c
 8004090:	080052c0 	.word	0x080052c0
 8004094:	080052d8 	.word	0x080052d8
 8004098:	20000024 	.word	0x20000024
 800409c:	080052ec 	.word	0x080052ec
 80040a0:	20000014 	.word	0x20000014
 80040a4:	080052f4 	.word	0x080052f4
 80040a8:	08005304 	.word	0x08005304
 80040ac:	0800531c 	.word	0x0800531c
 80040b0:	20000080 	.word	0x20000080

080040b4 <Tool_Security_level_Window>:

void Tool_Security_level_Window(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af04      	add	r7, sp, #16

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("ZB                  Select Level\n\n\n"));
 80040ba:	492d      	ldr	r1, [pc, #180]	; (8004170 <Tool_Security_level_Window+0xbc>)
 80040bc:	482d      	ldr	r0, [pc, #180]	; (8004174 <Tool_Security_level_Window+0xc0>)
 80040be:	f7fe fdad 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("1)Unlock Security L_A\n"));
 80040c2:	492d      	ldr	r1, [pc, #180]	; (8004178 <Tool_Security_level_Window+0xc4>)
 80040c4:	482b      	ldr	r0, [pc, #172]	; (8004174 <Tool_Security_level_Window+0xc0>)
 80040c6:	f7fe fda9 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("2)Unlock Security L_B\n"));
 80040ca:	492c      	ldr	r1, [pc, #176]	; (800417c <Tool_Security_level_Window+0xc8>)
 80040cc:	4829      	ldr	r0, [pc, #164]	; (8004174 <Tool_Security_level_Window+0xc0>)
 80040ce:	f7fe fda5 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("3)Unlock Security L_C\n"));
 80040d2:	492b      	ldr	r1, [pc, #172]	; (8004180 <Tool_Security_level_Window+0xcc>)
 80040d4:	4827      	ldr	r0, [pc, #156]	; (8004174 <Tool_Security_level_Window+0xc0>)
 80040d6:	f7fe fda1 	bl	8002c1c <Usart_enuTransmitStringBlocking>
#endif

	ST7735_SetRotation(0);
 80040da:	2000      	movs	r0, #0
 80040dc:	f7fd fb9c 	bl	8001818 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7fd f875 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7fd fb96 	bl	8001818 <ST7735_SetRotation>
	ST7735_WriteString(10, 10, "Select Level", Font_7x10, RED,BLACK);
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <Tool_Security_level_Window+0xd0>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	9202      	str	r2, [sp, #8]
 80040f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	9200      	str	r2, [sp, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a22      	ldr	r2, [pc, #136]	; (8004188 <Tool_Security_level_Window+0xd4>)
 8004100:	210a      	movs	r1, #10
 8004102:	200a      	movs	r0, #10
 8004104:	f7fd f9f2 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 35, "1)Unlock Security L_1", Font_7x10, BLUE,BLACK);
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <Tool_Security_level_Window+0xd0>)
 800410a:	2200      	movs	r2, #0
 800410c:	9202      	str	r2, [sp, #8]
 800410e:	221f      	movs	r2, #31
 8004110:	9201      	str	r2, [sp, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	9200      	str	r2, [sp, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <Tool_Security_level_Window+0xd8>)
 800411a:	2123      	movs	r1, #35	; 0x23
 800411c:	2000      	movs	r0, #0
 800411e:	f7fd f9e5 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 60, "2)Unlock Security L_2", Font_7x10, BLUE,BLACK);
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <Tool_Security_level_Window+0xd0>)
 8004124:	2200      	movs	r2, #0
 8004126:	9202      	str	r2, [sp, #8]
 8004128:	221f      	movs	r2, #31
 800412a:	9201      	str	r2, [sp, #4]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	9200      	str	r2, [sp, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <Tool_Security_level_Window+0xdc>)
 8004134:	213c      	movs	r1, #60	; 0x3c
 8004136:	2000      	movs	r0, #0
 8004138:	f7fd f9d8 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 85, "3)Unlock Security L_3", Font_7x10, BLUE,BLACK);
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <Tool_Security_level_Window+0xd0>)
 800413e:	2200      	movs	r2, #0
 8004140:	9202      	str	r2, [sp, #8]
 8004142:	221f      	movs	r2, #31
 8004144:	9201      	str	r2, [sp, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	9200      	str	r2, [sp, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <Tool_Security_level_Window+0xe0>)
 800414e:	2155      	movs	r1, #85	; 0x55
 8004150:	2000      	movs	r0, #0
 8004152:	f7fd f9cb 	bl	80014ec <ST7735_WriteString>
	while(entered_key == KEY_NOT_PRESSED)
 8004156:	e001      	b.n	800415c <Tool_Security_level_Window+0xa8>
	{
		Tool_Keypad_Read();
 8004158:	f000 fb0e 	bl	8004778 <Tool_Keypad_Read>
	while(entered_key == KEY_NOT_PRESSED)
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <Tool_Security_level_Window+0xe4>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b9f      	cmp	r3, #159	; 0x9f
 8004162:	d0f9      	beq.n	8004158 <Tool_Security_level_Window+0xa4>
	}
	entered_key = KEY_NOT_PRESSED;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <Tool_Security_level_Window+0xe4>)
 8004166:	229f      	movs	r2, #159	; 0x9f
 8004168:	701a      	strb	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	08005330 	.word	0x08005330
 8004174:	20000060 	.word	0x20000060
 8004178:	08005354 	.word	0x08005354
 800417c:	0800536c 	.word	0x0800536c
 8004180:	08005384 	.word	0x08005384
 8004184:	20000014 	.word	0x20000014
 8004188:	0800539c 	.word	0x0800539c
 800418c:	080053ac 	.word	0x080053ac
 8004190:	080053c4 	.word	0x080053c4
 8004194:	080053dc 	.word	0x080053dc
 8004198:	20000080 	.word	0x20000080

0800419c <Tool_Car_Options_Window>:

void Tool_Car_Options_Window(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af04      	add	r7, sp, #16
#if (UART_GUI == ONE_VALUE)

	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("ZBN                  Select Option\n\n\n"));
 80041a2:	4936      	ldr	r1, [pc, #216]	; (800427c <Tool_Car_Options_Window+0xe0>)
 80041a4:	4836      	ldr	r0, [pc, #216]	; (8004280 <Tool_Car_Options_Window+0xe4>)
 80041a6:	f7fe fd39 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("1)Read Temperature\n"));
 80041aa:	4936      	ldr	r1, [pc, #216]	; (8004284 <Tool_Car_Options_Window+0xe8>)
 80041ac:	4834      	ldr	r0, [pc, #208]	; (8004280 <Tool_Car_Options_Window+0xe4>)
 80041ae:	f7fe fd35 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("2)View Mirror State\n"));
 80041b2:	4935      	ldr	r1, [pc, #212]	; (8004288 <Tool_Car_Options_Window+0xec>)
 80041b4:	4832      	ldr	r0, [pc, #200]	; (8004280 <Tool_Car_Options_Window+0xe4>)
 80041b6:	f7fe fd31 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("3)LED Feature Enable\n"));
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <Tool_Car_Options_Window+0xf0>)
 80041bc:	4830      	ldr	r0, [pc, #192]	; (8004280 <Tool_Car_Options_Window+0xe4>)
 80041be:	f7fe fd2d 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("4)LED Feature Disable"));
 80041c2:	4933      	ldr	r1, [pc, #204]	; (8004290 <Tool_Car_Options_Window+0xf4>)
 80041c4:	482e      	ldr	r0, [pc, #184]	; (8004280 <Tool_Car_Options_Window+0xe4>)
 80041c6:	f7fe fd29 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif

	ST7735_SetRotation(0);
 80041ca:	2000      	movs	r0, #0
 80041cc:	f7fd fb24 	bl	8001818 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 80041d0:	2000      	movs	r0, #0
 80041d2:	f7fc fffd 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 80041d6:	2001      	movs	r0, #1
 80041d8:	f7fd fb1e 	bl	8001818 <ST7735_SetRotation>
	ST7735_WriteString(10, 10, "Select Option", Font_7x10, RED,BLACK);
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <Tool_Car_Options_Window+0xf8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	9202      	str	r2, [sp, #8]
 80041e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80041e6:	9201      	str	r2, [sp, #4]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	9200      	str	r2, [sp, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <Tool_Car_Options_Window+0xfc>)
 80041f0:	210a      	movs	r1, #10
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7fd f97a 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 30, "1)Read Temperature", Font_7x10, BLUE,BLACK);
 80041f8:	4b26      	ldr	r3, [pc, #152]	; (8004294 <Tool_Car_Options_Window+0xf8>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	9202      	str	r2, [sp, #8]
 80041fe:	221f      	movs	r2, #31
 8004200:	9201      	str	r2, [sp, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	9200      	str	r2, [sp, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <Tool_Car_Options_Window+0x100>)
 800420a:	211e      	movs	r1, #30
 800420c:	2000      	movs	r0, #0
 800420e:	f7fd f96d 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 50, "2)View Mirror State", Font_7x10, BLUE,BLACK);
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <Tool_Car_Options_Window+0xf8>)
 8004214:	2200      	movs	r2, #0
 8004216:	9202      	str	r2, [sp, #8]
 8004218:	221f      	movs	r2, #31
 800421a:	9201      	str	r2, [sp, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <Tool_Car_Options_Window+0x104>)
 8004224:	2132      	movs	r1, #50	; 0x32
 8004226:	2000      	movs	r0, #0
 8004228:	f7fd f960 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 70, "3)LED Feature Enable", Font_7x10, BLUE,BLACK);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <Tool_Car_Options_Window+0xf8>)
 800422e:	2200      	movs	r2, #0
 8004230:	9202      	str	r2, [sp, #8]
 8004232:	221f      	movs	r2, #31
 8004234:	9201      	str	r2, [sp, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <Tool_Car_Options_Window+0x108>)
 800423e:	2146      	movs	r1, #70	; 0x46
 8004240:	2000      	movs	r0, #0
 8004242:	f7fd f953 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(0, 90, "4)LED Feature Disable", Font_7x10, BLUE,BLACK);
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <Tool_Car_Options_Window+0xf8>)
 8004248:	2200      	movs	r2, #0
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	221f      	movs	r2, #31
 800424e:	9201      	str	r2, [sp, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	9200      	str	r2, [sp, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <Tool_Car_Options_Window+0xf4>)
 8004258:	215a      	movs	r1, #90	; 0x5a
 800425a:	2000      	movs	r0, #0
 800425c:	f7fd f946 	bl	80014ec <ST7735_WriteString>
	while(entered_key == KEY_NOT_PRESSED)
 8004260:	e001      	b.n	8004266 <Tool_Car_Options_Window+0xca>
	{
		Tool_Keypad_Read();
 8004262:	f000 fa89 	bl	8004778 <Tool_Keypad_Read>
	while(entered_key == KEY_NOT_PRESSED)
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <Tool_Car_Options_Window+0x10c>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b9f      	cmp	r3, #159	; 0x9f
 800426c:	d0f9      	beq.n	8004262 <Tool_Car_Options_Window+0xc6>
	}
	entered_key = KEY_NOT_PRESSED;
 800426e:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <Tool_Car_Options_Window+0x10c>)
 8004270:	229f      	movs	r2, #159	; 0x9f
 8004272:	701a      	strb	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	080053f4 	.word	0x080053f4
 8004280:	20000060 	.word	0x20000060
 8004284:	0800541c 	.word	0x0800541c
 8004288:	08005430 	.word	0x08005430
 800428c:	08005448 	.word	0x08005448
 8004290:	08005460 	.word	0x08005460
 8004294:	20000014 	.word	0x20000014
 8004298:	08005478 	.word	0x08005478
 800429c:	08005488 	.word	0x08005488
 80042a0:	0800549c 	.word	0x0800549c
 80042a4:	080054b0 	.word	0x080054b0
 80042a8:	20000080 	.word	0x20000080

080042ac <Tool_UDS_Send_Req>:

void Tool_UDS_Send_Req(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
	switch(Frame_Type)
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <Tool_UDS_Send_Req+0x168>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	f200 809a 	bhi.w	80043f0 <Tool_UDS_Send_Req+0x144>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <Tool_UDS_Send_Req+0x18>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	08004377 	.word	0x08004377
 80042c8:	08004385 	.word	0x08004385
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	08004313 	.word	0x08004313
 80042d4:	08004345 	.word	0x08004345
 80042d8:	08004393 	.word	0x08004393
 80042dc:	080043b9 	.word	0x080043b9
	{
	case Security_Level1:
		UDS_Request(SID_SECURITY_ACCESS,UDS_REQUEST_LEVEL_1_SECURITY_SEED,UDS_NO_DATA,UDS_NO_DATA);
 80042e0:	2300      	movs	r3, #0
 80042e2:	2200      	movs	r2, #0
 80042e4:	2101      	movs	r1, #1
 80042e6:	2027      	movs	r0, #39	; 0x27
 80042e8:	f7fd fb28 	bl	800193c <UDS_Request>
		Tool_Communication_Check();
 80042ec:	f000 f898 	bl	8004420 <Tool_Communication_Check>
		if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 80042f0:	4b49      	ldr	r3, [pc, #292]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d172      	bne.n	80043de <Tool_UDS_Send_Req+0x132>
		{
			uint32 Local_u32Key = custom_hash_function(G_UDS_DATA);
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <Tool_UDS_Send_Req+0x170>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd fb53 	bl	80019a8 <custom_hash_function>
 8004302:	6078      	str	r0, [r7, #4]
			UDS_Request(SID_SECURITY_ACCESS,UDS_SEND_LEVEL_1_SECURITY_KEY,UDS_NO_DATA,Local_u32Key);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	2102      	movs	r1, #2
 800430a:	2027      	movs	r0, #39	; 0x27
 800430c:	f7fd fb16 	bl	800193c <UDS_Request>
		}
		break;
 8004310:	e065      	b.n	80043de <Tool_UDS_Send_Req+0x132>

	case Security_Level2:
		UDS_Request(SID_SECURITY_ACCESS,UDS_REQUEST_LEVEL_2_SECURITY_SEED,UDS_NO_DATA,UDS_NO_DATA);
 8004312:	2300      	movs	r3, #0
 8004314:	2200      	movs	r2, #0
 8004316:	2103      	movs	r1, #3
 8004318:	2027      	movs	r0, #39	; 0x27
 800431a:	f7fd fb0f 	bl	800193c <UDS_Request>
		Tool_Communication_Check();
 800431e:	f000 f87f 	bl	8004420 <Tool_Communication_Check>
		if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 8004322:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d15b      	bne.n	80043e2 <Tool_UDS_Send_Req+0x136>
		{
			uint32 Local_u32Key = custom_hash_function(G_UDS_DATA);
 800432a:	4b3c      	ldr	r3, [pc, #240]	; (800441c <Tool_UDS_Send_Req+0x170>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fd fb3a 	bl	80019a8 <custom_hash_function>
 8004334:	60b8      	str	r0, [r7, #8]
			UDS_Request(SID_SECURITY_ACCESS,UDS_SEND_LEVEL_2_SECURITY_KEY,UDS_NO_DATA,Local_u32Key);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	2104      	movs	r1, #4
 800433c:	2027      	movs	r0, #39	; 0x27
 800433e:	f7fd fafd 	bl	800193c <UDS_Request>
		}
		break;
 8004342:	e04e      	b.n	80043e2 <Tool_UDS_Send_Req+0x136>

	case Security_Level3:
		UDS_Request(SID_SECURITY_ACCESS,UDS_REQUEST_LEVEL_3_SECURITY_SEED,UDS_NO_DATA,UDS_NO_DATA);
 8004344:	2300      	movs	r3, #0
 8004346:	2200      	movs	r2, #0
 8004348:	2105      	movs	r1, #5
 800434a:	2027      	movs	r0, #39	; 0x27
 800434c:	f7fd faf6 	bl	800193c <UDS_Request>
		Tool_Communication_Check();
 8004350:	f000 f866 	bl	8004420 <Tool_Communication_Check>
		if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d144      	bne.n	80043e6 <Tool_UDS_Send_Req+0x13a>
		{
			uint32 Local_u32Key = custom_hash_function(G_UDS_DATA);
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <Tool_UDS_Send_Req+0x170>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd fb21 	bl	80019a8 <custom_hash_function>
 8004366:	60f8      	str	r0, [r7, #12]
			UDS_Request(SID_SECURITY_ACCESS,UDS_SEND_LEVEL_3_SECURITY_KEY,UDS_NO_DATA,Local_u32Key);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	2106      	movs	r1, #6
 800436e:	2027      	movs	r0, #39	; 0x27
 8004370:	f7fd fae4 	bl	800193c <UDS_Request>
		}
		break;
 8004374:	e037      	b.n	80043e6 <Tool_UDS_Send_Req+0x13a>

	case Temperature_Read:
		//send UDS Request to Read the Oil Temperature
		UDS_Request(SID_READ_DATA_BY_IDENTIFIER, UDS_NO_DATA, APP_TEMPERATURE_DID, UDS_NO_DATA);
 8004376:	2300      	movs	r3, #0
 8004378:	22b1      	movs	r2, #177	; 0xb1
 800437a:	2100      	movs	r1, #0
 800437c:	2022      	movs	r0, #34	; 0x22
 800437e:	f7fd fadd 	bl	800193c <UDS_Request>
		break;
 8004382:	e035      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>

	case Mirror_Read_State:
		UDS_Request(SID_READ_DATA_BY_IDENTIFIER, UDS_NO_DATA, APP_MIRROR_STATE, UDS_NO_DATA);
 8004384:	2300      	movs	r3, #0
 8004386:	22a1      	movs	r2, #161	; 0xa1
 8004388:	2100      	movs	r1, #0
 800438a:	2022      	movs	r0, #34	; 0x22
 800438c:	f7fd fad6 	bl	800193c <UDS_Request>
		break;
 8004390:	e02e      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>

	case Feature_Enable:
		//send UDS Request to Change Session to Programming Session
		UDS_Request(SID_DIAGNOSTIC_SESSION_CONTROL, PROGRAMMING_SESSION, UDS_NO_DATA, UDS_NO_DATA);
 8004392:	2300      	movs	r3, #0
 8004394:	2200      	movs	r2, #0
 8004396:	2102      	movs	r1, #2
 8004398:	2010      	movs	r0, #16
 800439a:	f7fd facf 	bl	800193c <UDS_Request>
		Tool_Communication_Check();
 800439e:	f000 f83f 	bl	8004420 <Tool_Communication_Check>
		if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d11f      	bne.n	80043ea <Tool_UDS_Send_Req+0x13e>
		{
			UDS_Request(SID_WRITE_DATA_BY_IDENTIFIER, UDS_NO_DATA, DID_LED_FEATURE, DATA_ENABLE);
 80043aa:	23e1      	movs	r3, #225	; 0xe1
 80043ac:	2201      	movs	r2, #1
 80043ae:	2100      	movs	r1, #0
 80043b0:	202e      	movs	r0, #46	; 0x2e
 80043b2:	f7fd fac3 	bl	800193c <UDS_Request>
		}
		break;
 80043b6:	e018      	b.n	80043ea <Tool_UDS_Send_Req+0x13e>
	case Feature_Disable:
		//send UDS Request to Change Session to Programming Session
		UDS_Request(SID_DIAGNOSTIC_SESSION_CONTROL, PROGRAMMING_SESSION, UDS_NO_DATA, UDS_NO_DATA);
 80043b8:	2300      	movs	r3, #0
 80043ba:	2200      	movs	r2, #0
 80043bc:	2102      	movs	r1, #2
 80043be:	2010      	movs	r0, #16
 80043c0:	f7fd fabc 	bl	800193c <UDS_Request>
		Tool_Communication_Check();
 80043c4:	f000 f82c 	bl	8004420 <Tool_Communication_Check>
		if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d10e      	bne.n	80043ee <Tool_UDS_Send_Req+0x142>
		{
			UDS_Request(SID_WRITE_DATA_BY_IDENTIFIER, UDS_NO_DATA, DID_LED_FEATURE, DATA_DISABLE);
 80043d0:	23d0      	movs	r3, #208	; 0xd0
 80043d2:	2201      	movs	r2, #1
 80043d4:	2100      	movs	r1, #0
 80043d6:	202e      	movs	r0, #46	; 0x2e
 80043d8:	f7fd fab0 	bl	800193c <UDS_Request>
		}
		break;
 80043dc:	e007      	b.n	80043ee <Tool_UDS_Send_Req+0x142>
		break;
 80043de:	bf00      	nop
 80043e0:	e006      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>
		break;
 80043e2:	bf00      	nop
 80043e4:	e004      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>
		break;
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>
		break;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <Tool_UDS_Send_Req+0x144>
		break;
 80043ee:	bf00      	nop
	}

	if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d101      	bne.n	80043fc <Tool_UDS_Send_Req+0x150>
	{
		Tool_Communication_Check();
 80043f8:	f000 f812 	bl	8004420 <Tool_Communication_Check>
	}

	if(Tool_Current_State == ST_Tool_UDS_Send_Req)
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d102      	bne.n	800440a <Tool_UDS_Send_Req+0x15e>
	{
		Tool_Current_State = ST_Tool_Display_Response;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <Tool_UDS_Send_Req+0x16c>)
 8004406:	2203      	movs	r2, #3
 8004408:	701a      	strb	r2, [r3, #0]
	}
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20002215 	.word	0x20002215
 8004418:	20002214 	.word	0x20002214
 800441c:	20002208 	.word	0x20002208

08004420 <Tool_Communication_Check>:

void Tool_Communication_Check(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
	//wait car response for 1 sec
	for(uint32 Cnt = 0; Cnt < 800000 && Communication_State == Data_not_recieved; ++Cnt);
 8004426:	2300      	movs	r3, #0
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	e002      	b.n	8004432 <Tool_Communication_Check+0x12>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <Tool_Communication_Check+0x54>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d803      	bhi.n	8004442 <Tool_Communication_Check+0x22>
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <Tool_Communication_Check+0x58>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d0f4      	beq.n	800442c <Tool_Communication_Check+0xc>
	if(Communication_State == Data_recieved)
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <Tool_Communication_Check+0x58>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <Tool_Communication_Check+0x40>
	{
		Communication_State = Data_not_recieved;
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <Tool_Communication_Check+0x58>)
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
		if (G_UDS_SID == RSID_NEGATIVE_RESPONSE){
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <Tool_Communication_Check+0x5c>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b7f      	cmp	r3, #127	; 0x7f
 8004456:	d108      	bne.n	800446a <Tool_Communication_Check+0x4a>
			Tool_Current_State = ST_Tool_Display_Response;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <Tool_Communication_Check+0x60>)
 800445a:	2203      	movs	r2, #3
 800445c:	701a      	strb	r2, [r3, #0]
	else
	{
		Tool_Error_Messages();
		Tool_Current_State = ST_Tool_Start_Window;
	}
}
 800445e:	e004      	b.n	800446a <Tool_Communication_Check+0x4a>
		Tool_Error_Messages();
 8004460:	f000 f810 	bl	8004484 <Tool_Error_Messages>
		Tool_Current_State = ST_Tool_Start_Window;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <Tool_Communication_Check+0x60>)
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	000c34ff 	.word	0x000c34ff
 8004478:	20000081 	.word	0x20000081
 800447c:	20002204 	.word	0x20002204
 8004480:	20002214 	.word	0x20002214

08004484 <Tool_Error_Messages>:

void Tool_Error_Messages(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af04      	add	r7, sp, #16

	switch(Tool_Current_State)
 800448a:	4b36      	ldr	r3, [pc, #216]	; (8004564 <Tool_Error_Messages+0xe0>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b04      	cmp	r3, #4
 8004490:	d860      	bhi.n	8004554 <Tool_Error_Messages+0xd0>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <Tool_Error_Messages+0x14>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044ad 	.word	0x080044ad
 800449c:	080044e5 	.word	0x080044e5
 80044a0:	080044ad 	.word	0x080044ad
 80044a4:	08004555 	.word	0x08004555
 80044a8:	0800451d 	.word	0x0800451d
	{
	case ST_Tool_Start_Window:
	case ST_Tool_Car_Options_Window:
#if (UART_GUI == ONE_VALUE)
		Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("ZR        Invalid Option\n"));
 80044ac:	492e      	ldr	r1, [pc, #184]	; (8004568 <Tool_Error_Messages+0xe4>)
 80044ae:	482f      	ldr	r0, [pc, #188]	; (800456c <Tool_Error_Messages+0xe8>)
 80044b0:	f7fe fbb4 	bl	8002c1c <Usart_enuTransmitStringBlocking>
#endif
		ST7735_SetRotation(0);
 80044b4:	2000      	movs	r0, #0
 80044b6:	f7fd f9af 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fc fe88 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 80044c0:	2001      	movs	r0, #1
 80044c2:	f7fd f9a9 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Invalid Option", Font_7x10, RED,BLACK);
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <Tool_Error_Messages+0xec>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	9202      	str	r2, [sp, #8]
 80044cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80044d0:	9201      	str	r2, [sp, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	9200      	str	r2, [sp, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <Tool_Error_Messages+0xf0>)
 80044da:	210a      	movs	r1, #10
 80044dc:	200a      	movs	r0, #10
 80044de:	f7fd f805 	bl	80014ec <ST7735_WriteString>
		break;
 80044e2:	e038      	b.n	8004556 <Tool_Error_Messages+0xd2>

	case ST_Tool_Security_level_Window:

#if (UART_GUI == ONE_VALUE)
		Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("ZR        Invalid Security Level\n"));
 80044e4:	4924      	ldr	r1, [pc, #144]	; (8004578 <Tool_Error_Messages+0xf4>)
 80044e6:	4821      	ldr	r0, [pc, #132]	; (800456c <Tool_Error_Messages+0xe8>)
 80044e8:	f7fe fb98 	bl	8002c1c <Usart_enuTransmitStringBlocking>
#endif
		ST7735_SetRotation(0);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7fd f993 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f7fc fe6c 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fd f98d 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Invalid Security Level", Font_7x10, RED,BLACK);
 80044fe:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <Tool_Error_Messages+0xec>)
 8004500:	2200      	movs	r2, #0
 8004502:	9202      	str	r2, [sp, #8]
 8004504:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	9200      	str	r2, [sp, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <Tool_Error_Messages+0xf8>)
 8004512:	210a      	movs	r1, #10
 8004514:	200a      	movs	r0, #10
 8004516:	f7fc ffe9 	bl	80014ec <ST7735_WriteString>
		break;
 800451a:	e01c      	b.n	8004556 <Tool_Error_Messages+0xd2>

	case ST_Tool_UDS_Send_Req: //if the Car responded with invalid Frame or if the time limit is exceeded
#if (UART_GUI == ONE_VALUE)

		Usart_enuTransmitStringBlocking(&Usart1, (uint8*)("ZR        Communication Error\n"));
 800451c:	4918      	ldr	r1, [pc, #96]	; (8004580 <Tool_Error_Messages+0xfc>)
 800451e:	4813      	ldr	r0, [pc, #76]	; (800456c <Tool_Error_Messages+0xe8>)
 8004520:	f7fe fb7c 	bl	8002c1c <Usart_enuTransmitStringBlocking>
#endif
		ST7735_SetRotation(0);
 8004524:	2000      	movs	r0, #0
 8004526:	f7fd f977 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 800452a:	2000      	movs	r0, #0
 800452c:	f7fc fe50 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004530:	2001      	movs	r0, #1
 8004532:	f7fd f971 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Communication Error", Font_7x10, RED,BLACK);
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <Tool_Error_Messages+0xec>)
 8004538:	2200      	movs	r2, #0
 800453a:	9202      	str	r2, [sp, #8]
 800453c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004540:	9201      	str	r2, [sp, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	9200      	str	r2, [sp, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <Tool_Error_Messages+0x100>)
 800454a:	210a      	movs	r1, #10
 800454c:	200a      	movs	r0, #10
 800454e:	f7fc ffcd 	bl	80014ec <ST7735_WriteString>
		break;
 8004552:	e000      	b.n	8004556 <Tool_Error_Messages+0xd2>
	default : break;
 8004554:	bf00      	nop
	}

	//time delay 2 sec
	OS_vTaskDelay(2000);
 8004556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800455a:	f7ff f8cd 	bl	80036f8 <vTaskDelay>
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20002214 	.word	0x20002214
 8004568:	080054c8 	.word	0x080054c8
 800456c:	20000060 	.word	0x20000060
 8004570:	20000014 	.word	0x20000014
 8004574:	080054e4 	.word	0x080054e4
 8004578:	080054f4 	.word	0x080054f4
 800457c:	08005518 	.word	0x08005518
 8004580:	08005530 	.word	0x08005530
 8004584:	08005550 	.word	0x08005550

08004588 <Tool_Display_Response>:
 * to show Car data
 * to show negative responses
 */

void Tool_Display_Response(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	switch(Frame_Type)
 800458c:	4b73      	ldr	r3, [pc, #460]	; (800475c <Tool_Display_Response+0x1d4>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b06      	cmp	r3, #6
 8004592:	f200 80e1 	bhi.w	8004758 <Tool_Display_Response+0x1d0>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <Tool_Display_Response+0x14>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	0800463d 	.word	0x0800463d
 80045a0:	0800469f 	.word	0x0800469f
 80045a4:	080045b9 	.word	0x080045b9
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	08004611 	.word	0x08004611
 80045b0:	08004701 	.word	0x08004701
 80045b4:	0800472d 	.word	0x0800472d
	{
	case Security_Level1:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_SECURITY_ACCESS))
 80045b8:	4b69      	ldr	r3, [pc, #420]	; (8004760 <Tool_Display_Response+0x1d8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b67      	cmp	r3, #103	; 0x67
 80045be:	d106      	bne.n	80045ce <Tool_Display_Response+0x46>
		{
			SCREEN_securityLevel1POS(1);
 80045c0:	2001      	movs	r0, #1
 80045c2:	f000 f9fb 	bl	80049bc <SCREEN_securityLevel1POS>
			Tool_Current_State = ST_Tool_Start_Window;
 80045c6:	4b67      	ldr	r3, [pc, #412]	; (8004764 <Tool_Display_Response+0x1dc>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e005      	b.n	80045da <Tool_Display_Response+0x52>

		}
		else
		{
			SCREEN_securityLevel1NEG(1);
 80045ce:	2001      	movs	r0, #1
 80045d0:	f000 fafe 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			Tool_Current_State = ST_Tool_Security_level_Window;
 80045d4:	4b63      	ldr	r3, [pc, #396]	; (8004764 <Tool_Display_Response+0x1dc>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
		}
			//time delay 2 sec
			OS_vTaskDelay(2000);
 80045da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045de:	f7ff f88b 	bl	80036f8 <vTaskDelay>
			break;
 80045e2:	e0b9      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Security_Level2:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_SECURITY_ACCESS))
 80045e4:	4b5e      	ldr	r3, [pc, #376]	; (8004760 <Tool_Display_Response+0x1d8>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b67      	cmp	r3, #103	; 0x67
 80045ea:	d106      	bne.n	80045fa <Tool_Display_Response+0x72>
		{
			SCREEN_securityLevel1POS(2);
 80045ec:	2002      	movs	r0, #2
 80045ee:	f000 f9e5 	bl	80049bc <SCREEN_securityLevel1POS>
			Tool_Current_State = ST_Tool_Start_Window;
 80045f2:	4b5c      	ldr	r3, [pc, #368]	; (8004764 <Tool_Display_Response+0x1dc>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e005      	b.n	8004606 <Tool_Display_Response+0x7e>

		}
		else
		{
			SCREEN_securityLevel1NEG(2);
 80045fa:	2002      	movs	r0, #2
 80045fc:	f000 fae8 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			Tool_Current_State = ST_Tool_Security_level_Window;
 8004600:	4b58      	ldr	r3, [pc, #352]	; (8004764 <Tool_Display_Response+0x1dc>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]

		}
			// wait 2 sec
			OS_vTaskDelay(2000);
 8004606:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800460a:	f7ff f875 	bl	80036f8 <vTaskDelay>
			break;
 800460e:	e0a3      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Security_Level3:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_SECURITY_ACCESS))
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <Tool_Display_Response+0x1d8>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b67      	cmp	r3, #103	; 0x67
 8004616:	d106      	bne.n	8004626 <Tool_Display_Response+0x9e>
		{
			SCREEN_securityLevel1POS(3);
 8004618:	2003      	movs	r0, #3
 800461a:	f000 f9cf 	bl	80049bc <SCREEN_securityLevel1POS>
			Tool_Current_State = ST_Tool_Start_Window;
 800461e:	4b51      	ldr	r3, [pc, #324]	; (8004764 <Tool_Display_Response+0x1dc>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e005      	b.n	8004632 <Tool_Display_Response+0xaa>
		}
		else
		{
			SCREEN_securityLevel1NEG(3);
 8004626:	2003      	movs	r0, #3
 8004628:	f000 fad2 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			Tool_Current_State = ST_Tool_Security_level_Window;
 800462c:	4b4d      	ldr	r3, [pc, #308]	; (8004764 <Tool_Display_Response+0x1dc>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
		}
			// wait 2 sec
			OS_vTaskDelay(2000);
 8004632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004636:	f7ff f85f 	bl	80036f8 <vTaskDelay>
			break;
 800463a:	e08d      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Temperature_Read:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_READ_DATA_BY_IDENTIFIER))
 800463c:	4b48      	ldr	r3, [pc, #288]	; (8004760 <Tool_Display_Response+0x1d8>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b62      	cmp	r3, #98	; 0x62
 8004642:	d121      	bne.n	8004688 <Tool_Display_Response+0x100>
		{
			SCREEN_Temp(G_ArrMessageData[4],G_ArrMessageData[3]);
 8004644:	4b48      	ldr	r3, [pc, #288]	; (8004768 <Tool_Display_Response+0x1e0>)
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	4a47      	ldr	r2, [pc, #284]	; (8004768 <Tool_Display_Response+0x1e0>)
 800464a:	78d2      	ldrb	r2, [r2, #3]
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fbe0 	bl	8004e14 <SCREEN_Temp>
			while(entered_key != 0)
 8004654:	e010      	b.n	8004678 <Tool_Display_Response+0xf0>
			{

				KEYPAD_FindKey(&entered_key);
 8004656:	4845      	ldr	r0, [pc, #276]	; (800476c <Tool_Display_Response+0x1e4>)
 8004658:	f7fc fcba 	bl	8000fd0 <KEYPAD_FindKey>
#if (UART_GUI == ONE_VALUE)

				if(Uart_Flag == ONE_VALUE){
 800465c:	4b44      	ldr	r3, [pc, #272]	; (8004770 <Tool_Display_Response+0x1e8>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <Tool_Display_Response+0xea>
					Uart_Flag = ZERO_VALUE;
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <Tool_Display_Response+0x1e8>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
					entered_key = Uart_Value;
 800466a:	4b42      	ldr	r3, [pc, #264]	; (8004774 <Tool_Display_Response+0x1ec>)
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <Tool_Display_Response+0x1e4>)
 8004670:	701a      	strb	r2, [r3, #0]
				}
#endif
				OS_vTaskDelay(50);
 8004672:	2032      	movs	r0, #50	; 0x32
 8004674:	f7ff f840 	bl	80036f8 <vTaskDelay>
			while(entered_key != 0)
 8004678:	4b3c      	ldr	r3, [pc, #240]	; (800476c <Tool_Display_Response+0x1e4>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ea      	bne.n	8004656 <Tool_Display_Response+0xce>
			}
			entered_key = KEY_NOT_PRESSED;
 8004680:	4b3a      	ldr	r3, [pc, #232]	; (800476c <Tool_Display_Response+0x1e4>)
 8004682:	229f      	movs	r2, #159	; 0x9f
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e006      	b.n	8004696 <Tool_Display_Response+0x10e>
		}
		else
		{
			// inform the user with unsuccessful process to read the temperature
			SCREEN_securityLevel1NEG(4);
 8004688:	2004      	movs	r0, #4
 800468a:	f000 faa1 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			OS_vTaskDelay(2000);
 800468e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004692:	f7ff f831 	bl	80036f8 <vTaskDelay>
		}
		Tool_Current_State = ST_Tool_Car_Options_Window;
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <Tool_Display_Response+0x1dc>)
 8004698:	2202      	movs	r2, #2
 800469a:	701a      	strb	r2, [r3, #0]
		break;
 800469c:	e05c      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Mirror_Read_State:
		if(G_UDS_SID == RSID_POSITIVE_RESPONSE + SID_READ_DATA_BY_IDENTIFIER)
 800469e:	4b30      	ldr	r3, [pc, #192]	; (8004760 <Tool_Display_Response+0x1d8>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b62      	cmp	r3, #98	; 0x62
 80046a4:	d121      	bne.n	80046ea <Tool_Display_Response+0x162>
		{
			SCREEN_Mirror(G_ArrMessageData[4],G_ArrMessageData[3]);
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <Tool_Display_Response+0x1e0>)
 80046a8:	791b      	ldrb	r3, [r3, #4]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <Tool_Display_Response+0x1e0>)
 80046ac:	78d2      	ldrb	r2, [r2, #3]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fca3 	bl	8004ffc <SCREEN_Mirror>

			while(entered_key != 0)
 80046b6:	e010      	b.n	80046da <Tool_Display_Response+0x152>
			{
				KEYPAD_FindKey(&entered_key);
 80046b8:	482c      	ldr	r0, [pc, #176]	; (800476c <Tool_Display_Response+0x1e4>)
 80046ba:	f7fc fc89 	bl	8000fd0 <KEYPAD_FindKey>

#if (UART_GUI == ONE_VALUE)

				if(Uart_Flag == ONE_VALUE){
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <Tool_Display_Response+0x1e8>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d106      	bne.n	80046d4 <Tool_Display_Response+0x14c>
					Uart_Flag = ZERO_VALUE;
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <Tool_Display_Response+0x1e8>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
					entered_key = Uart_Value;
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <Tool_Display_Response+0x1ec>)
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	4b26      	ldr	r3, [pc, #152]	; (800476c <Tool_Display_Response+0x1e4>)
 80046d2:	701a      	strb	r2, [r3, #0]
				}
#endif
				OS_vTaskDelay(50);
 80046d4:	2032      	movs	r0, #50	; 0x32
 80046d6:	f7ff f80f 	bl	80036f8 <vTaskDelay>
			while(entered_key != 0)
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <Tool_Display_Response+0x1e4>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ea      	bne.n	80046b8 <Tool_Display_Response+0x130>
			}
			entered_key = KEY_NOT_PRESSED;
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <Tool_Display_Response+0x1e4>)
 80046e4:	229f      	movs	r2, #159	; 0x9f
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e006      	b.n	80046f8 <Tool_Display_Response+0x170>
		}
		else
		{
			// inform the user with unsuccessful process to read the mirror state
			SCREEN_securityLevel1NEG(5);
 80046ea:	2005      	movs	r0, #5
 80046ec:	f000 fa70 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			OS_vTaskDelay(2000);
 80046f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80046f4:	f7ff f800 	bl	80036f8 <vTaskDelay>
		}
		Tool_Current_State = ST_Tool_Car_Options_Window;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <Tool_Display_Response+0x1dc>)
 80046fa:	2202      	movs	r2, #2
 80046fc:	701a      	strb	r2, [r3, #0]
		break;
 80046fe:	e02b      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Feature_Enable:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_WRITE_DATA_BY_IDENTIFIER))
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <Tool_Display_Response+0x1d8>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b6e      	cmp	r3, #110	; 0x6e
 8004706:	d106      	bne.n	8004716 <Tool_Display_Response+0x18e>
		{
			SCREEN_securityLevel1POS(4);
 8004708:	2004      	movs	r0, #4
 800470a:	f000 f957 	bl	80049bc <SCREEN_securityLevel1POS>
			Tool_Current_State = ST_Tool_Start_Window;
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <Tool_Display_Response+0x1dc>)
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e005      	b.n	8004722 <Tool_Display_Response+0x19a>
		}
		else
		{
			SCREEN_securityLevel1NEG(6);
 8004716:	2006      	movs	r0, #6
 8004718:	f000 fa5a 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			Tool_Current_State = ST_Tool_Car_Options_Window;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <Tool_Display_Response+0x1dc>)
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
		}
			// wait 2 sec
			OS_vTaskDelay(2000);
 8004722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004726:	f7fe ffe7 	bl	80036f8 <vTaskDelay>
			break;
 800472a:	e015      	b.n	8004758 <Tool_Display_Response+0x1d0>

	case Feature_Disable:
		if(G_UDS_SID == (RSID_POSITIVE_RESPONSE + SID_WRITE_DATA_BY_IDENTIFIER))
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <Tool_Display_Response+0x1d8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b6e      	cmp	r3, #110	; 0x6e
 8004732:	d106      	bne.n	8004742 <Tool_Display_Response+0x1ba>
		{
			SCREEN_securityLevel1POS(5);
 8004734:	2005      	movs	r0, #5
 8004736:	f000 f941 	bl	80049bc <SCREEN_securityLevel1POS>
			Tool_Current_State = ST_Tool_Start_Window;
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <Tool_Display_Response+0x1dc>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e005      	b.n	800474e <Tool_Display_Response+0x1c6>
		}
		else
		{
			SCREEN_securityLevel1NEG(7);
 8004742:	2007      	movs	r0, #7
 8004744:	f000 fa44 	bl	8004bd0 <SCREEN_securityLevel1NEG>
			Tool_Current_State = ST_Tool_Car_Options_Window;
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <Tool_Display_Response+0x1dc>)
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
		}
			// wait 2 sec
			OS_vTaskDelay(2000);
 800474e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004752:	f7fe ffd1 	bl	80036f8 <vTaskDelay>
			break;
 8004756:	bf00      	nop

	}
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20002215 	.word	0x20002215
 8004760:	20002204 	.word	0x20002204
 8004764:	20002214 	.word	0x20002214
 8004768:	200021fc 	.word	0x200021fc
 800476c:	20000080 	.word	0x20000080
 8004770:	2000220c 	.word	0x2000220c
 8004774:	2000220d 	.word	0x2000220d

08004778 <Tool_Keypad_Read>:

void Tool_Keypad_Read(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
	KEYPAD_FindKey(&entered_key);
 800477c:	4859      	ldr	r0, [pc, #356]	; (80048e4 <Tool_Keypad_Read+0x16c>)
 800477e:	f7fc fc27 	bl	8000fd0 <KEYPAD_FindKey>
	if(Uart_Flag == ONE_VALUE){
 8004782:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <Tool_Keypad_Read+0x170>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d106      	bne.n	8004798 <Tool_Keypad_Read+0x20>
		Uart_Flag = ZERO_VALUE;
 800478a:	4b57      	ldr	r3, [pc, #348]	; (80048e8 <Tool_Keypad_Read+0x170>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
		entered_key = Uart_Value;
 8004790:	4b56      	ldr	r3, [pc, #344]	; (80048ec <Tool_Keypad_Read+0x174>)
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <Tool_Keypad_Read+0x16c>)
 8004796:	701a      	strb	r2, [r3, #0]
	}

	if(Tool_Current_State == ST_Tool_Start_Window)
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <Tool_Keypad_Read+0x178>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11d      	bne.n	80047dc <Tool_Keypad_Read+0x64>
	{
		switch(entered_key)
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <Tool_Keypad_Read+0x16c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b9f      	cmp	r3, #159	; 0x9f
 80047a6:	d00a      	beq.n	80047be <Tool_Keypad_Read+0x46>
 80047a8:	2b9f      	cmp	r3, #159	; 0x9f
 80047aa:	dc14      	bgt.n	80047d6 <Tool_Keypad_Read+0x5e>
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d00e      	beq.n	80047ce <Tool_Keypad_Read+0x56>
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	dc10      	bgt.n	80047d6 <Tool_Keypad_Read+0x5e>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <Tool_Keypad_Read+0x46>
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d004      	beq.n	80047c6 <Tool_Keypad_Read+0x4e>
 80047bc:	e00b      	b.n	80047d6 <Tool_Keypad_Read+0x5e>
		{
		case 0:
		case KEY_NOT_PRESSED:
			Tool_Current_State = ST_Tool_Start_Window;
 80047be:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
			break;
 80047c4:	e088      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 1:
			Tool_Current_State = ST_Tool_Security_level_Window;
 80047c6:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
			break;
 80047cc:	e084      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 2:
			Tool_Current_State = ST_Tool_Car_Options_Window;
 80047ce:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
			break;
 80047d4:	e080      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		default:
			Tool_Error_Messages();
 80047d6:	f7ff fe55 	bl	8004484 <Tool_Error_Messages>
			break;
 80047da:	e07d      	b.n	80048d8 <Tool_Keypad_Read+0x160>
		}
	}
	else if(Tool_Current_State == ST_Tool_Security_level_Window)
 80047dc:	4b44      	ldr	r3, [pc, #272]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d136      	bne.n	8004852 <Tool_Keypad_Read+0xda>
	{
		switch(entered_key)
 80047e4:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <Tool_Keypad_Read+0x16c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	dc0f      	bgt.n	800480c <Tool_Keypad_Read+0x94>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db2d      	blt.n	800484c <Tool_Keypad_Read+0xd4>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d82b      	bhi.n	800484c <Tool_Keypad_Read+0xd4>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <Tool_Keypad_Read+0x84>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004813 	.word	0x08004813
 8004800:	0800481b 	.word	0x0800481b
 8004804:	08004829 	.word	0x08004829
 8004808:	08004837 	.word	0x08004837
 800480c:	2b9f      	cmp	r3, #159	; 0x9f
 800480e:	d019      	beq.n	8004844 <Tool_Keypad_Read+0xcc>
 8004810:	e01c      	b.n	800484c <Tool_Keypad_Read+0xd4>
		{
		case 0:
			Tool_Current_State = ST_Tool_Start_Window;
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <Tool_Keypad_Read+0x178>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
			break;
 8004818:	e05e      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 1:
			Frame_Type = Security_Level1;
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 8004820:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <Tool_Keypad_Read+0x178>)
 8004822:	2204      	movs	r2, #4
 8004824:	701a      	strb	r2, [r3, #0]
			break;
 8004826:	e057      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 2:
			Frame_Type = Security_Level2;
 8004828:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 800482a:	2203      	movs	r2, #3
 800482c:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 800482e:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <Tool_Keypad_Read+0x178>)
 8004830:	2204      	movs	r2, #4
 8004832:	701a      	strb	r2, [r3, #0]
			break;
 8004834:	e050      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 3:
			Frame_Type = Security_Level3;
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 8004838:	2204      	movs	r2, #4
 800483a:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 800483c:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <Tool_Keypad_Read+0x178>)
 800483e:	2204      	movs	r2, #4
 8004840:	701a      	strb	r2, [r3, #0]
			break;
 8004842:	e049      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case KEY_NOT_PRESSED:
			Tool_Current_State = ST_Tool_Security_level_Window;
 8004844:	4b2a      	ldr	r3, [pc, #168]	; (80048f0 <Tool_Keypad_Read+0x178>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
			break;
 800484a:	e045      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		default:
			Tool_Error_Messages();
 800484c:	f7ff fe1a 	bl	8004484 <Tool_Error_Messages>
			break;
 8004850:	e042      	b.n	80048d8 <Tool_Keypad_Read+0x160>
		}
	}
	else if(Tool_Current_State == ST_Tool_Car_Options_Window)
 8004852:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <Tool_Keypad_Read+0x178>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d13e      	bne.n	80048d8 <Tool_Keypad_Read+0x160>
	{
		switch(entered_key)
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <Tool_Keypad_Read+0x16c>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b04      	cmp	r3, #4
 8004860:	dc10      	bgt.n	8004884 <Tool_Keypad_Read+0x10c>
 8004862:	2b00      	cmp	r3, #0
 8004864:	db35      	blt.n	80048d2 <Tool_Keypad_Read+0x15a>
 8004866:	2b04      	cmp	r3, #4
 8004868:	d833      	bhi.n	80048d2 <Tool_Keypad_Read+0x15a>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <Tool_Keypad_Read+0xf8>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	0800488b 	.word	0x0800488b
 8004874:	08004893 	.word	0x08004893
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048af 	.word	0x080048af
 8004880:	080048bd 	.word	0x080048bd
 8004884:	2b9f      	cmp	r3, #159	; 0x9f
 8004886:	d020      	beq.n	80048ca <Tool_Keypad_Read+0x152>
 8004888:	e023      	b.n	80048d2 <Tool_Keypad_Read+0x15a>
		{
		case 0:
			Tool_Current_State = ST_Tool_Start_Window;
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <Tool_Keypad_Read+0x178>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
			break;
 8004890:	e022      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 1:
			Frame_Type = Temperature_Read;
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <Tool_Keypad_Read+0x178>)
 800489a:	2204      	movs	r2, #4
 800489c:	701a      	strb	r2, [r3, #0]
			break;
 800489e:	e01b      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 2:
			Frame_Type = Mirror_Read_State;
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80048a8:	2204      	movs	r2, #4
 80048aa:	701a      	strb	r2, [r3, #0]
			break;
 80048ac:	e014      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case 3:
			Frame_Type = Feature_Enable;
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 80048b0:	2205      	movs	r2, #5
 80048b2:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80048b6:	2204      	movs	r2, #4
 80048b8:	701a      	strb	r2, [r3, #0]
			break;
 80048ba:	e00d      	b.n	80048d8 <Tool_Keypad_Read+0x160>
		case 4:
			Frame_Type = Feature_Disable;
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <Tool_Keypad_Read+0x17c>)
 80048be:	2206      	movs	r2, #6
 80048c0:	701a      	strb	r2, [r3, #0]
			Tool_Current_State = ST_Tool_UDS_Send_Req;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80048c4:	2204      	movs	r2, #4
 80048c6:	701a      	strb	r2, [r3, #0]
			break;
 80048c8:	e006      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		case KEY_NOT_PRESSED:
			Tool_Current_State = ST_Tool_Car_Options_Window;
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <Tool_Keypad_Read+0x178>)
 80048cc:	2202      	movs	r2, #2
 80048ce:	701a      	strb	r2, [r3, #0]
			break;
 80048d0:	e002      	b.n	80048d8 <Tool_Keypad_Read+0x160>

		default:
			Tool_Error_Messages();
 80048d2:	f7ff fdd7 	bl	8004484 <Tool_Error_Messages>
			break;
 80048d6:	bf00      	nop
		}
	}

	OS_vTaskDelay(50);
 80048d8:	2032      	movs	r0, #50	; 0x32
 80048da:	f7fe ff0d 	bl	80036f8 <vTaskDelay>
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000080 	.word	0x20000080
 80048e8:	2000220c 	.word	0x2000220c
 80048ec:	2000220d 	.word	0x2000220d
 80048f0:	20002214 	.word	0x20002214
 80048f4:	20002215 	.word	0x20002215

080048f8 <UDS_Isr_CallBack>:

void UDS_Isr_CallBack(Can_MessageType* Receive_Message, uint8_t ArrMessageData[8], uint8_t Copy_uint8FilterIndex)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	71fb      	strb	r3, [r7, #7]
	/*Set flag to be handled in TFT function*/
	Communication_State = Data_recieved;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <UDS_Isr_CallBack+0x78>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]

	G_Receive_Message = *Receive_Message;
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <UDS_Isr_CallBack+0x7c>)
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	ca07      	ldmia	r2, {r0, r1, r2}
 8004912:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for(uint8 i=0;i < Receive_Message->can_DLC_FROM_0_TO_8;++i)
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
 800491a:	e009      	b.n	8004930 <UDS_Isr_CallBack+0x38>
	{
		G_ArrMessageData[i] = ArrMessageData[i];
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	441a      	add	r2, r3
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	7811      	ldrb	r1, [r2, #0]
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <UDS_Isr_CallBack+0x80>)
 8004928:	54d1      	strb	r1, [r2, r3]
	for(uint8 i=0;i < Receive_Message->can_DLC_FROM_0_TO_8;++i)
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	3301      	adds	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	7dfa      	ldrb	r2, [r7, #23]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3f0      	bcc.n	800491c <UDS_Isr_CallBack+0x24>
	}
	G_UDS_SID    = G_ArrMessageData[0] ;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <UDS_Isr_CallBack+0x80>)
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <UDS_Isr_CallBack+0x84>)
 8004940:	701a      	strb	r2, [r3, #0]
	G_UDS_SubFun = G_ArrMessageData[1] ;
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <UDS_Isr_CallBack+0x80>)
 8004944:	785a      	ldrb	r2, [r3, #1]
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <UDS_Isr_CallBack+0x88>)
 8004948:	701a      	strb	r2, [r3, #0]
	G_UDS_DID    = G_ArrMessageData[2] ;
 800494a:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <UDS_Isr_CallBack+0x80>)
 800494c:	789a      	ldrb	r2, [r3, #2]
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <UDS_Isr_CallBack+0x8c>)
 8004950:	701a      	strb	r2, [r3, #0]
	G_UDS_DATA   = *((uint32*)(G_ArrMessageData+3)) ;
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <UDS_Isr_CallBack+0x80>)
 8004954:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8004958:	461a      	mov	r2, r3
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <UDS_Isr_CallBack+0x90>)
 800495c:	601a      	str	r2, [r3, #0]

	G_Copy_uint8FilterIndex = Copy_uint8FilterIndex;
 800495e:	4a0b      	ldr	r2, [pc, #44]	; (800498c <UDS_Isr_CallBack+0x94>)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	7013      	strb	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000081 	.word	0x20000081
 8004974:	200021f0 	.word	0x200021f0
 8004978:	200021fc 	.word	0x200021fc
 800497c:	20002204 	.word	0x20002204
 8004980:	20002205 	.word	0x20002205
 8004984:	20002206 	.word	0x20002206
 8004988:	20002208 	.word	0x20002208
 800498c:	2000220e 	.word	0x2000220e

08004990 <Usart_Isr>:


void Usart_Isr(uint16 Copy_u16Result){
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]

	Uart_Flag = ONE_VALUE;
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <Usart_Isr+0x24>)
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
	Uart_Value = Copy_u16Result;
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <Usart_Isr+0x28>)
 80049a6:	701a      	strb	r2, [r3, #0]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000220c 	.word	0x2000220c
 80049b8:	2000220d 	.word	0x2000220d

080049bc <SCREEN_securityLevel1POS>:
#include "../Inc/HAL/TFT/TFT_interface.h"

#include "screens.h"


void SCREEN_securityLevel1POS(uint8 Copy_u8level){
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af04      	add	r7, sp, #16
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]

	switch(Copy_u8level){
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	f200 80e0 	bhi.w	8004b90 <SCREEN_securityLevel1POS+0x1d4>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <SCREEN_securityLevel1POS+0x1c>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049ed 	.word	0x080049ed
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a95 	.word	0x08004a95
 80049e4:	08004ae9 	.word	0x08004ae9
 80049e8:	08004b3d 	.word	0x08004b3d
	case 1 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZGF    \n\n\n        Security Level 1 approved\n");
 80049ec:	496a      	ldr	r1, [pc, #424]	; (8004b98 <SCREEN_securityLevel1POS+0x1dc>)
 80049ee:	486b      	ldr	r0, [pc, #428]	; (8004b9c <SCREEN_securityLevel1POS+0x1e0>)
 80049f0:	f7fe f914 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fc ff0f 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fc fbe8 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f7fc ff09 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 1", Font_7x10, GREEN,BLACK);
 8004a06:	4b66      	ldr	r3, [pc, #408]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	9202      	str	r2, [sp, #8]
 8004a0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004a10:	9201      	str	r2, [sp, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	9200      	str	r2, [sp, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a62      	ldr	r2, [pc, #392]	; (8004ba4 <SCREEN_securityLevel1POS+0x1e8>)
 8004a1a:	210a      	movs	r1, #10
 8004a1c:	200a      	movs	r0, #10
 8004a1e:	f7fc fd65 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(40, 25, "approved", Font_7x10, GREEN,BLACK);
 8004a22:	4b5f      	ldr	r3, [pc, #380]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	9202      	str	r2, [sp, #8]
 8004a28:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004a2c:	9201      	str	r2, [sp, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	9200      	str	r2, [sp, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a5c      	ldr	r2, [pc, #368]	; (8004ba8 <SCREEN_securityLevel1POS+0x1ec>)
 8004a36:	2119      	movs	r1, #25
 8004a38:	2028      	movs	r0, #40	; 0x28
 8004a3a:	f7fc fd57 	bl	80014ec <ST7735_WriteString>
		break;
 8004a3e:	e0a7      	b.n	8004b90 <SCREEN_securityLevel1POS+0x1d4>
	case 2 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZGF    \n\n\n        Security Level 2 approved\n");
 8004a40:	495a      	ldr	r1, [pc, #360]	; (8004bac <SCREEN_securityLevel1POS+0x1f0>)
 8004a42:	4856      	ldr	r0, [pc, #344]	; (8004b9c <SCREEN_securityLevel1POS+0x1e0>)
 8004a44:	f7fe f8ea 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fc fee5 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f7fc fbbe 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004a54:	2001      	movs	r0, #1
 8004a56:	f7fc fedf 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 2", Font_7x10, GREEN,BLACK);
 8004a5a:	4b51      	ldr	r3, [pc, #324]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	9202      	str	r2, [sp, #8]
 8004a60:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004a64:	9201      	str	r2, [sp, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	9200      	str	r2, [sp, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a50      	ldr	r2, [pc, #320]	; (8004bb0 <SCREEN_securityLevel1POS+0x1f4>)
 8004a6e:	210a      	movs	r1, #10
 8004a70:	200a      	movs	r0, #10
 8004a72:	f7fc fd3b 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(40, 25, "approved", Font_7x10, GREEN,BLACK);
 8004a76:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	9202      	str	r2, [sp, #8]
 8004a7c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004a80:	9201      	str	r2, [sp, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	9200      	str	r2, [sp, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <SCREEN_securityLevel1POS+0x1ec>)
 8004a8a:	2119      	movs	r1, #25
 8004a8c:	2028      	movs	r0, #40	; 0x28
 8004a8e:	f7fc fd2d 	bl	80014ec <ST7735_WriteString>
		break;
 8004a92:	e07d      	b.n	8004b90 <SCREEN_securityLevel1POS+0x1d4>
	case 3 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZGF    \n\n\n        Security Level 3 approved\n");
 8004a94:	4947      	ldr	r1, [pc, #284]	; (8004bb4 <SCREEN_securityLevel1POS+0x1f8>)
 8004a96:	4841      	ldr	r0, [pc, #260]	; (8004b9c <SCREEN_securityLevel1POS+0x1e0>)
 8004a98:	f7fe f8c0 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7fc febb 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7fc fb94 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fc feb5 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 3", Font_7x10, GREEN,BLACK);
 8004aae:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	9202      	str	r2, [sp, #8]
 8004ab4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004ab8:	9201      	str	r2, [sp, #4]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3d      	ldr	r2, [pc, #244]	; (8004bb8 <SCREEN_securityLevel1POS+0x1fc>)
 8004ac2:	210a      	movs	r1, #10
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f7fc fd11 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(40, 25, "approved", Font_7x10, GREEN,BLACK);
 8004aca:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	9202      	str	r2, [sp, #8]
 8004ad0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004ad4:	9201      	str	r2, [sp, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	9200      	str	r2, [sp, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <SCREEN_securityLevel1POS+0x1ec>)
 8004ade:	2119      	movs	r1, #25
 8004ae0:	2028      	movs	r0, #40	; 0x28
 8004ae2:	f7fc fd03 	bl	80014ec <ST7735_WriteString>
		break;
 8004ae6:	e053      	b.n	8004b90 <SCREEN_securityLevel1POS+0x1d4>
	case 4 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZG    \n\n\n        Feature Enabled Successfully\n");
 8004ae8:	4934      	ldr	r1, [pc, #208]	; (8004bbc <SCREEN_securityLevel1POS+0x200>)
 8004aea:	482c      	ldr	r0, [pc, #176]	; (8004b9c <SCREEN_securityLevel1POS+0x1e0>)
 8004aec:	f7fe f896 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7fc fe91 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fc fb6a 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fc fe8b 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Feature Enabled", Font_7x10, GREEN,BLACK);
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b0c:	9201      	str	r2, [sp, #4]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	9200      	str	r2, [sp, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <SCREEN_securityLevel1POS+0x204>)
 8004b16:	210a      	movs	r1, #10
 8004b18:	200a      	movs	r0, #10
 8004b1a:	f7fc fce7 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(20, 25, "Successfully", Font_7x10, GREEN,BLACK);
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	9202      	str	r2, [sp, #8]
 8004b24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b28:	9201      	str	r2, [sp, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	9200      	str	r2, [sp, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <SCREEN_securityLevel1POS+0x208>)
 8004b32:	2119      	movs	r1, #25
 8004b34:	2014      	movs	r0, #20
 8004b36:	f7fc fcd9 	bl	80014ec <ST7735_WriteString>
		break;
 8004b3a:	e029      	b.n	8004b90 <SCREEN_securityLevel1POS+0x1d4>
	case 5 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZG    \n\n\n        Feature Disabled Successfully\n");
 8004b3c:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <SCREEN_securityLevel1POS+0x20c>)
 8004b3e:	4817      	ldr	r0, [pc, #92]	; (8004b9c <SCREEN_securityLevel1POS+0x1e0>)
 8004b40:	f7fe f86c 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fc fe67 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fc fb40 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7fc fe61 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Feature Disabled", Font_7x10, GREEN,BLACK);
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	9202      	str	r2, [sp, #8]
 8004b5c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	9200      	str	r2, [sp, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <SCREEN_securityLevel1POS+0x210>)
 8004b6a:	210a      	movs	r1, #10
 8004b6c:	200a      	movs	r0, #10
 8004b6e:	f7fc fcbd 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(20, 25, "Successfully", Font_7x10, GREEN,BLACK);
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <SCREEN_securityLevel1POS+0x1e4>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	9202      	str	r2, [sp, #8]
 8004b78:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b7c:	9201      	str	r2, [sp, #4]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	9200      	str	r2, [sp, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <SCREEN_securityLevel1POS+0x208>)
 8004b86:	2119      	movs	r1, #25
 8004b88:	2014      	movs	r0, #20
 8004b8a:	f7fc fcaf 	bl	80014ec <ST7735_WriteString>
		break;
 8004b8e:	bf00      	nop
	}

}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08005564 	.word	0x08005564
 8004b9c:	20000060 	.word	0x20000060
 8004ba0:	20000014 	.word	0x20000014
 8004ba4:	08005594 	.word	0x08005594
 8004ba8:	080055a8 	.word	0x080055a8
 8004bac:	080055b4 	.word	0x080055b4
 8004bb0:	080055e4 	.word	0x080055e4
 8004bb4:	080055f8 	.word	0x080055f8
 8004bb8:	08005628 	.word	0x08005628
 8004bbc:	0800563c 	.word	0x0800563c
 8004bc0:	0800566c 	.word	0x0800566c
 8004bc4:	0800567c 	.word	0x0800567c
 8004bc8:	0800568c 	.word	0x0800568c
 8004bcc:	080056bc 	.word	0x080056bc

08004bd0 <SCREEN_securityLevel1NEG>:

void SCREEN_securityLevel1NEG(uint8 Copy_u8level){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af04      	add	r7, sp, #16
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]


	switch(Copy_u8level){
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	f200 80f2 	bhi.w	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <SCREEN_securityLevel1NEG+0x1c>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c09 	.word	0x08004c09
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c79 	.word	0x08004c79
 8004bf8:	08004cb1 	.word	0x08004cb1
 8004bfc:	08004ce9 	.word	0x08004ce9
 8004c00:	08004d21 	.word	0x08004d21
 8004c04:	08004d75 	.word	0x08004d75
	case 1 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Security Level 1 denied\n");
 8004c08:	4971      	ldr	r1, [pc, #452]	; (8004dd0 <SCREEN_securityLevel1NEG+0x200>)
 8004c0a:	4872      	ldr	r0, [pc, #456]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004c0c:	f7fe f806 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fc fe01 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fc fada 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	f7fc fdfb 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 1 denied", Font_7x10, RED,BLACK);
 8004c22:	4b6d      	ldr	r3, [pc, #436]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c2c:	9201      	str	r2, [sp, #4]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	9200      	str	r2, [sp, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <SCREEN_securityLevel1NEG+0x20c>)
 8004c36:	210a      	movs	r1, #10
 8004c38:	200a      	movs	r0, #10
 8004c3a:	f7fc fc57 	bl	80014ec <ST7735_WriteString>
		break;
 8004c3e:	e0c3      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 2 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Security Level 2 denied\n");
 8004c40:	4967      	ldr	r1, [pc, #412]	; (8004de0 <SCREEN_securityLevel1NEG+0x210>)
 8004c42:	4864      	ldr	r0, [pc, #400]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004c44:	f7fd ffea 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7fc fde5 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fc fabe 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fc fddf 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 2 denied", Font_7x10, RED,BLACK);
 8004c5a:	4b5f      	ldr	r3, [pc, #380]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	9202      	str	r2, [sp, #8]
 8004c60:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c64:	9201      	str	r2, [sp, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5d      	ldr	r2, [pc, #372]	; (8004de4 <SCREEN_securityLevel1NEG+0x214>)
 8004c6e:	210a      	movs	r1, #10
 8004c70:	200a      	movs	r0, #10
 8004c72:	f7fc fc3b 	bl	80014ec <ST7735_WriteString>
		break;
 8004c76:	e0a7      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 3 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Security Level 3 denied\n");
 8004c78:	495b      	ldr	r1, [pc, #364]	; (8004de8 <SCREEN_securityLevel1NEG+0x218>)
 8004c7a:	4856      	ldr	r0, [pc, #344]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004c7c:	f7fd ffce 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fc fdc9 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fc faa2 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	f7fc fdc3 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Security Level 3 Denied", Font_7x10, RED,BLACK);
 8004c92:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	9202      	str	r2, [sp, #8]
 8004c98:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004c9c:	9201      	str	r2, [sp, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	9200      	str	r2, [sp, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a51      	ldr	r2, [pc, #324]	; (8004dec <SCREEN_securityLevel1NEG+0x21c>)
 8004ca6:	210a      	movs	r1, #10
 8004ca8:	200a      	movs	r0, #10
 8004caa:	f7fc fc1f 	bl	80014ec <ST7735_WriteString>
		break;
 8004cae:	e08b      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 4 :

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Reading Temp Denied\n");
 8004cb0:	494f      	ldr	r1, [pc, #316]	; (8004df0 <SCREEN_securityLevel1NEG+0x220>)
 8004cb2:	4848      	ldr	r0, [pc, #288]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004cb4:	f7fd ffb2 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7fc fdad 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7fc fa86 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fc fda7 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Reading Temp Denied", Font_7x10, RED,BLACK);
 8004cca:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	9202      	str	r2, [sp, #8]
 8004cd0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004cd4:	9201      	str	r2, [sp, #4]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	9200      	str	r2, [sp, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a45      	ldr	r2, [pc, #276]	; (8004df4 <SCREEN_securityLevel1NEG+0x224>)
 8004cde:	210a      	movs	r1, #10
 8004ce0:	200a      	movs	r0, #10
 8004ce2:	f7fc fc03 	bl	80014ec <ST7735_WriteString>
		break;
 8004ce6:	e06f      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 5 :

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Reading Mirror Denied\n");
 8004ce8:	4943      	ldr	r1, [pc, #268]	; (8004df8 <SCREEN_securityLevel1NEG+0x228>)
 8004cea:	483a      	ldr	r0, [pc, #232]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004cec:	f7fd ff96 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fc fd91 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f7fc fa6a 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f7fc fd8b 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Reading Mirror Denied", Font_7x10, RED,BLACK);
 8004d02:	4b35      	ldr	r3, [pc, #212]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	9202      	str	r2, [sp, #8]
 8004d08:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <SCREEN_securityLevel1NEG+0x22c>)
 8004d16:	210a      	movs	r1, #10
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f7fc fbe7 	bl	80014ec <ST7735_WriteString>
		break;
 8004d1e:	e053      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 6 :

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Enabling Features is Denied\n");
 8004d20:	4937      	ldr	r1, [pc, #220]	; (8004e00 <SCREEN_securityLevel1NEG+0x230>)
 8004d22:	482c      	ldr	r0, [pc, #176]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004d24:	f7fd ff7a 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fc fd75 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fc fa4e 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004d34:	2001      	movs	r0, #1
 8004d36:	f7fc fd6f 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Enabling Features is", Font_7x10, RED,BLACK);
 8004d3a:	4b27      	ldr	r3, [pc, #156]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	9202      	str	r2, [sp, #8]
 8004d40:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	9200      	str	r2, [sp, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	; (8004e04 <SCREEN_securityLevel1NEG+0x234>)
 8004d4e:	210a      	movs	r1, #10
 8004d50:	200a      	movs	r0, #10
 8004d52:	f7fc fbcb 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(60, 25, "Denied", Font_7x10, RED,BLACK);
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	9202      	str	r2, [sp, #8]
 8004d5c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	9200      	str	r2, [sp, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <SCREEN_securityLevel1NEG+0x238>)
 8004d6a:	2119      	movs	r1, #25
 8004d6c:	203c      	movs	r0, #60	; 0x3c
 8004d6e:	f7fc fbbd 	bl	80014ec <ST7735_WriteString>
		break;
 8004d72:	e029      	b.n	8004dc8 <SCREEN_securityLevel1NEG+0x1f8>
	case 7 :
#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZR    \n\n\n        Disabling Features is Denied\n");
 8004d74:	4925      	ldr	r1, [pc, #148]	; (8004e0c <SCREEN_securityLevel1NEG+0x23c>)
 8004d76:	4817      	ldr	r0, [pc, #92]	; (8004dd4 <SCREEN_securityLevel1NEG+0x204>)
 8004d78:	f7fd ff50 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif
		ST7735_SetRotation(0);
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7fc fd4b 	bl	8001818 <ST7735_SetRotation>
		HTFT_voidFillColor(BLACK);
 8004d82:	2000      	movs	r0, #0
 8004d84:	f7fc fa24 	bl	80011d0 <HTFT_voidFillColor>
		ST7735_SetRotation(1);
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f7fc fd45 	bl	8001818 <ST7735_SetRotation>
		ST7735_WriteString(10, 10, "Disabling Features is", Font_7x10, RED,BLACK);\
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	9202      	str	r2, [sp, #8]
 8004d94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004d98:	9201      	str	r2, [sp, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	9200      	str	r2, [sp, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <SCREEN_securityLevel1NEG+0x240>)
 8004da2:	210a      	movs	r1, #10
 8004da4:	200a      	movs	r0, #10
 8004da6:	f7fc fba1 	bl	80014ec <ST7735_WriteString>
		ST7735_WriteString(60, 25, "Denied", Font_7x10, RED,BLACK);
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <SCREEN_securityLevel1NEG+0x208>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004db4:	9201      	str	r2, [sp, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	9200      	str	r2, [sp, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <SCREEN_securityLevel1NEG+0x238>)
 8004dbe:	2119      	movs	r1, #25
 8004dc0:	203c      	movs	r0, #60	; 0x3c
 8004dc2:	f7fc fb93 	bl	80014ec <ST7735_WriteString>
		break;
 8004dc6:	bf00      	nop
	}
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080056d0 	.word	0x080056d0
 8004dd4:	20000060 	.word	0x20000060
 8004dd8:	20000014 	.word	0x20000014
 8004ddc:	080056fc 	.word	0x080056fc
 8004de0:	08005714 	.word	0x08005714
 8004de4:	08005740 	.word	0x08005740
 8004de8:	08005758 	.word	0x08005758
 8004dec:	08005784 	.word	0x08005784
 8004df0:	0800579c 	.word	0x0800579c
 8004df4:	080057c4 	.word	0x080057c4
 8004df8:	080057d8 	.word	0x080057d8
 8004dfc:	08005800 	.word	0x08005800
 8004e00:	08005818 	.word	0x08005818
 8004e04:	08005848 	.word	0x08005848
 8004e08:	08005860 	.word	0x08005860
 8004e0c:	08005868 	.word	0x08005868
 8004e10:	08005898 	.word	0x08005898

08004e14 <SCREEN_Temp>:


void SCREEN_Temp(uint8 Copy_u8DTC, uint8 Copy_u8CurrentReading){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af04      	add	r7, sp, #16
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	71fb      	strb	r3, [r7, #7]
 8004e20:	4613      	mov	r3, r2
 8004e22:	71bb      	strb	r3, [r7, #6]
	char str[] = "000";
 8004e24:	4b69      	ldr	r3, [pc, #420]	; (8004fcc <SCREEN_Temp+0x1b8>)
 8004e26:	60fb      	str	r3, [r7, #12]

	str[2] = (Copy_u8CurrentReading % 10)+48;
 8004e28:	79ba      	ldrb	r2, [r7, #6]
 8004e2a:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <SCREEN_Temp+0x1bc>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	08d9      	lsrs	r1, r3, #3
 8004e32:	460b      	mov	r3, r1
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3330      	adds	r3, #48	; 0x30
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	73bb      	strb	r3, [r7, #14]
	Copy_u8CurrentReading /= 10;
 8004e44:	79bb      	ldrb	r3, [r7, #6]
 8004e46:	4a62      	ldr	r2, [pc, #392]	; (8004fd0 <SCREEN_Temp+0x1bc>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	71bb      	strb	r3, [r7, #6]
	str[1] = (Copy_u8CurrentReading % 10)+48;
 8004e50:	79ba      	ldrb	r2, [r7, #6]
 8004e52:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <SCREEN_Temp+0x1bc>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	08d9      	lsrs	r1, r3, #3
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3330      	adds	r3, #48	; 0x30
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	737b      	strb	r3, [r7, #13]
	Copy_u8CurrentReading /= 10;
 8004e6c:	79bb      	ldrb	r3, [r7, #6]
 8004e6e:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <SCREEN_Temp+0x1bc>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	71bb      	strb	r3, [r7, #6]
	str[0] = (Copy_u8CurrentReading % 10)+48;
 8004e78:	79ba      	ldrb	r2, [r7, #6]
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <SCREEN_Temp+0x1bc>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	08d9      	lsrs	r1, r3, #3
 8004e82:	460b      	mov	r3, r1
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	3330      	adds	r3, #48	; 0x30
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	733b      	strb	r3, [r7, #12]
	//   Copy_u8CurrentReading /= 10;

#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZB    \n\n\n             Temp Value: ");
 8004e94:	494f      	ldr	r1, [pc, #316]	; (8004fd4 <SCREEN_Temp+0x1c0>)
 8004e96:	4850      	ldr	r0, [pc, #320]	; (8004fd8 <SCREEN_Temp+0x1c4>)
 8004e98:	f7fd fec0 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking( &Usart1,'V' );
 8004e9c:	2156      	movs	r1, #86	; 0x56
 8004e9e:	484e      	ldr	r0, [pc, #312]	; (8004fd8 <SCREEN_Temp+0x1c4>)
 8004ea0:	f7fd fe90 	bl	8002bc4 <Usart_enuTransmitCharBlocking>
	Usart_enuTransmitStringBlocking( &Usart1,(uint8*)str );
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	484b      	ldr	r0, [pc, #300]	; (8004fd8 <SCREEN_Temp+0x1c4>)
 8004eac:	f7fd feb6 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	if(Copy_u8DTC ==0)
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <SCREEN_Temp+0xac>
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"zGNLG    \n\n	       NO ERROR");
 8004eb6:	4949      	ldr	r1, [pc, #292]	; (8004fdc <SCREEN_Temp+0x1c8>)
 8004eb8:	4847      	ldr	r0, [pc, #284]	; (8004fd8 <SCREEN_Temp+0x1c4>)
 8004eba:	f7fd feaf 	bl	8002c1c <Usart_enuTransmitStringBlocking>
 8004ebe:	e003      	b.n	8004ec8 <SCREEN_Temp+0xb4>
	else
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"zRNLR    \n\n		 ERROR");
 8004ec0:	4947      	ldr	r1, [pc, #284]	; (8004fe0 <SCREEN_Temp+0x1cc>)
 8004ec2:	4845      	ldr	r0, [pc, #276]	; (8004fd8 <SCREEN_Temp+0x1c4>)
 8004ec4:	f7fd feaa 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif

	ST7735_SetRotation(0);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7fc fca5 	bl	8001818 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fc f97e 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f7fc fc9f 	bl	8001818 <ST7735_SetRotation>
	ST7735_WriteString(10,2, "Temp Value", Font_11x18, RED,BLACK);
 8004eda:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <SCREEN_Temp+0x1d0>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	9202      	str	r2, [sp, #8]
 8004ee0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004ee4:	9201      	str	r2, [sp, #4]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	9200      	str	r2, [sp, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <SCREEN_Temp+0x1d4>)
 8004eee:	2102      	movs	r1, #2
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	f7fc fafb 	bl	80014ec <ST7735_WriteString>
	HTFT_voidDrawRect(0,160,30,75,CYAN);
 8004ef6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	234b      	movs	r3, #75	; 0x4b
 8004efe:	221e      	movs	r2, #30
 8004f00:	21a0      	movs	r1, #160	; 0xa0
 8004f02:	2000      	movs	r0, #0
 8004f04:	f7fc f9a7 	bl	8001256 <HTFT_voidDrawRect>


	switch(Copy_u8DTC){
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <SCREEN_Temp+0x100>
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d010      	beq.n	8004f34 <SCREEN_Temp+0x120>
 8004f12:	e01f      	b.n	8004f54 <SCREEN_Temp+0x140>
	case 0 :
		ST7735_WriteString(3, 35, "DTC        No Error ", Font_7x10, MAGENTA,CYAN);
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <SCREEN_Temp+0x1d8>)
 8004f16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f1a:	9202      	str	r2, [sp, #8]
 8004f1c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8004f20:	9201      	str	r2, [sp, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	9200      	str	r2, [sp, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a31      	ldr	r2, [pc, #196]	; (8004ff0 <SCREEN_Temp+0x1dc>)
 8004f2a:	2123      	movs	r1, #35	; 0x23
 8004f2c:	2003      	movs	r0, #3
 8004f2e:	f7fc fadd 	bl	80014ec <ST7735_WriteString>
		break;
 8004f32:	e00f      	b.n	8004f54 <SCREEN_Temp+0x140>
	case 1 :
		ST7735_WriteString(3, 35, "DTC        Error ", Font_7x10, RED,CYAN);
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <SCREEN_Temp+0x1d8>)
 8004f36:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f3a:	9202      	str	r2, [sp, #8]
 8004f3c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004f40:	9201      	str	r2, [sp, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	9200      	str	r2, [sp, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2a      	ldr	r2, [pc, #168]	; (8004ff4 <SCREEN_Temp+0x1e0>)
 8004f4a:	2123      	movs	r1, #35	; 0x23
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f7fc facd 	bl	80014ec <ST7735_WriteString>
		break;
 8004f52:	bf00      	nop
	}



	ST7735_WriteString(3, 56, "Curr Read", Font_7x10, BLACK,CYAN);
 8004f54:	4b25      	ldr	r3, [pc, #148]	; (8004fec <SCREEN_Temp+0x1d8>)
 8004f56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f5a:	9202      	str	r2, [sp, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	9201      	str	r2, [sp, #4]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	9200      	str	r2, [sp, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <SCREEN_Temp+0x1e4>)
 8004f68:	2138      	movs	r1, #56	; 0x38
 8004f6a:	2003      	movs	r0, #3
 8004f6c:	f7fc fabe 	bl	80014ec <ST7735_WriteString>
	ST7735_WriteString(90, 56, str, Font_7x10, BLACK,CYAN);
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <SCREEN_Temp+0x1d8>)
 8004f72:	f107 010c 	add.w	r1, r7, #12
 8004f76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f7a:	9202      	str	r2, [sp, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	9201      	str	r2, [sp, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	9200      	str	r2, [sp, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	460a      	mov	r2, r1
 8004f88:	2138      	movs	r1, #56	; 0x38
 8004f8a:	205a      	movs	r0, #90	; 0x5a
 8004f8c:	f7fc faae 	bl	80014ec <ST7735_WriteString>

	drawRect(2,32,156,96,BLACK);
 8004f90:	2300      	movs	r3, #0
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2360      	movs	r3, #96	; 0x60
 8004f96:	229c      	movs	r2, #156	; 0x9c
 8004f98:	2120      	movs	r1, #32
 8004f9a:	2002      	movs	r0, #2
 8004f9c:	f7fc fc07 	bl	80017ae <drawRect>
	drawFastVLine(77,32,96,BLACK);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2260      	movs	r2, #96	; 0x60
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	204d      	movs	r0, #77	; 0x4d
 8004fa8:	f7fc fbbf 	bl	800172a <drawFastVLine>
	// drawFastVLine(110,32,96,BLACK);
	drawFastHLine(2,53,156,BLACK);
 8004fac:	2300      	movs	r3, #0
 8004fae:	229c      	movs	r2, #156	; 0x9c
 8004fb0:	2135      	movs	r1, #53	; 0x35
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	f7fc fbda 	bl	800176c <drawFastHLine>
	drawFastHLine(2,71,156,BLACK);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	229c      	movs	r2, #156	; 0x9c
 8004fbc:	2147      	movs	r1, #71	; 0x47
 8004fbe:	2002      	movs	r0, #2
 8004fc0:	f7fc fbd4 	bl	800176c <drawFastHLine>
	//  drawFastHLine(2,90,156,BLACK);
	// drawFastHLine(2,115,156,BLACK);


}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00303030 	.word	0x00303030
 8004fd0:	cccccccd 	.word	0xcccccccd
 8004fd4:	080058b0 	.word	0x080058b0
 8004fd8:	20000060 	.word	0x20000060
 8004fdc:	080058d4 	.word	0x080058d4
 8004fe0:	080058f0 	.word	0x080058f0
 8004fe4:	2000001c 	.word	0x2000001c
 8004fe8:	08005904 	.word	0x08005904
 8004fec:	20000014 	.word	0x20000014
 8004ff0:	08005910 	.word	0x08005910
 8004ff4:	08005928 	.word	0x08005928
 8004ff8:	0800593c 	.word	0x0800593c

08004ffc <SCREEN_Mirror>:

void SCREEN_Mirror(uint8 Copy_u8DTC, uint8 Copy_u8CurrentReading){
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af04      	add	r7, sp, #16
 8005002:	4603      	mov	r3, r0
 8005004:	460a      	mov	r2, r1
 8005006:	71fb      	strb	r3, [r7, #7]
 8005008:	4613      	mov	r3, r2
 800500a:	71bb      	strb	r3, [r7, #6]


#if (UART_GUI == ONE_VALUE)
	Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"ZB    \n\n\n             Read Mirror: ");
 800500c:	4952      	ldr	r1, [pc, #328]	; (8005158 <SCREEN_Mirror+0x15c>)
 800500e:	4853      	ldr	r0, [pc, #332]	; (800515c <SCREEN_Mirror+0x160>)
 8005010:	f7fd fe04 	bl	8002c1c <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking( &Usart1,'V' );
 8005014:	2156      	movs	r1, #86	; 0x56
 8005016:	4851      	ldr	r0, [pc, #324]	; (800515c <SCREEN_Mirror+0x160>)
 8005018:	f7fd fdd4 	bl	8002bc4 <Usart_enuTransmitCharBlocking>
	if (Copy_u8CurrentReading == ZERO_VALUE){
 800501c:	79bb      	ldrb	r3, [r7, #6]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d104      	bne.n	800502c <SCREEN_Mirror+0x30>
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"OPEN");
 8005022:	494f      	ldr	r1, [pc, #316]	; (8005160 <SCREEN_Mirror+0x164>)
 8005024:	484d      	ldr	r0, [pc, #308]	; (800515c <SCREEN_Mirror+0x160>)
 8005026:	f7fd fdf9 	bl	8002c1c <Usart_enuTransmitStringBlocking>
 800502a:	e006      	b.n	800503a <SCREEN_Mirror+0x3e>
	}
	else if (Copy_u8CurrentReading == ONE_VALUE){
 800502c:	79bb      	ldrb	r3, [r7, #6]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d103      	bne.n	800503a <SCREEN_Mirror+0x3e>
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"CLOSED");
 8005032:	494c      	ldr	r1, [pc, #304]	; (8005164 <SCREEN_Mirror+0x168>)
 8005034:	4849      	ldr	r0, [pc, #292]	; (800515c <SCREEN_Mirror+0x160>)
 8005036:	f7fd fdf1 	bl	8002c1c <Usart_enuTransmitStringBlocking>

	}

	if(Copy_u8DTC ==ZERO_VALUE)
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <SCREEN_Mirror+0x4e>
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"zGNMG    \n\n	       NO ERROR");
 8005040:	4949      	ldr	r1, [pc, #292]	; (8005168 <SCREEN_Mirror+0x16c>)
 8005042:	4846      	ldr	r0, [pc, #280]	; (800515c <SCREEN_Mirror+0x160>)
 8005044:	f7fd fdea 	bl	8002c1c <Usart_enuTransmitStringBlocking>
 8005048:	e003      	b.n	8005052 <SCREEN_Mirror+0x56>
	else
		Usart_enuTransmitStringBlocking( &Usart1, (uint8*)"zRNMR    \n\n		 ERROR");
 800504a:	4948      	ldr	r1, [pc, #288]	; (800516c <SCREEN_Mirror+0x170>)
 800504c:	4843      	ldr	r0, [pc, #268]	; (800515c <SCREEN_Mirror+0x160>)
 800504e:	f7fd fde5 	bl	8002c1c <Usart_enuTransmitStringBlocking>

#endif


	ST7735_SetRotation(0);
 8005052:	2000      	movs	r0, #0
 8005054:	f7fc fbe0 	bl	8001818 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 8005058:	2000      	movs	r0, #0
 800505a:	f7fc f8b9 	bl	80011d0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 800505e:	2001      	movs	r0, #1
 8005060:	f7fc fbda 	bl	8001818 <ST7735_SetRotation>
	ST7735_WriteString(20,2, "Read Mirror", Font_11x18, RED,BLACK);
 8005064:	4b42      	ldr	r3, [pc, #264]	; (8005170 <SCREEN_Mirror+0x174>)
 8005066:	2200      	movs	r2, #0
 8005068:	9202      	str	r2, [sp, #8]
 800506a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800506e:	9201      	str	r2, [sp, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	9200      	str	r2, [sp, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <SCREEN_Mirror+0x178>)
 8005078:	2102      	movs	r1, #2
 800507a:	2014      	movs	r0, #20
 800507c:	f7fc fa36 	bl	80014ec <ST7735_WriteString>
	HTFT_voidDrawRect(0,160,30,75,CYAN);
 8005080:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	234b      	movs	r3, #75	; 0x4b
 8005088:	221e      	movs	r2, #30
 800508a:	21a0      	movs	r1, #160	; 0xa0
 800508c:	2000      	movs	r0, #0
 800508e:	f7fc f8e2 	bl	8001256 <HTFT_voidDrawRect>
	switch(Copy_u8DTC){
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <SCREEN_Mirror+0xa2>
 8005098:	2b01      	cmp	r3, #1
 800509a:	d010      	beq.n	80050be <SCREEN_Mirror+0xc2>
 800509c:	e01f      	b.n	80050de <SCREEN_Mirror+0xe2>
	case 0 :
		ST7735_WriteString(5, 36, "DTC        No Error ", Font_7x10, MAGENTA,CYAN);
 800509e:	4b36      	ldr	r3, [pc, #216]	; (8005178 <SCREEN_Mirror+0x17c>)
 80050a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050a4:	9202      	str	r2, [sp, #8]
 80050a6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80050aa:	9201      	str	r2, [sp, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	9200      	str	r2, [sp, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a32      	ldr	r2, [pc, #200]	; (800517c <SCREEN_Mirror+0x180>)
 80050b4:	2124      	movs	r1, #36	; 0x24
 80050b6:	2005      	movs	r0, #5
 80050b8:	f7fc fa18 	bl	80014ec <ST7735_WriteString>
		break;
 80050bc:	e00f      	b.n	80050de <SCREEN_Mirror+0xe2>
	case 1 :
		ST7735_WriteString(5, 36, "DTC        Error ", Font_7x10, RED,CYAN);
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <SCREEN_Mirror+0x17c>)
 80050c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050c4:	9202      	str	r2, [sp, #8]
 80050c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80050ca:	9201      	str	r2, [sp, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	9200      	str	r2, [sp, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <SCREEN_Mirror+0x184>)
 80050d4:	2124      	movs	r1, #36	; 0x24
 80050d6:	2005      	movs	r0, #5
 80050d8:	f7fc fa08 	bl	80014ec <ST7735_WriteString>
		break;
 80050dc:	bf00      	nop
	}

	switch(Copy_u8CurrentReading){
 80050de:	79bb      	ldrb	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <SCREEN_Mirror+0xee>
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d00f      	beq.n	8005108 <SCREEN_Mirror+0x10c>
 80050e8:	e01d      	b.n	8005126 <SCREEN_Mirror+0x12a>
	case 0 :
		ST7735_WriteString(5, 56, "State       Open ", Font_7x10, BLACK,CYAN);
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <SCREEN_Mirror+0x17c>)
 80050ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	9201      	str	r2, [sp, #4]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	9200      	str	r2, [sp, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a21      	ldr	r2, [pc, #132]	; (8005184 <SCREEN_Mirror+0x188>)
 80050fe:	2138      	movs	r1, #56	; 0x38
 8005100:	2005      	movs	r0, #5
 8005102:	f7fc f9f3 	bl	80014ec <ST7735_WriteString>
		break;
 8005106:	e00e      	b.n	8005126 <SCREEN_Mirror+0x12a>

	case 1 :
		ST7735_WriteString(5, 56, "State       Closed ", Font_7x10, BLACK,CYAN);
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <SCREEN_Mirror+0x17c>)
 800510a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800510e:	9202      	str	r2, [sp, #8]
 8005110:	2200      	movs	r2, #0
 8005112:	9201      	str	r2, [sp, #4]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	9200      	str	r2, [sp, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <SCREEN_Mirror+0x18c>)
 800511c:	2138      	movs	r1, #56	; 0x38
 800511e:	2005      	movs	r0, #5
 8005120:	f7fc f9e4 	bl	80014ec <ST7735_WriteString>
		break;
 8005124:	bf00      	nop

	}

	drawRect(2,32,156,96,BLACK);
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2360      	movs	r3, #96	; 0x60
 800512c:	229c      	movs	r2, #156	; 0x9c
 800512e:	2120      	movs	r1, #32
 8005130:	2002      	movs	r0, #2
 8005132:	f7fc fb3c 	bl	80017ae <drawRect>
	drawFastVLine(77,32,50,BLACK);
 8005136:	2300      	movs	r3, #0
 8005138:	2232      	movs	r2, #50	; 0x32
 800513a:	2120      	movs	r1, #32
 800513c:	204d      	movs	r0, #77	; 0x4d
 800513e:	f7fc faf4 	bl	800172a <drawFastVLine>
	//drawFastVLine(110,32,96,BLACK);
	drawFastHLine(2,53,156,BLACK);
 8005142:	2300      	movs	r3, #0
 8005144:	229c      	movs	r2, #156	; 0x9c
 8005146:	2135      	movs	r1, #53	; 0x35
 8005148:	2002      	movs	r0, #2
 800514a:	f7fc fb0f 	bl	800176c <drawFastHLine>
	// drawFastHLine(2,71,156,BLACK);
	// drawFastHLine(2,90,156,BLACK);
	//drawFastHLine(2,115,156,BLACK);

}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	08005948 	.word	0x08005948
 800515c:	20000060 	.word	0x20000060
 8005160:	0800596c 	.word	0x0800596c
 8005164:	08005974 	.word	0x08005974
 8005168:	0800597c 	.word	0x0800597c
 800516c:	08005998 	.word	0x08005998
 8005170:	2000001c 	.word	0x2000001c
 8005174:	080059ac 	.word	0x080059ac
 8005178:	20000014 	.word	0x20000014
 800517c:	08005910 	.word	0x08005910
 8005180:	08005928 	.word	0x08005928
 8005184:	080059b8 	.word	0x080059b8
 8005188:	080059cc 	.word	0x080059cc

0800518c <Reset_Handler>:
 800518c:	480d      	ldr	r0, [pc, #52]	; (80051c4 <LoopForever+0x2>)
 800518e:	4685      	mov	sp, r0
 8005190:	f3af 8000 	nop.w
 8005194:	480c      	ldr	r0, [pc, #48]	; (80051c8 <LoopForever+0x6>)
 8005196:	490d      	ldr	r1, [pc, #52]	; (80051cc <LoopForever+0xa>)
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <LoopForever+0xe>)
 800519a:	2300      	movs	r3, #0
 800519c:	e002      	b.n	80051a4 <LoopCopyDataInit>

0800519e <CopyDataInit>:
 800519e:	58d4      	ldr	r4, [r2, r3]
 80051a0:	50c4      	str	r4, [r0, r3]
 80051a2:	3304      	adds	r3, #4

080051a4 <LoopCopyDataInit>:
 80051a4:	18c4      	adds	r4, r0, r3
 80051a6:	428c      	cmp	r4, r1
 80051a8:	d3f9      	bcc.n	800519e <CopyDataInit>
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <LoopForever+0x12>)
 80051ac:	4c0a      	ldr	r4, [pc, #40]	; (80051d8 <LoopForever+0x16>)
 80051ae:	2300      	movs	r3, #0
 80051b0:	e001      	b.n	80051b6 <LoopFillZerobss>

080051b2 <FillZerobss>:
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	3204      	adds	r2, #4

080051b6 <LoopFillZerobss>:
 80051b6:	42a2      	cmp	r2, r4
 80051b8:	d3fb      	bcc.n	80051b2 <FillZerobss>
 80051ba:	f000 f819 	bl	80051f0 <__libc_init_array>
 80051be:	f7fe fe71 	bl	8003ea4 <main>

080051c2 <LoopForever>:
 80051c2:	e7fe      	b.n	80051c2 <LoopForever>
 80051c4:	20005000 	.word	0x20005000
 80051c8:	20000000 	.word	0x20000000
 80051cc:	20000084 	.word	0x20000084
 80051d0:	08008218 	.word	0x08008218
 80051d4:	20000084 	.word	0x20000084
 80051d8:	20002218 	.word	0x20002218

080051dc <ADC1_2_IRQHandler>:
 80051dc:	e7fe      	b.n	80051dc <ADC1_2_IRQHandler>

080051de <memset>:
 80051de:	4603      	mov	r3, r0
 80051e0:	4402      	add	r2, r0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d100      	bne.n	80051e8 <memset+0xa>
 80051e6:	4770      	bx	lr
 80051e8:	f803 1b01 	strb.w	r1, [r3], #1
 80051ec:	e7f9      	b.n	80051e2 <memset+0x4>
	...

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	2600      	movs	r6, #0
 80051f4:	4d0c      	ldr	r5, [pc, #48]	; (8005228 <__libc_init_array+0x38>)
 80051f6:	4c0d      	ldr	r4, [pc, #52]	; (800522c <__libc_init_array+0x3c>)
 80051f8:	1b64      	subs	r4, r4, r5
 80051fa:	10a4      	asrs	r4, r4, #2
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	f000 f81a 	bl	8005238 <_init>
 8005204:	2600      	movs	r6, #0
 8005206:	4d0a      	ldr	r5, [pc, #40]	; (8005230 <__libc_init_array+0x40>)
 8005208:	4c0a      	ldr	r4, [pc, #40]	; (8005234 <__libc_init_array+0x44>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	08008210 	.word	0x08008210
 800522c:	08008210 	.word	0x08008210
 8005230:	08008210 	.word	0x08008210
 8005234:	08008214 	.word	0x08008214

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
